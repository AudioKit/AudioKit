//
//  AKVocoder.swift
//  AudioKit
//
//  Autogenerated by scripts by Aurelius Prochazka. Do not edit directly.
//  Copyright (c) 2016 Aurelius Prochazka. All rights reserved.
//

import AVFoundation

/// 16-band channel vocoder
///
/// - parameter input: Input node to process
/// - parameter attackTime: Attack time (seconds)
/// - parameter rel: Release time
/// - parameter bandwidthRatio: Coeffecient to adjust the bandwidth of each band
///
public class AKVocoder: AKNode {

    // MARK: - Properties

    /// Required property for AKNode
    public var avAudioNode: AVAudioNode
    /// Required property for AKNode containing all the node's connections
    public var connectionPoints = [AVAudioConnectionPoint]()

    internal var internalAU: AKVocoderAudioUnit?
    internal var token: AUParameterObserverToken?

    private var attackTimeParameter: AUParameter?
    private var relParameter: AUParameter?
    private var bandwidthRatioParameter: AUParameter?

    /// Attack time (seconds)
    public var attackTime: Double = 0.1 {
        didSet {
            attackTimeParameter?.setValue(Float(attackTime), originator: token!)
        }
    }
    /// Release time
    public var rel: Double = 0.1 {
        didSet {
            relParameter?.setValue(Float(rel), originator: token!)
        }
    }
    /// Coeffecient to adjust the bandwidth of each band
    public var bandwidthRatio: Double = 0.5 {
        didSet {
            bandwidthRatioParameter?.setValue(Float(bandwidthRatio), originator: token!)
        }
    }

    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isStarted: Bool {
        return internalAU!.isPlaying()
    }

    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isPlaying: Bool {
        return internalAU!.isPlaying()
    }

    /// Tells whether the node is not processing (ie. stopped or bypassed)
    public var isStopped: Bool {
        return !internalAU!.isPlaying()
    }

    /// Tells whether the node is not processing (ie. stopped or bypassed)
    public var isBypassed: Bool {
        return !internalAU!.isPlaying()
    }

    // MARK: - Initialization

    /// Initialize this vocoder node
    ///
    /// - parameter input: Input node to process
    /// - parameter attackTime: Attack time (seconds)
    /// - parameter rel: Release time
    /// - parameter bandwidthRatio: Coeffecient to adjust the bandwidth of each band
    ///
    public init(
        var _ input: AKNode,
        attackTime: Double = 0.1,
        rel: Double = 0.1,
        bandwidthRatio: Double = 0.5) {

        self.attackTime = attackTime
        self.rel = rel
        self.bandwidthRatio = bandwidthRatio

        var description = AudioComponentDescription()
        description.componentType         = kAudioUnitType_Effect
        description.componentSubType      = 0x76636472 /*'vcdr'*/
        description.componentManufacturer = 0x41754b74 /*'AuKt'*/
        description.componentFlags        = 0
        description.componentFlagsMask    = 0

        AUAudioUnit.registerSubclass(
            AKVocoderAudioUnit.self,
            asComponentDescription: description,
            name: "Local AKVocoder",
            version: UInt32.max)

        self.avAudioNode = AVAudioNode()
        AVAudioUnit.instantiateWithComponentDescription(description, options: []) {
            avAudioUnit, error in

            guard let avAudioUnitEffect = avAudioUnit else { return }

            self.avAudioNode = avAudioUnitEffect
            self.internalAU = avAudioUnitEffect.AUAudioUnit as? AKVocoderAudioUnit

            AKManager.sharedInstance.engine.attachNode(self.avAudioNode)
            input.addConnectionPoint(self)
        }

        guard let tree = internalAU?.parameterTree else { return }

        attackTimeParameter     = tree.valueForKey("attackTime")     as? AUParameter
        relParameter            = tree.valueForKey("rel")            as? AUParameter
        bandwidthRatioParameter = tree.valueForKey("bandwidthRatio") as? AUParameter

        token = tree.tokenByAddingParameterObserver {
            address, value in

            dispatch_async(dispatch_get_main_queue()) {
                if address == self.attackTimeParameter!.address {
                    self.attackTime = Double(value)
                } else if address == self.relParameter!.address {
                    self.rel = Double(value)
                } else if address == self.bandwidthRatioParameter!.address {
                    self.bandwidthRatio = Double(value)
                }
            }
        }
        attackTimeParameter?.setValue(Float(attackTime), originator: token!)
        relParameter?.setValue(Float(rel), originator: token!)
        bandwidthRatioParameter?.setValue(Float(bandwidthRatio), originator: token!)
    }

    /// Function to start, play, or activate the node, all do the same thing
    public func start() {
        self.internalAU!.start()
    }

    /// Function to stop or bypass the node, both are equivalent
    public func stop() {
        self.internalAU!.stop()
    }

    /// Function to start, play, or activate the node, all do the same thing
    public func play() {
        self.internalAU!.start()
    }

    /// Function to stop or bypass the node, both are equivalent
    public func bypass() {
        self.internalAU!.stop()
    }
}
