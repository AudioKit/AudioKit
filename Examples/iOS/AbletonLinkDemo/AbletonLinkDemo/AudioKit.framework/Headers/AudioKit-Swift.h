// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import AudioToolbox;
@import AVFoundation;
@import Foundation;
@import CoreMIDI;
@import Accelerate;
#endif

#import <AudioKit/AudioKit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class AVAudioNode;

/// Parent class for all nodes in AudioKit
SWIFT_CLASS("_TtC8AudioKit6AKNode")
@interface AKNode : NSObject
/// The internal AVAudioEngine AVAudioNode
@property (nonatomic, strong) AVAudioNode * _Nonnull avAudioNode;
/// Create the node
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize the node
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach OBJC_DESIGNATED_INITIALIZER;
/// Connect this node to another
- (void)addConnectionPoint:(AKNode * _Nonnull)node bus:(NSInteger)bus;
/// Disconnect the node
- (void)disconnect;
/// Disconnect an array of nodes
- (void)disconnectWithNodes:(NSArray<AVAudioNode *> * _Nonnull)nodes;
@end


/// 3-D Spatialization of the input
SWIFT_CLASS("_TtC8AudioKit10AK3DPanner")
@interface AK3DPanner : AKNode
/// Position of sound source along x-axis
@property (nonatomic) double x;
/// Position of sound source along y-axis
@property (nonatomic) double y;
/// Position of sound source along z-axis
@property (nonatomic) double z;
/// Initialize the panner node
/// \param input Node to pan in 3D Space
///
/// \param x x-axis location in meters
///
/// \param y y-axis location in meters
///
/// \param z z-axis location in meters
///
- (nonnull instancetype)init:(AKNode * _Nullable)input x:(double)x y:(double)y z:(double)z OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end

@class UIColor;
@class NSCoder;
@class UITouch;
@class UIEvent;

/// A click and draggable view of an ADSR Envelope (Atttack, Decay, Sustain, Release)
SWIFT_CLASS("_TtC8AudioKit10AKADSRView")
@interface AKADSRView : UIView
/// Attack time in seconds, Default: 0.1
@property (nonatomic) double attackDuration;
/// Decay time in seconds, Default: 0.1
@property (nonatomic) double decayDuration;
/// Sustain Level (0-1), Default: 0.5
@property (nonatomic) double sustainLevel;
/// Release time in seconds, Default: 0.1
@property (nonatomic) double releaseDuration;
/// Function to call when the values of the ADSR changes
@property (nonatomic, copy) void (^ _Nullable callback)(double, double, double, double);
/// / Color Declarations
/// Color in the attack portion of the UI element
@property (nonatomic, strong) UIColor * _Nonnull attackColor;
/// Color in the decay portion of the UI element
@property (nonatomic, strong) UIColor * _Nonnull decayColor;
/// Color in the sustain portion of the UI element
@property (nonatomic, strong) UIColor * _Nonnull sustainColor;
/// Color in the release portion of the UI element
@property (nonatomic, strong) UIColor * _Nonnull releaseColor;
/// Width of the envelope curve
@property (nonatomic) CGFloat curveStrokeWidth;
/// Color of the envelope curve
@property (nonatomic, strong) UIColor * _Nonnull curveColor;
/// Initialize the view, usually with a callback
- (nonnull instancetype)initWithCallback:(void (^ _Nullable)(double, double, double, double))callback OBJC_DESIGNATED_INITIALIZER;
/// Initialization of the view from within interface builder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Perform necessary operation to allow the view to be rendered in interface builder
- (void)prepareForInterfaceBuilder;
/// Size of the view
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Requeire a constraint based layout with interface builder
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL requiresConstraintBasedLayout;)
+ (BOOL)requiresConstraintBasedLayout SWIFT_WARN_UNUSED_RESULT;
/// Handle new touches
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Handle moving touches
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Draw the view
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Triggerable classic ADSR envelope
SWIFT_CLASS("_TtC8AudioKit19AKAmplitudeEnvelope")
@interface AKAmplitudeEnvelope : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Attack time
@property (nonatomic) double attackDuration;
/// Decay time
@property (nonatomic) double decayDuration;
/// Sustain Level
@property (nonatomic) double sustainLevel;
/// Release time
@property (nonatomic) double releaseDuration;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this envelope node
/// \param input Input node to process
///
/// \param attackDuration Attack time
///
/// \param decayDuration Decay time
///
/// \param sustainLevel Sustain Level
///
/// \param releaseDuration Release time
///
- (nonnull instancetype)init:(AKNode * _Nullable)input attackDuration:(double)attackDuration decayDuration:(double)decayDuration sustainLevel:(double)sustainLevel releaseDuration:(double)releaseDuration OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Performs a “root-mean-square” on a signal to get overall amplitude of a
/// signal. The output signal looks similar to that of a classic VU meter.
SWIFT_CLASS("_TtC8AudioKit18AKAmplitudeTracker")
@interface AKAmplitudeTracker : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Detected amplitude
@property (nonatomic, readonly) double amplitude;
/// Threshold amplitude
@property (nonatomic) double threshold;
/// Initialize this amplitude tracker node
/// \param input Input node to process
///
/// \param halfPowerPoint Half-power point (in Hz) of internal lowpass filter.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input halfPowerPoint:(double)halfPowerPoint threshold:(double)threshold thresholdCallback:(void (^ _Nonnull)(BOOL))thresholdCallback OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end

@class AVURLAsset;
@class AVAudioPCMBuffer;

/// Audio file, inherits from AVAudioFile and adds functionality
SWIFT_CLASS("_TtC8AudioKit11AKAudioFile")
@interface AKAudioFile : AVAudioFile
/// Returns an AVAsset from the AKAudioFile
@property (nonatomic, readonly, strong) AVURLAsset * _Nonnull avAsset;
/// Returns audio data as an <code>Array</code> of <code>Float</code> Arrays.
/// If stereo:
/// <ul>
///   <li>
///     <code>floatChannelData?[0]</code> will contain an Array of left channel samples as <code>Float</code>
///   </li>
///   <li>
///     <code>floatChannelData?[1]</code> will contains an Array of right channel samples as <code>Float</code>
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<NSArray<NSNumber *> *> * _Nullable floatChannelData;
/// returns audio data as an AVAudioPCMBuffer
@property (nonatomic, strong) AVAudioPCMBuffer * _Nonnull pcmBuffer;
/// returns the peak level expressed in dB ( -> Float).
@property (nonatomic) float maxLevel;
/// Initialize the audio file
/// \param fileURL URL of the file
///
///
/// returns:
/// An initialized AKAudioFile object for reading, or nil if init failed.
- (nullable instancetype)initForReading:(NSURL * _Nonnull)fileURL error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize the audio file
/// \param fileURL URL of the file
///
/// \param format The processing commonFormat to use when reading from the file.
///
/// \param interleaved Whether to use an interleaved processing format.
///
///
/// returns:
/// An initialized AKAudioFile object for reading, or nil if init failed.
- (nullable instancetype)initForReading:(NSURL * _Nonnull)fileURL commonFormat:(AVAudioCommonFormat)format interleaved:(BOOL)interleaved error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize the audio file
/// From Apple doc: The file type to create is inferred from the file extension of fileURL.
/// This method will overwrite a file at the specified URL if a file already exists.
/// The file is opened for writing using the standard format, AVAudioPCMFormatFloat32.
/// Note: It seems that Apple’s AVAudioFile class has a bug with .wav files. They cannot be set
/// with a floating Point encoding. As a consequence, such files will fail to record properly.
/// So it’s better to use .caf (or .aif) files for recording purpose.
/// \param fileURL URL of the file.
///
/// \param settings The format of the file to create.
///
/// \param format The processing commonFormat to use when writing.
///
/// \param interleaved Whether to use an interleaved processing format.
///
///
/// throws:
/// NSError if init failed
///
/// returns:
/// An initialized AKAudioFile for writing, or nil if init failed.
- (nullable instancetype)initForWriting:(NSURL * _Nonnull)fileURL settings:(NSDictionary<NSString *, id> * _Nonnull)settings commonFormat:(AVAudioCommonFormat)format interleaved:(BOOL)interleaved error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Super.init inherited from AVAudioFile superclass
/// From Apple doc: The file type to create is inferred from the file extension of fileURL.
/// This method will overwrite a file at the specified URL if a file already exists.
/// The file is opened for writing using the standard format, AVAudioPCMFormatFloat32.
/// Note: It seems that Apple’s AVAudioFile class has a bug with .wav files. They cannot be set
/// with a floating Point encoding. As a consequence, such files will fail to record properly.
/// So it’s better to use .caf (or .aif) files for recording purpose.
/// \param fileURL URL of the file.
///
/// \param settings The settings of the file to create.
///
///
/// returns:
/// An initialized AKAudioFile for writing, or nil if init failed.
- (nullable instancetype)initForWriting:(NSURL * _Nonnull)fileURL settings:(NSDictionary<NSString *, id> * _Nonnull)settings error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface AKAudioFile (SWIFT_EXTENSION(AudioKit))
@end


@interface AKAudioFile (SWIFT_EXTENSION(AudioKit))
@end


@interface AKAudioFile (SWIFT_EXTENSION(AudioKit))
@end

@class AKSampler;
@class AKMIDISampler;
@class AKAudioPlayer;

@interface AKAudioFile (SWIFT_EXTENSION(AudioKit))
/// Create an AKSampler loaded with the current AKAudioFile
@property (nonatomic, readonly, strong) AKSampler * _Nullable sampler;
/// Create an AKMIDISampler loaded with the current AKAudioFile
@property (nonatomic, readonly, strong) AKMIDISampler * _Nullable midiSampler;
/// Create an AKAudioPlayer to play the current AKAudioFile
@property (nonatomic, readonly, strong) AKAudioPlayer * _Nullable player;
@end


@interface AKAudioFile (SWIFT_EXTENSION(AudioKit))
/// Returns the remaining not completed queued Async processes (Int)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger queuedAsyncProcessCount;)
+ (NSInteger)queuedAsyncProcessCount SWIFT_WARN_UNUSED_RESULT;
/// Returns the total scheduled Async processes count (Int)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger scheduledAsyncProcessesCount;)
+ (NSInteger)scheduledAsyncProcessesCount SWIFT_WARN_UNUSED_RESULT;
/// Returns the completed Async processes count (Int)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger completedAsyncProcessesCount;)
+ (NSInteger)completedAsyncProcessesCount SWIFT_WARN_UNUSED_RESULT;
@end

@class AVAudioTime;

/// Not so simple audio playback class
SWIFT_CLASS("_TtC8AudioKit13AKAudioPlayer")
@interface AKAudioPlayer : AKNode
/// Buffer to be palyed
@property (nonatomic, strong) AVAudioPCMBuffer * _Nullable audioFileBuffer;
/// Will be triggered when AKAudioPlayer has finished to play.
/// (will not as long as loop is on)
@property (nonatomic, copy) void (^ _Nullable completionHandler)(void);
/// Boolean indicating whether or not to loop the playback (Default false)
@property (nonatomic) BOOL looping;
/// Boolean indicating to play the buffer in reverse
@property (nonatomic) BOOL reversed;
/// Fade in duration
@property (nonatomic) double fadeInTime;
/// Fade out duration
@property (nonatomic) double fadeOutTime;
/// The current played AKAudioFile
@property (nonatomic, readonly, strong) AKAudioFile * _Nonnull audioFile;
/// Path to the currently loaded AKAudioFile
@property (nonatomic, readonly, copy) NSString * _Nonnull path;
/// Total duration of one loop through of the file
@property (nonatomic, readonly) double duration;
/// Output Volume (Default 1)
@property (nonatomic) double volume;
/// Whether or not the audio player is currently started
@property (nonatomic, readonly) BOOL isStarted;
/// Current playback time (in seconds)
@property (nonatomic, readonly) double currentTime;
/// Time within the audio file at the current time
@property (nonatomic, readonly) double playhead;
/// Pan (Default Center = 0)
@property (nonatomic) double pan;
/// sets the start time, If it is playing, player will
/// restart playing from the start time each time end time is set
@property (nonatomic) double startTime;
/// sets the end time, If it is playing, player will
/// restart playing from the start time each time end time is set
@property (nonatomic) double endTime;
/// Sets the time in the future when playback will commence. Recommend using play(from:to:avTime) instead.
/// this will be deprecated
@property (nonatomic) double scheduledTime;
/// Sheduled time
@property (nonatomic, strong) AVAudioTime * _Nullable scheduledAVTime;
/// Initialize the audio player
/// Notice that completionCallBack will be triggered from a
/// background thread. Any UI update should be made using:
/// \code
/// Dispatch.main.async {
///    // UI updates...
/// }
///
/// \endcode\param file the AKAudioFile to play
///
/// \param looping will loop play if set to true, or stop when play ends, so it can trig the
/// completionHandler callback. Default is false (non looping)
///
/// \param completionHandler AKCallback that will be triggered when the player end playing (useful for refreshing
/// UI so we’re not playing anymore, we stopped playing…)
///
///
/// returns:
/// an AKAudioPlayer if init succeeds, or nil if init fails. If fails, errors may be caught.
- (nullable instancetype)initWithFile:(AKAudioFile * _Nonnull)file looping:(BOOL)looping error:(NSError * _Nullable * _Nullable)error completionHandler:(void (^ _Nullable)(void))completionHandler OBJC_DESIGNATED_INITIALIZER;
/// Start playback
- (void)start;
/// Stop playback
- (void)stop;
/// Pause playback
- (void)pause;
/// Restart playback from current position
- (void)resume;
/// resets in and out times for playing
- (BOOL)reloadFileAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Replace player’s file with a new AKAudioFile file
- (BOOL)replaceWithFile:(AKAudioFile * _Nonnull)file error:(NSError * _Nullable * _Nullable)error;
/// Default play that will use the previously set startTime and endTime properties or the full file if both are 0
- (void)play;
/// Play from startTime to endTime
- (void)playFrom:(double)startTime to:(double)endTime;
/// Play the file back from a certain time, to an end time (if set).
/// You can optionally set a scheduled time to play (in seconds).
/// \param from startTime Time into the file at which to start playing back
///
/// \param to endTime Time into the file at which to playing back will stop / Loop
///
/// \param when scheduledTime use this when scheduled playback doesn’t need to be in sync with other players
/// otherwise use the avTime signature.
///
- (void)playFrom:(double)startTime to:(double)endTime when:(double)scheduledTime;
/// Play the file back from a certain time, to an end time (if set). You can optionally set a scheduled time
/// to play (in seconds).
/// \param from startTime Time into the file at which to start playing back
///
/// \param to endTime Time into the file at which to playing back will stop / Loop
///
/// \param avTime an AVAudioTime object specifying when to schedule the playback. You can create this using the
/// helper function AKAudioPlayer.secondToAVAudioTime(hostTime:time). hostTime is a call to
/// mach_absolute_time(). When you have a group of players which you want to sync together it’s
/// important that this value be the same for all of them as a reference point.
///
- (void)playFrom:(double)time to:(double)endTime avTime:(AVAudioTime * _Nullable)avTime;
/// Convert to AVAudioTime
+ (AVAudioTime * _Nonnull)secondsToAVAudioTimeWithHostTime:(uint64_t)hostTime time:(double)time SWIFT_WARN_UNUSED_RESULT;
/// Stop playback after next loop completes
- (void)stopAtNextLoopEnd;
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// An automatic wah effect, ported from Guitarix via Faust.
SWIFT_CLASS("_TtC8AudioKit9AKAutoWah")
@interface AKAutoWah : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Wah Amount
@property (nonatomic) double wah;
/// Dry/Wet Mix
@property (nonatomic) double mix;
/// Overall level
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this autoWah node
/// \param input Input node to process
///
/// \param wah Wah Amount
///
/// \param mix Dry/Wet Mix
///
/// \param amplitude Overall level
///
- (nonnull instancetype)init:(AKNode * _Nullable)input wah:(double)wah mix:(double)mix amplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// This node outputs a version of the audio source, amplitude-modified so
/// that its rms power is equal to that of the comparator audio source. Thus a
/// signal that has suffered loss of power (eg., in passing through a filter
/// bank) can be restored by matching it with, for instance, its own source. It
/// should be noted that this modifies amplitude only; output signal is not
/// altered in any other respect.
SWIFT_CLASS("_TtC8AudioKit10AKBalancer")
@interface AKBalancer : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this balance node
/// \param input Input node to process
///
/// \param comparator Audio to match power with
///
- (nonnull instancetype)init:(AKNode * _Nullable)input comparator:(AKNode * _Nonnull)comparator OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// These filters are Butterworth second-order IIR filters. They offer an almost
/// flat passband and very good precision and stopband attenuation.
SWIFT_CLASS("_TtC8AudioKit27AKBandPassButterworthFilter")
@interface AKBandPassButterworthFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Center frequency. (in Hertz)
@property (nonatomic) double centerFrequency;
/// Bandwidth. (in Hertz)
@property (nonatomic) double bandwidth;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param centerFrequency Center frequency. (in Hertz)
///
/// \param bandwidth Bandwidth. (in Hertz)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input centerFrequency:(double)centerFrequency bandwidth:(double)bandwidth OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// These filters are Butterworth second-order IIR filters. They offer an almost
/// flat passband and very good precision and stopband attenuation.
SWIFT_CLASS("_TtC8AudioKit29AKBandRejectButterworthFilter")
@interface AKBandRejectButterworthFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Center frequency. (in Hertz)
@property (nonatomic) double centerFrequency;
/// Bandwidth. (in Hertz)
@property (nonatomic) double bandwidth;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param centerFrequency Center frequency. (in Hertz)
///
/// \param bandwidth Bandwidth. (in Hertz)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input centerFrequency:(double)centerFrequency bandwidth:(double)bandwidth OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// This will digitally degrade a signal.
SWIFT_CLASS("_TtC8AudioKit12AKBitCrusher")
@interface AKBitCrusher : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// The bit depth of signal output. Typically in range (1-24). Non-integer values are OK.
@property (nonatomic) double bitDepth;
/// The sample rate of signal output.
@property (nonatomic) double sampleRate;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this bitcrusher node
/// \param input Input node to process
///
/// \param bitDepth The bit depth of signal output. Typically in range (1-24). Non-integer values are OK.
///
/// \param sampleRate The sample rate of signal output.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input bitDepth:(double)bitDepth sampleRate:(double)sampleRate OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// A button that will pull up a Bluetooth MIDI menu
SWIFT_CLASS("_TtC8AudioKit21AKBluetoothMIDIButton")
@interface AKBluetoothMIDIButton : UIButton
/// Handle touches
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Stereo Booster
SWIFT_CLASS("_TtC8AudioKit9AKBooster")
@interface AKBooster : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Amplification Factor
@property (nonatomic) double gain;
/// Left Channel Amplification Factor
@property (nonatomic) double leftGain;
/// Right Channel Amplification Factor
@property (nonatomic) double rightGain;
/// Amplification Factor in db
@property (nonatomic) double dB;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this booster node
/// \param input AKNode whose output will be amplified
///
/// \param gain Amplification factor (Default: 1, Minimum: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input gain:(double)gain OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Faust-based pink noise generator
SWIFT_CLASS("_TtC8AudioKit15AKBrownianNoise")
@interface AKBrownianNoise : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Amplitude. (Value between 0-1).
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this noise node
/// \param amplitude Amplitude. (Value between 0-1).
///
- (nonnull instancetype)initWithAmplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// A button, mainly used for playgrounds, but could be useful in your own projects
SWIFT_CLASS("_TtC8AudioKit8AKButton")
@interface AKButton : UIView
/// Text to display on the button
@property (nonatomic, copy) NSString * _Nonnull title;
/// Background color of the button
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Handle new touches
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Initialize the button
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title color:(UIColor * _Nonnull)color frame:(CGRect)frame callback:(NSString * _Nonnull (^ _Nonnull)(void))callback OBJC_DESIGNATED_INITIALIZER;
/// Initialize the button within Interface Builder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Draw the button
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Button that just access the start/stop feature of an AKNode,
/// primarily used for playgrounds, but potentially useful in your own code.
SWIFT_CLASS("_TtC8AudioKit14AKBypassButton")
@interface AKBypassButton : UIView
/// Hanldes new touches
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Required initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Draw the button
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class AKTuningTable;

/// Bare bones implementation of AKPolyphonic protocol
SWIFT_CLASS("_TtC8AudioKit16AKPolyphonicNode")
@interface AKPolyphonicNode : AKNode
/// Global tuning table used by AKPolyphonicNode (AKNode classes adopting AKPolyphonic protocol)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AKTuningTable * _Nonnull tuningTable;)
+ (AKTuningTable * _Nonnull)tuningTable SWIFT_WARN_UNUSED_RESULT;
+ (void)setTuningTable:(AKTuningTable * _Nonnull)value;
/// Play a sound corresponding to a MIDI note with frequency
/// \param noteNumber MIDI Note Number
///
/// \param velocity MIDI Velocity
///
/// \param frequency Play this frequency
///
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(double)frequency;
/// Play a sound corresponding to a MIDI note
/// \param noteNumber MIDI Note Number
///
/// \param velocity MIDI Velocity
///
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity;
/// Stop a sound corresponding to a MIDI note
/// \param noteNumber MIDI Note Number
///
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach OBJC_DESIGNATED_INITIALIZER;
@end


/// A version of AKInstrument specifically targeted to instruments that
/// should be triggerable via MIDI or sequenced with the sequencer.
SWIFT_CLASS("_TtC8AudioKit16AKMIDIInstrument")
@interface AKMIDIInstrument : AKPolyphonicNode
/// MIDI Input
@property (nonatomic) MIDIEndpointRef midiIn;
/// Name of the instrument
@property (nonatomic, copy) NSString * _Nonnull name;
/// Enable MIDI input from a given MIDI client
/// This is not in the init function because it must be called AFTER you start audiokit
/// \param midiClient A refernce to the midi client
///
/// \param name Name to connect with
///
- (void)enableMIDI:(MIDIClientRef)midiClient name:(NSString * _Nonnull)name;
/// Handle MIDI commands that come in externally
/// \param noteNumber MIDI Note number
///
/// \param velocity MIDI velocity
///
/// \param channel MIDI channel
///
- (void)receivedMIDINoteOn:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Handle MIDI commands that come in externally
/// \param noteNumber MIDI Note number
///
/// \param velocity MIDI velocity
///
/// \param channel MIDI channel
///
- (void)receivedMIDINoteOffWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Start a note
/// \param noteNumber Note number to play
///
/// \param velocity Velocity at which to play the note (0 - 127)
///
/// \param channel Channel on which to play the note
///
- (void)startWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Stop a note
/// \param noteNumber Note number to stop
///
/// \param channel Channel on which to stop the note
///
- (void)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach OBJC_DESIGNATED_INITIALIZER;
@end


/// MIDI Instrument that triggers functions on MIDI note on/off commands
SWIFT_CLASS("_TtC8AudioKit20AKCallbackInstrument")
@interface AKCallbackInstrument : AKMIDIInstrument
/// Will trigger in response to any noteOn Message
/// \param noteNumber MIDI Note Number being started
///
/// \param velocity MIDI Velocity (0-127)
///
/// \param channel MIDI Channel
///
- (void)startWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Will trigger in response to any noteOff Message
/// \param noteNumber MIDI Note Number being stopped
///
/// \param velocity MIDI Velocity (0-127)
///
/// \param channel MIDI Channel
///
- (void)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// This is was built using the JC reverb implentation found in FAUST. According
/// to the source code, the specifications for this implementation were found on
/// an old SAIL DART backup tape.
/// This class is derived from the CLM JCRev function, which is based on the use
/// of networks of simple allpass and comb delay filters.  This class implements
/// three series allpass units, followed by four parallel comb filters, and two
/// decorrelation delay lines in parallel at the output.
SWIFT_CLASS("_TtC8AudioKit16AKChowningReverb")
@interface AKChowningReverb : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this reverb node
/// \param input Input node to process
///
- (nonnull instancetype)init:(AKNode * _Nullable)input OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// STK Clarinet
SWIFT_CLASS("_TtC8AudioKit10AKClarinet")
@interface AKClarinet : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
@property (nonatomic) double frequency;
/// Amplitude
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the mandolin with defaults
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Initialize the STK Clarinet model
/// \param frequency Variable frequency. Values less than the initial frequency will be doubled until it is
/// greater than that.
///
/// \param amplitude Amplitude
///
- (nonnull instancetype)initWithFrequency:(double)frequency amplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/// Trigger the sound with an optional set of parameters
/// <ul>
///   <li>
///     frequency: Frequency in Hz
///   </li>
///   <li>
///     amplitude amplitude: Volume
///   </li>
/// </ul>
- (void)triggerWithFrequency:(double)frequency amplitude:(double)amplitude;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Clips a signal to a predefined limit, in a “soft” manner, using one of three
/// methods.
SWIFT_CLASS("_TtC8AudioKit9AKClipper")
@interface AKClipper : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Threshold / limiting value.
@property (nonatomic) double limit;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this clipper node
/// \param input Input node to process
///
/// \param limit Threshold / limiting value.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input limit:(double)limit OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// This filter reiterates input with an echo density determined by
/// loopDuration. The attenuation rate is independent and is determined by
/// reverbDuration, the reverberation duration (defined as the time in seconds
/// for a signal to decay to 1/1000, or 60dB down from its original amplitude).
/// Output from a comb filter will appear only after loopDuration seconds.
SWIFT_CLASS("_TtC8AudioKit18AKCombFilterReverb")
@interface AKCombFilterReverb : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// The time in seconds for a signal to decay to 1/1000, or 60dB from its original amplitude. (aka RT-60).
@property (nonatomic) double reverbDuration;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param reverbDuration The time in seconds for a signal to decay to 1/1000, or 60dB from its
/// original amplitude. (aka RT-60).
///
/// \param loopDuration The loop time of the filter, in seconds. This can also be thought of as the delay time.
/// Determines frequency response curve, loopDuration * sr/2 peaks spaced evenly between 0 and sr/2.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input reverbDuration:(double)reverbDuration loopDuration:(double)loopDuration OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit Compressor based on Apple’s DynamicsProcessor Audio Unit
SWIFT_CLASS("_TtC8AudioKit12AKCompressor")
@interface AKCompressor : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Threshold (dB) ranges from -40 to 20 (Default: -20)
@property (nonatomic) double threshold;
/// Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
@property (nonatomic) double headRoom;
/// Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
@property (nonatomic) double attackTime;
/// Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
@property (nonatomic) double releaseTime;
/// Compression Amount (dB) read only
@property (nonatomic, readonly) double compressionAmount;
/// Input Amplitude (dB) read only
@property (nonatomic, readonly) double inputAmplitude;
/// Output Amplitude (dB) read only
@property (nonatomic, readonly) double outputAmplitude;
/// Master Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double masterGain;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the dynamics processor node
/// \param input Input node to process
///
/// \param threshold Threshold (dB) ranges from -40 to 20 (Default: -20)
///
/// \param headRoom Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
///
/// \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
///
/// \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
///
/// \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input threshold:(double)threshold headRoom:(double)headRoom attackTime:(double)attackTime releaseTime:(double)releaseTime masterGain:(double)masterGain OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// This module will perform partitioned convolution on an input signal using an
/// audio file as an impulse response.
SWIFT_CLASS("_TtC8AudioKit13AKConvolution")
@interface AKConvolution : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this convolution node
/// \param input Input node to process
///
/// \param impulseResponseFileURL Location of the imulseResponse audio File
///
/// \param partitionLength Partition length (in samples). Must be a power of 2. Lower values will add less latency,
/// at the cost of requiring more CPU power.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input impulseResponseFileURL:(NSURL * _Nonnull)impulseResponseFileURL partitionLength:(NSInteger)partitionLength OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// 8 delay line stereo FDN reverb, with feedback matrix based upon physical
/// modeling scattering junction of 8 lossless waveguides of equal
/// characteristic impedance.
SWIFT_CLASS("_TtC8AudioKit16AKCostelloReverb")
@interface AKCostelloReverb : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Feedback level in the range 0 to 1. 0.6 gives a good small ‘live’ room sound, 0.8 a small hall, and 0.9 a
/// large hall. A setting of exactly 1 means infinite length, while higher values will make the opcode unstable.
@property (nonatomic) double feedback;
/// Low-pass cutoff frequency.
@property (nonatomic) double cutoffFrequency;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this reverb node
/// \param input Input node to process
///
/// \param feedback Feedback level in the range 0 to 1. 0.6 gives a good small ‘live’ room sound, 0.8 a small hall,
/// and 0.9 a large hall. A setting of exactly 1 means infinite length, while higher values will
/// make the opcode unstable.
///
/// \param cutoffFrequency Low-pass cutoff frequency.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input feedback:(double)feedback cutoffFrequency:(double)cutoffFrequency OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


@interface AKCostelloReverb (SWIFT_EXTENSION(AudioKit))
/// Short Tail Reverb
- (void)presetShortTailCostelloReverb;
/// Low Ringing Long Tail Reverb
- (void)presetLowRingingLongTailCostelloReverb;
/// Print out current values in case you want to save it as a preset
- (void)printCurrentValuesAsPreset;
@end

@class AKSporthStack;

/// Custom Sporth Unit Generator (Ugen)
SWIFT_CLASS("_TtC8AudioKit12AKCustomUgen")
@interface AKCustomUgen : NSObject
/// Name of the Ugen
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// String describing the arugments: f for float / s for string, e.g. “fsf”
@property (nonatomic, readonly, copy) NSString * _Nonnull argTypes;
/// Custom object that may be passed in
@property (nonatomic) id _Nullable userData;
/// The sporth stack
@property (nonatomic, strong) AKSporthStack * _Nonnull stack;
/// Duplicate the Ugen
- (AKCustomUgen * _Nonnull)duplicate SWIFT_WARN_UNUSED_RESULT;
/// Executre the compute function
@property (nonatomic, readonly) void (* _Nonnull callComputeFunction)(AKCustomUgen * _Nonnull);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Implements the DC blocking filter Y[i] = X[i] - X[i-1] + (igain * Y[i-1])
/// Based on work by Perry Cook.
SWIFT_CLASS("_TtC8AudioKit9AKDCBlock")
@interface AKDCBlock : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
- (nonnull instancetype)init:(AKNode * _Nullable)input OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s Decimator from the Distortion Audio Unit
SWIFT_CLASS("_TtC8AudioKit11AKDecimator")
@interface AKDecimator : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double decimation;
/// Rounding (Normalized Value) ranges from 0 to 1 (Default: 0)
@property (nonatomic) double rounding;
/// Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
@property (nonatomic) double mix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the decimator node
/// \param input Input node to process
///
/// \param decimation Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param rounding Rounding (Normalized Value) ranges from 0 to 1 (Default: 0)
///
/// \param mix Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input decimation:(double)decimation rounding:(double)rounding mix:(double)mix OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s Delay Audio Unit
SWIFT_CLASS("_TtC8AudioKit7AKDelay")
@interface AKDelay : AKNode
/// Delay time in seconds (Default: 1)
@property (nonatomic) NSTimeInterval time;
/// Feedback (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double feedback;
/// Low pass cut-off frequency in Hertz (Default: 15000)
@property (nonatomic) double lowPassCutoff;
/// Dry/Wet Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the delay node
/// \param input Input audio AKNode to process
///
/// \param time Delay time in seconds (Default: 1)
///
/// \param feedback Amount of feedback, ranges from 0 to 1 (Default: 0.5)
///
/// \param lowPassCutoff Low-pass cutoff frequency in Hz (Default 15000)
///
/// \param dryWetMix Amount of unprocessed (dry) to delayed (wet) audio, ranges from 0 to 1 (Default: 0.5)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input time:(double)time feedback:(double)feedback lowPassCutoff:(double)lowPassCutoff dryWetMix:(double)dryWetMix OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


@interface AKDelay (SWIFT_EXTENSION(AudioKit))
/// Short Delay
- (void)presetShortDelay;
/// Long, dense delay
- (void)presetDenseLongDelay;
/// Electrical Circuits, Robotic Delay Effect
- (void)presetElectricCircuitsDelay;
/// Print out current values in case you want to save it as a preset
- (void)printCurrentValuesAsPreset;
@end


/// Wrapper for audio device selection
SWIFT_CLASS("_TtC8AudioKit8AKDevice")
@interface AKDevice : NSObject
/// The human-readable name for the device.
@property (nonatomic, copy) NSString * _Nonnull name;
/// The device identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceID;
/// Initialize the device
/// \param name The human-readable name for the device.
///
/// \param deviceID The device identifier.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name deviceID:(NSString * _Nonnull)deviceID dataSource:(NSString * _Nonnull)dataSource OBJC_DESIGNATED_INITIALIZER;
/// Printable device description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s Distortion Audio Unit
SWIFT_CLASS("_TtC8AudioKit12AKDistortion")
@interface AKDistortion : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Delay (Milliseconds) ranges from 0.1 to 500 (Default: 0.1)
@property (nonatomic) double delay;
/// Decay (Rate) ranges from 0.1 to 50 (Default: 1.0)
@property (nonatomic) double decay;
/// Delay Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double delayMix;
/// Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double decimation;
/// Rounding (Normalized Value) ranges from 0 to 1 (Default: 0.0)
@property (nonatomic) double rounding;
/// Decimation Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double decimationMix;
/// Linear Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double linearTerm;
/// Squared Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double squaredTerm;
/// Cubic Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double cubicTerm;
/// Polynomial Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double polynomialMix;
/// Ring Mod Freq1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) double ringModFreq1;
/// Ring Mod Freq2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) double ringModFreq2;
/// Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double ringModBalance;
/// Ring Mod Mix (Normalized Value) ranges from 0 to 1 (Default: 0.0)
@property (nonatomic) double ringModMix;
/// Soft Clip Gain (dB) ranges from -80 to 20 (Default: -6)
@property (nonatomic) double softClipGain;
/// Final Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double finalMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the distortion node
/// \param input Input node to process
///
/// \param delay Delay (Milliseconds) ranges from 0.1 to 500 (Default: 0.1)
///
/// \param decay Decay (Rate) ranges from 0.1 to 50 (Default: 1.0)
///
/// \param delayMix Delay Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param decimation Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param rounding Rounding (Normalized Value) ranges from 0 to 1 (Default: 0.0)
///
/// \param decimationMix Decimation Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param linearTerm Linear Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param squaredTerm Squared Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param cubicTerm Cubic Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param polynomialMix Polynomial Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param ringModFreq1 Ring Mod Freq1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param ringModFreq2 Ring Mod Freq2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param ringModBalance Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param ringModMix Ring Mod Mix (Normalized Value) ranges from 0 to 1 (Default: 0.0)
///
/// \param softClipGain Soft Clip Gain (dB) ranges from -80 to 20 (Default: -6)
///
/// \param finalMix Final Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input delay:(double)delay decay:(double)decay delayMix:(double)delayMix decimation:(double)decimation rounding:(double)rounding decimationMix:(double)decimationMix linearTerm:(double)linearTerm squaredTerm:(double)squaredTerm cubicTerm:(double)cubicTerm polynomialMix:(double)polynomialMix ringModFreq1:(double)ringModFreq1 ringModFreq2:(double)ringModFreq2 ringModBalance:(double)ringModBalance ringModMix:(double)ringModMix softClipGain:(double)softClipGain finalMix:(double)finalMix OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


@interface AKDistortion (SWIFT_EXTENSION(AudioKit))
/// Massive Distortion
- (void)presetInfiniteDistortionWall;
/// Print out current values in case you want to save it as a preset
- (void)printCurrentValuesAsPreset;
@end


/// Physical model of the sound of dripping water. When triggered, it will
/// produce a droplet of water.
SWIFT_CLASS("_TtC8AudioKit6AKDrip")
@interface AKDrip : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// The intensity of the dripping sound.
@property (nonatomic) double intensity;
/// The damping factor. Maximum value is 2.0.
@property (nonatomic) double dampingFactor;
/// The amount of energy to add back into the system.
@property (nonatomic) double energyReturn;
/// Main resonant frequency.
@property (nonatomic) double mainResonantFrequency;
/// The first resonant frequency.
@property (nonatomic) double firstResonantFrequency;
/// The second resonant frequency.
@property (nonatomic) double secondResonantFrequency;
/// Amplitude.
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the drip with defaults
- (nonnull instancetype)init;
/// Initialize this drip node
/// \param intensity The intensity of the dripping sound.
///
/// \param dampingFactor The damping factor. Maximum value is 2.0.
///
/// \param energyReturn The amount of energy to add back into the system.
///
/// \param mainResonantFrequency Main resonant frequency.
///
/// \param firstResonantFrequency The first resonant frequency.
///
/// \param secondResonantFrequency The second resonant frequency.
///
/// \param amplitude Amplitude.
///
- (nonnull instancetype)initWithIntensity:(double)intensity dampingFactor:(double)dampingFactor energyReturn:(double)energyReturn mainResonantFrequency:(double)mainResonantFrequency firstResonantFrequency:(double)firstResonantFrequency secondResonantFrequency:(double)secondResonantFrequency amplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/// Trigger the sound with an optional set of parameters
- (void)trigger;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Balanceable Mix between two signals, usually used for a dry signal and wet signal
SWIFT_CLASS("_TtC8AudioKit13AKDryWetMixer")
@interface AKDryWetMixer : AKNode
/// Balance (Default 0.5)
@property (nonatomic) double balance;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize this dry wet mixer node
/// \param dry Dry Input (or just input 1)
///
/// \param wet Wet Input (or just input 2)
///
/// \param balance Balance Point (0 = all dry, 1 = all wet)
///
- (nonnull instancetype)init:(AKNode * _Nullable)dry :(AKNode * _Nullable)wet balance:(double)balance OBJC_DESIGNATED_INITIALIZER;
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Dynamic range compressor from Faust
SWIFT_CLASS("_TtC8AudioKit24AKDynamicRangeCompressor")
@interface AKDynamicRangeCompressor : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Ratio to compress with, a value > 1 will compress
@property (nonatomic) double ratio;
/// Threshold (in dB) 0 = max
@property (nonatomic) double threshold;
/// Attack time
@property (nonatomic) double attackTime;
/// Release time
@property (nonatomic) double releaseTime;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this compressor node
/// \param input Input node to process
///
/// \param ratio Ratio to compress with, a value > 1 will compress
///
/// \param threshold Threshold (in dB) 0 = max
///
/// \param attackTime Attack time
///
/// \param releaseTime Release time
///
- (nonnull instancetype)init:(AKNode * _Nullable)input ratio:(double)ratio threshold:(double)threshold attackTime:(double)attackTime releaseTime:(double)releaseTime OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s DynamicsProcessor Audio Unit
SWIFT_CLASS("_TtC8AudioKit19AKDynamicsProcessor")
@interface AKDynamicsProcessor : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Threshold (dB) ranges from -40 to 20 (Default: -20)
@property (nonatomic) double threshold;
/// Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
@property (nonatomic) double headRoom;
/// Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) double expansionRatio;
/// Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) double expansionThreshold;
/// Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
@property (nonatomic) double attackTime;
/// Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
@property (nonatomic) double releaseTime;
/// Master Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double masterGain;
/// Compression Amount (dB) read only
@property (nonatomic, readonly) double compressionAmount;
/// Input Amplitude (dB) read only
@property (nonatomic, readonly) double inputAmplitude;
/// Output Amplitude (dB) read only
@property (nonatomic, readonly) double outputAmplitude;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the dynamics processor node
/// \param input Input node to process
///
/// \param threshold Threshold (dB) ranges from -40 to 20 (Default: -20)
///
/// \param headRoom Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
///
/// \param expansionRatio Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param expansionThreshold Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
///
/// \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
///
/// \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)
///
/// \param compressionAmount Compression Amount (dB) ranges from -40 to 40 (Default: 0)
///
/// \param inputAmplitude Input Amplitude (dB) ranges from -40 to 40 (Default: 0)
///
/// \param outputAmplitude Output Amplitude (dB) ranges from -40 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input threshold:(double)threshold headRoom:(double)headRoom expansionRatio:(double)expansionRatio expansionThreshold:(double)expansionThreshold attackTime:(double)attackTime releaseTime:(double)releaseTime masterGain:(double)masterGain compressionAmount:(double)compressionAmount inputAmplitude:(double)inputAmplitude outputAmplitude:(double)outputAmplitude OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// A 2nd order tunable equalization filter that provides a peak/notch filter
/// for building parametric/graphic equalizers. With gain above 1, there will be
/// a peak at the center frequency with a width dependent on bandwidth. If gain
/// is less than 1, a notch is formed around the center frequency.
SWIFT_CLASS("_TtC8AudioKit17AKEqualizerFilter")
@interface AKEqualizerFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Center frequency. (in Hertz)
@property (nonatomic) double centerFrequency;
/// The peak/notch bandwidth in Hertz
@property (nonatomic) double bandwidth;
/// The peak/notch gain
@property (nonatomic) double gain;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param centerFrequency Center frequency in Hertz
///
/// \param bandwidth The peak/notch bandwidth in Hertz
///
/// \param gain The peak/notch gain
///
- (nonnull instancetype)init:(AKNode * _Nullable)input centerFrequency:(double)centerFrequency bandwidth:(double)bandwidth gain:(double)gain OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit Expander based on Apple’s DynamicsProcessor Audio Unit
SWIFT_CLASS("_TtC8AudioKit10AKExpander")
@interface AKExpander : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) double expansionRatio;
/// Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) double expansionThreshold;
/// Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
@property (nonatomic) double attackTime;
/// Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
@property (nonatomic) double releaseTime;
/// Master Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double masterGain;
/// Compression Amount (dB) read only
@property (nonatomic, readonly) double compressionAmount;
/// Input Amplitude (dB) read only
@property (nonatomic, readonly) double inputAmplitude;
/// Output Amplitude (dB) read only
@property (nonatomic, readonly) double outputAmplitude;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the dynamics processor node
/// \param input Input node to process
///
/// \param expansionRatio Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param expansionThreshold Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
///
/// \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
///
/// \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input threshold:(double)threshold headRoom:(double)headRoom expansionRatio:(double)expansionRatio expansionThreshold:(double)expansionThreshold attackTime:(double)attackTime releaseTime:(double)releaseTime masterGain:(double)masterGain compressionAmount:(double)compressionAmount inputAmplitude:(double)inputAmplitude outputAmplitude:(double)outputAmplitude OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end

@class EZAudioFFT;

/// FFT Calculation for any node
SWIFT_CLASS("_TtC8AudioKit8AKFFTTap")
@interface AKFFTTap : NSObject <EZAudioFFTDelegate>
/// Array of FFT data
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull fftData;
/// Initialze the FFT calculation on a given node
/// \param input Node on whose output the FFT will be computed
///
- (nonnull instancetype)init:(AKNode * _Nonnull)input OBJC_DESIGNATED_INITIALIZER;
/// Callback function for FFT computation
- (void)fft:(EZAudioFFT * _Null_unspecified)fft updatedWithFFTData:(float * _Nonnull)fftData bufferSize:(vDSP_Length)bufferSize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Classic FM Synthesis audio generation.
SWIFT_CLASS("_TtC8AudioKit14AKFMOscillator")
@interface AKFMOscillator : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// In cycles per second, or Hz, this is the common denominator for the carrier and modulating frequencies.
@property (nonatomic) double baseFrequency;
/// This multiplied by the baseFrequency gives the carrier frequency.
@property (nonatomic) double carrierMultiplier;
/// This multiplied by the baseFrequency gives the modulating frequency.
@property (nonatomic) double modulatingMultiplier;
/// This multiplied by the modulating frequency gives the modulation amplitude.
@property (nonatomic) double modulationIndex;
/// Output Amplitude.
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


@interface AKFMOscillator (SWIFT_EXTENSION(AudioKit))
/// Stun Ray Preset
- (void)presetStunRay;
/// Fog Horn Preset
- (void)presetFogHorn;
/// Buzzer Preset
- (void)presetBuzzer;
/// Spiral Preset
- (void)presetSpiral;
/// Wobble Preset
- (void)presetWobble;
@end


/// Frequency Modulation Polyphonic Oscillator
SWIFT_CLASS("_TtC8AudioKit18AKFMOscillatorBank")
@interface AKFMOscillatorBank : AKPolyphonicNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// This multiplied by the baseFrequency gives the carrier frequency.
@property (nonatomic) double carrierMultiplier;
/// This multiplied by the baseFrequency gives the modulating frequency.
@property (nonatomic) double modulatingMultiplier;
/// This multiplied by the modulating frequency gives the modulation amplitude.
@property (nonatomic) double modulationIndex;
/// Attack time
@property (nonatomic) double attackDuration;
/// Decay time
@property (nonatomic) double decayDuration;
/// Sustain Level
@property (nonatomic) double sustainLevel;
/// Release time
@property (nonatomic) double releaseDuration;
/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;
/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(double)frequency;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// This filter reiterates the input with an echo density determined by loop
/// time. The attenuation rate is independent and is determined by the
/// reverberation time (defined as the time in seconds for a signal to decay to
/// 1/1000, or 60dB down from its original amplitude).  Output will begin to
/// appear immediately.
SWIFT_CLASS("_TtC8AudioKit29AKFlatFrequencyResponseReverb")
@interface AKFlatFrequencyResponseReverb : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// The duration in seconds for a signal to decay to 1/1000, or 60dB down from its original amplitude.
@property (nonatomic) double reverbDuration;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this reverb node
/// \param input Input node to process
///
/// \param reverbDuration The duration in seconds for a signal to decay to 1/1000,
/// or 60dB down from its original amplitude.
///
/// \param loopDuration The loop duration of the filter, in seconds. This can also be thought of as the
/// delay time or “echo density” of the reverberation.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input reverbDuration:(double)reverbDuration loopDuration:(double)loopDuration OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// STK Flutee
SWIFT_CLASS("_TtC8AudioKit7AKFlute")
@interface AKFlute : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
@property (nonatomic) double frequency;
/// Amplitude
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the mandolin with defaults
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Initialize the STK Flute model
/// \param frequency Variable frequency. Values less than the initial frequency will be doubled until it is
/// greater than that.
///
/// \param amplitude Amplitude
///
- (nonnull instancetype)initWithFrequency:(double)frequency amplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/// Trigger the sound with an optional set of parameters
/// <ul>
///   <li>
///     frequency: Frequency in Hz
///   </li>
///   <li>
///     amplitude amplitude: Volume
///   </li>
/// </ul>
- (void)triggerWithFrequency:(double)frequency amplitude:(double)amplitude;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// When fed with a pulse train, it will generate a series of overlapping
/// grains. Overlapping will occur when 1/freq < dec, but there is no upper
/// limit on the number of overlaps.
SWIFT_CLASS("_TtC8AudioKit15AKFormantFilter")
@interface AKFormantFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Center frequency.
@property (nonatomic) double x;
/// Impulse response attack time (in seconds).
@property (nonatomic) double y;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param centerFrequency Center frequency.
///
/// \param attackDuration Impulse response attack time (in seconds).
///
/// \param decayDuration Impulse reponse decay time (in seconds)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input x:(double)x y:(double)y OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// This is based on an algorithm originally created by Miller Puckette.
SWIFT_CLASS("_TtC8AudioKit18AKFrequencyTracker")
@interface AKFrequencyTracker : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Detected Amplitude (Use AKAmplitude tracker if you don’t need frequency)
@property (nonatomic, readonly) double amplitude;
/// Detected frequency
@property (nonatomic, readonly) double frequency;
/// Initialize this Pitch-tracker node
/// \param input Input node to process
///
/// \param hopSize Hop size.
///
/// \param peakCount Number of peaks.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input hopSize:(double)hopSize peakCount:(double)peakCount OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// These filters are Butterworth second-order IIR filters. They offer an almost
/// flat passband and very good precision and stopband attenuation.
SWIFT_CLASS("_TtC8AudioKit27AKHighPassButterworthFilter")
@interface AKHighPassButterworthFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Cutoff frequency. (in Hertz)
@property (nonatomic) double cutoffFrequency;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff frequency. (in Hertz)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cutoffFrequency:(double)cutoffFrequency OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s HighPassFilter Audio Unit
SWIFT_CLASS("_TtC8AudioKit16AKHighPassFilter")
@interface AKHighPassFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
@property (nonatomic) double cutoffFrequency;
/// Resonance (dB) ranges from -20 to 40 (Default: 0)
@property (nonatomic) double resonance;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the high pass filter node
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
///
/// \param resonance Resonance (dB) ranges from -20 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s HighShelfFilter Audio Unit
SWIFT_CLASS("_TtC8AudioKit17AKHighShelfFilter")
@interface AKHighShelfFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Cut Off Frequency (Hz) ranges from 10000 to 22050 (Default: 10000)
@property (nonatomic) double cutoffFrequency;
/// Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double gain;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the high shelf filter node
/// \param input Input node to process
///
/// \param cutOffFrequency Cut Off Frequency (Hz) ranges from 10000 to 22050 (Default: 10000)
///
/// \param gain Gain (dB) ranges from -40 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cutOffFrequency:(double)cutOffFrequency gain:(double)gain OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// This is an implementation of Zoelzer’s parametric equalizer filter.
SWIFT_CLASS("_TtC8AudioKit36AKHighShelfParametricEqualizerFilter")
@interface AKHighShelfParametricEqualizerFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Corner frequency.
@property (nonatomic) double centerFrequency;
/// Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.
@property (nonatomic) double gain;
/// Q of the filter. sqrt(0.5) is no resonance.
@property (nonatomic) double q;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this equalizer node
/// \param input Input node to process
///
/// \param centerFrequency Corner frequency.
///
/// \param gain Amount the corner frequency value shall be increased or decreased. A value of 1 is a flat response.
///
/// \param q Q of the filter. sqrt(0.5) is no resonance.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input centerFrequency:(double)centerFrequency gain:(double)gain q:(double)q OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Clickable keyboard mainly used for AudioKit playgrounds
SWIFT_CLASS("_TtC8AudioKit14AKKeyboardView")
@interface AKKeyboardView : UIView
/// Number of octaves displayed at once
@property (nonatomic) NSInteger octaveCount;
/// Lowest octave dispayed
@property (nonatomic) NSInteger firstOctave;
/// Relative measure of the height of the black keys
@property (nonatomic) CGFloat topKeyHeightRatio;
/// Color of the polyphonic toggle button
@property (nonatomic, strong) UIColor * _Nonnull polyphonicButton;
/// White key color
@property (nonatomic, strong) UIColor * _Nonnull whiteKeyOff;
/// Black key color
@property (nonatomic, strong) UIColor * _Nonnull blackKeyOff;
/// Activated key color
@property (nonatomic, strong) UIColor * _Nonnull keyOnColor;
/// Allows multiple notes to play concurrently
@property (nonatomic) BOOL polyphonicMode;
/// Initialize the keyboard with default info
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initialize the keyboard
- (nonnull instancetype)initWithWidth:(NSInteger)width height:(NSInteger)height firstOctave:(NSInteger)firstOctave octaveCount:(NSInteger)octaveCount polyphonic:(BOOL)polyphonic OBJC_DESIGNATED_INITIALIZER;
/// Initialization within Interface Builder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set up the view for rendering in Interface Builder
- (void)prepareForInterfaceBuilder;
/// Keyboard view size
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Require constraints
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL requiresConstraintBasedLayout;)
+ (BOOL)requiresConstraintBasedLayout SWIFT_WARN_UNUSED_RESULT;
/// Draw the view
- (void)drawRect:(CGRect)rect;
/// Handle new touches
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Handle touches completed
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Handle moved touches
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Handle stopped touches
- (void)touchesCancelled:(NSSet<UITouch *> * _Nullable)touches withEvent:(UIEvent * _Nullable)event;
@end


/// Analog model of the Korg 35 Lowpass Filter
SWIFT_CLASS("_TtC8AudioKit19AKKorgLowPassFilter")
@interface AKKorgLowPassFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Filter cutoff
@property (nonatomic) double cutoffFrequency;
/// Filter resonance (should be between 0-2)
@property (nonatomic) double resonance;
/// Filter saturation.
@property (nonatomic) double saturation;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param cutoffFrequency Filter cutoff
///
/// \param resonance Filter resonance (should be between 0-2)
///
/// \param saturation Filter saturation.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance saturation:(double)saturation OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// These filters are Butterworth second-order IIR filters. They offer an almost
/// flat passband and very good precision and stopband attenuation.
SWIFT_CLASS("_TtC8AudioKit26AKLowPassButterworthFilter")
@interface AKLowPassButterworthFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Cutoff frequency. (in Hertz)
@property (nonatomic) double cutoffFrequency;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff frequency. (in Hertz)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cutoffFrequency:(double)cutoffFrequency OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s LowPassFilter Audio Unit
SWIFT_CLASS("_TtC8AudioKit15AKLowPassFilter")
@interface AKLowPassFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
@property (nonatomic) double cutoffFrequency;
/// Resonance (dB) ranges from -20 to 40 (Default: 0)
@property (nonatomic) double resonance;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the low pass filter node
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
///
/// \param resonance Resonance (dB) ranges from -20 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s LowShelfFilter Audio Unit
SWIFT_CLASS("_TtC8AudioKit16AKLowShelfFilter")
@interface AKLowShelfFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Cutoff Frequency (Hz) ranges from 10 to 200 (Default: 80)
@property (nonatomic) double cutoffFrequency;
/// Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double gain;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the low shelf filter node
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 200 (Default: 80)
///
/// \param gain Gain (dB) ranges from -40 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cutoffFrequency:(double)cutoffFrequency gain:(double)gain OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// This is an implementation of Zoelzer’s parametric equalizer filter.
SWIFT_CLASS("_TtC8AudioKit35AKLowShelfParametricEqualizerFilter")
@interface AKLowShelfParametricEqualizerFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Corner frequency.
@property (nonatomic) double cornerFrequency;
/// Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.
@property (nonatomic) double gain;
/// Q of the filter. sqrt(0.5) is no resonance.
@property (nonatomic) double q;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this equalizer node
/// \param input Input node to process
///
/// \param cornerFrequency Corner frequency.
///
/// \param gain Amount at which the corner frequency value shall be increased or decreased.
/// A value of 1 is a flat response.
///
/// \param q Q of the filter. sqrt(0.5) is no resonance.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cornerFrequency:(double)cornerFrequency gain:(double)gain q:(double)q OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end



/// A version of AKInstrument specifically targeted to instruments that
/// should be triggerable via MIDI or sequenced with the sequencer.
SWIFT_CLASS("_TtC8AudioKit10AKMIDINode")
@interface AKMIDINode : AKNode
/// MIDI Input
@property (nonatomic) MIDIEndpointRef midiIn;
/// Name of the instrument
@property (nonatomic, copy) NSString * _Nonnull name;
/// Initialize the MIDI node
/// \param node A polyphonic node that will be triggered via MIDI
///
- (nonnull instancetype)initWithNode:(AKPolyphonicNode * _Nonnull)node OBJC_DESIGNATED_INITIALIZER;
/// Enable MIDI input from a given MIDI client
/// This is not in the init function because it must be called AFTER you start audiokit
/// \param midiClient A refernce to the midi client
///
/// \param name Name to connect with
///
- (void)enableMIDI:(MIDIClientRef)midiClient name:(NSString * _Nonnull)name;
/// Handle MIDI commands that come in externally
/// \param noteNumber MIDI Note number
///
/// \param velocity MIDI velocity
///
/// \param channel MIDI channel
///
- (void)receivedMIDINoteOn:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end

@class AVAudioUnitSampler;

/// Sampler audio generation.
/// <ol>
///   <li>
///     init the audio unit like this: var sampler = AKSampler()
///   </li>
///   <li>
///     load a sound a file: sampler.loadWav(“path/to/your/sound/file/in/app/bundle”) (without wav extension)
///   </li>
///   <li>
///     connect to the engine: AudioKit.output = sampler
///   </li>
///   <li>
///     start the engine AudioKit.start()
///   </li>
/// </ol>
SWIFT_CLASS("_TtC8AudioKit9AKSampler")
@interface AKSampler : AKNode
/// Sampler AV Audio Unit
@property (nonatomic, strong) AVAudioUnitSampler * _Nonnull samplerUnit;
/// Transposition amount in semitones, from -24 to 24, Default: 0
@property (nonatomic) double tuning;
/// Initialize the sampler node
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Load a wav file
/// \param file Name of the file without an extension (assumed to be accessible from the bundle)
///
- (BOOL)loadWav:(NSString * _Nonnull)file error:(NSError * _Nullable * _Nullable)error;
/// Load an EXS24 sample data file
/// \param file Name of the EXS24 file without the .exs extension
///
- (BOOL)loadEXS24:(NSString * _Nonnull)file error:(NSError * _Nullable * _Nullable)error;
/// Load an AKAudioFile
/// \param file an AKAudioFile
///
- (BOOL)loadAudioFile:(AKAudioFile * _Nonnull)file error:(NSError * _Nullable * _Nullable)error;
/// Load an array of AKAudioFiles
/// If a file name ends with a note name (ex: “violinC3.wav”)
/// The file will be set to this note
/// Handy to set multi-sampled instruments or a drum kit…
/// \param file an array of AKAudioFile
///
- (BOOL)loadAudioFiles:(NSArray<AKAudioFile *> * _Nonnull)files error:(NSError * _Nullable * _Nullable)error;
/// Load a file path
/// \param filePath Name of the file with the extension
///
- (void)loadPath:(NSString * _Nonnull)filePath;
/// Output Amplitude. Range: -90.0 -> +12 db, Default: 0 db
@property (nonatomic) double amplitude;
/// Normalized Output Volume. Range: 0 -> 1, Default: 1
@property (nonatomic) double volume;
/// Pan. Range: -1 -> 1, Default: 0
@property (nonatomic) double pan;
/// Play a MIDI Note
/// \param noteNumber MIDI Note Number to play
///
/// \param velocity MIDI Velocity
///
/// \param channel MIDI Channnel
///
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Stop a MIDI Note
/// \param noteNumber MIDI Note Number to stop
///
/// \param channel MIDI Channnel
///
- (void)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// MIDI receiving Sampler
/// Be sure to enableMIDI if you want to receive messages
SWIFT_CLASS("_TtC8AudioKit13AKMIDISampler")
@interface AKMIDISampler : AKSampler
/// MIDI Input
@property (nonatomic) MIDIEndpointRef midiIn;
/// Name of the instrument
@property (nonatomic, copy) NSString * _Nonnull name;
/// Enable MIDI input from a given MIDI client
/// This is not in the init function because it must be called AFTER you start AudioKit
/// \param midiClient A refernce to the MIDI client
///
/// \param name Name to connect with
///
- (void)enableMIDI:(MIDIClientRef)midiClient name:(NSString * _Nonnull)name;
/// Handle MIDI commands that come in externally
/// \param noteNumber MIDI Note number
///
/// \param velocity MIDI velocity
///
/// \param channel MIDI channel
///
- (void)receivedMIDINoteOnNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Handle MIDI CC that come in externally
/// \param controller MIDI CC number
///
/// \param value MIDI CC value
///
/// \param channel MIDI CC channel
///
- (void)midiCC:(uint8_t)controller value:(uint8_t)value channel:(uint8_t)channel;
/// Start a note
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Stop a note
- (void)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel;
/// Discard all virtual ports
- (void)destroyEndpoint;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Physical model of a 4 course mandolin
SWIFT_CLASS("_TtC8AudioKit10AKMandolin")
@interface AKMandolin : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Detuning of second string in the course (1=Unison (deault), 2=Octave)
@property (nonatomic) double detune;
/// Relative size of the mandoline (Default: 1, ranges ~ 0.5 - 2)
@property (nonatomic) double bodySize;
/// Initialize the 4 course (string-pair) Mandolin
/// \param detune Detuning of second string in the course (1=Unison (deault), 2=Octave)
///
/// \param bodySize Relative size of the mandoline (Default: 1, ranges ~ 0.5 - 2)
///
- (nonnull instancetype)initWithDetune:(double)detune bodySize:(double)bodySize OBJC_DESIGNATED_INITIALIZER;
/// Virutally pressing fingers on all the strings of the mandolin
/// \param course1Note MIDI note number for course 1
///
/// \param course2Note MIDI note number for course 2
///
/// \param course3Note MIDI note number for course 3
///
/// \param course4Note MIDI note number for course 4
///
- (void)prepareChord:(uint8_t)course1Note :(uint8_t)course2Note :(uint8_t)course3Note :(uint8_t)course4Note;
/// Pressing a finger on a course of the mandolin
/// \param noteNumber MIDI note number of fretted note
///
/// \param course Which set of strings to press
///
- (void)fretWithNoteNumber:(uint8_t)noteNumber course:(NSInteger)course;
/// Pluck an individual course
/// \param course Which set of string parirs to pluck
///
/// \param position Position lengthwise along the string to pluck (0 - 1)
///
/// \param velocity MIDI Velocity as an amplitude of the pluck (0 - 127)
///
- (void)pluckWithCourse:(NSInteger)course position:(double)position velocity:(uint8_t)velocity;
/// Strum all strings of the mandolin
/// \param position Position lengthwise along the string to pluck (0 - 1)
///
/// \param velocity MIDI Velocity as an amplitude of the pluck (0 - 127)
///
- (void)strum:(double)position velocity:(uint8_t)velocity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


@interface AKMandolin (SWIFT_EXTENSION(AudioKit))
/// Large Resonant Mandolin
- (void)presetLargeResonantMandolin;
/// Preset with Strings pairs separated by an octave
- (void)presetOctaveUpMandolin;
/// A mandolin that sounds a bit like an electric guitar
- (void)presetElectricGuitarMandolin;
/// Small, distorted mandolin
- (void)presetSmallBodiedDistortedMandolin;
/// A strangly tuned, psychedelic mandolin
- (void)presetAcidMandolin;
/// Print out current values in case you want to save it as a preset
- (void)printCurrentValuesAsPreset;
@end


/// Metal Bar Physical Model
SWIFT_CLASS("_TtC8AudioKit10AKMetalBar")
@interface AKMetalBar : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Boundary condition at left end of bar. 1 = clamped, 2 = pivoting, 3 = free
@property (nonatomic) double leftBoundaryCondition;
/// Boundary condition at right end of bar. 1 = clamped, 2 = pivoting, 3 = free
@property (nonatomic) double rightBoundaryCondition;
/// 30db decay time (in seconds).
@property (nonatomic) double decayDuration;
/// Speed of scanning the output location.
@property (nonatomic) double scanSpeed;
/// Position along bar that strike occurs.
@property (nonatomic) double position;
/// Normalized strike velocity
@property (nonatomic) double strikeVelocity;
/// Spatial width of strike.
@property (nonatomic) double strikeWidth;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this Bar node
/// \param leftBoundaryCondition Boundary condition at left end of bar. 1 = clamped, 2 = pivoting, 3 = free
///
/// \param rightBoundaryCondition Boundary condition at right end of bar. 1 = clamped, 2 = pivoting, 3 = free
///
/// \param decayDuration 30db decay time (in seconds).
///
/// \param scanSpeed Speed of scanning the output location.
///
/// \param position Position along bar that strike occurs.
///
/// \param strikeVelocity Normalized strike velocity
///
/// \param strikeWidth Spatial width of strike.
///
/// \param stiffness Dimensionless stiffness parameter
///
/// \param highFrequencyDamping High-frequency loss parameter. Keep this small
///
- (nonnull instancetype)initWithLeftBoundaryCondition:(double)leftBoundaryCondition rightBoundaryCondition:(double)rightBoundaryCondition decayDuration:(double)decayDuration scanSpeed:(double)scanSpeed position:(double)position strikeVelocity:(double)strikeVelocity strikeWidth:(double)strikeWidth stiffness:(double)stiffness highFrequencyDamping:(double)highFrequencyDamping OBJC_DESIGNATED_INITIALIZER;
/// Trigger the sound with an optional set of parameters
- (void)trigger;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Operation-based generator
SWIFT_CLASS("_TtC8AudioKit20AKOperationGenerator")
@interface AKOperationGenerator : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Sporth language snippet
@property (nonatomic, copy) NSString * _Nonnull sporth;
/// Parameters for changing internal operations
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull parameters;
/// Initialize this generator node with a generic sporth stack and a triggering flag
/// \param sporth String of valid Sporth code
///
- (nonnull instancetype)initWithSporth:(NSString * _Nonnull)sporth customUgens:(NSArray<AKCustomUgen *> * _Nonnull)customUgens OBJC_DESIGNATED_INITIALIZER;
/// Trigger the sound with current parameters
- (void)trigger:(NSInteger)triggerNumber;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Restart from scratch
- (void)restart;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Useful metronome class that you can utilize for your own projects
SWIFT_CLASS("_TtC8AudioKit11AKMetronome")
@interface AKMetronome : AKOperationGenerator
/// BPM
@property (nonatomic) double tempo;
/// Number of clicks in one measure
@property (nonatomic) NSInteger subdivision;
/// First click sound frequency
@property (nonatomic) double frequency1;
/// Non-first click sound frequency
@property (nonatomic) double frequency2;
/// The value of the current beat
@property (nonatomic) NSInteger currentBeat;
/// Function to perform on every tick
@property (nonatomic, copy) void (^ _Nonnull callback)(void);
/// Initialize the metronome
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Reset the metronome
- (void)reset;
- (nonnull instancetype)initWithSporth:(NSString * _Nonnull)sporth customUgens:(NSArray<AKCustomUgen *> * _Nonnull)customUgens SWIFT_UNAVAILABLE;
@end


/// Audio from the standard input
SWIFT_CLASS("_TtC8AudioKit12AKMicrophone")
@interface AKMicrophone : AKNode
/// Output Volume (Default 1)
@property (nonatomic) double volume;
/// Set the actual microphone device
- (BOOL)setDevice:(AKDevice * _Nonnull)device error:(NSError * _Nullable * _Nullable)error;
/// Determine if the microphone is currently on.
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the microphone
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s Mixer Node
SWIFT_CLASS("_TtC8AudioKit7AKMixer")
@interface AKMixer : AKNode
/// Output Volume (Default 1)
@property (nonatomic) double volume;
/// Determine if the mixer is serving any output or if it is stopped.
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the mixer node with no inputs, to be connected later
/// \param inputs A varaiadic list of AKNodes
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize the mixer node with multiple inputs
/// \param inputs An array of AKNodes
///
- (nonnull instancetype)init:(NSArray<AKNode *> * _Nonnull)inputs OBJC_DESIGNATED_INITIALIZER;
/// Connnect another input after initialization
/// \param input AKNode to connect
///
- (void)connect:(AKNode * _Nullable)input;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// A modal resonance filter used for modal synthesis. Plucked and bell sounds
/// can be created using  passing an impulse through a combination of modal
/// filters.
SWIFT_CLASS("_TtC8AudioKit22AKModalResonanceFilter")
@interface AKModalResonanceFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Resonant frequency of the filter.
@property (nonatomic) double frequency;
/// Quality factor of the filter. Roughly equal to Q/frequency.
@property (nonatomic) double qualityFactor;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param frequency Resonant frequency of the filter.
///
/// \param qualityFactor Quality factor of the filter. Roughly equal to Q/frequency.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input frequency:(double)frequency qualityFactor:(double)qualityFactor OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Moog Ladder is an new digital implementation of the Moog ladder filter based
/// on the work of Antti Huovilainen, described in the paper “Non-Linear Digital
/// Implementation of the Moog Ladder Filter” (Proceedings of DaFX04, Univ of
/// Napoli). This implementation is probably a more accurate digital
/// representation of the original analogue filter.
SWIFT_CLASS("_TtC8AudioKit12AKMoogLadder")
@interface AKMoogLadder : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Filter cutoff frequency.
@property (nonatomic) double cutoffFrequency;
/// Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing,
/// analogue synths generally allow resonances to be above 1.
@property (nonatomic) double resonance;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param cutoffFrequency Filter cutoff frequency.
///
/// \param resonance Resonance, generally < 1, but not limited to it.
/// Higher than 1 resonance values might cause aliasing,
/// analogue synths generally allow resonances to be above 1.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


@interface AKMoogLadder (SWIFT_EXTENSION(AudioKit))
/// Blurry, foggy filter
- (void)presetFogMoogLadder;
/// Dull noise filter
- (void)presetDullNoiseMoogLadder;
/// Print out current values in case you want to save it as a preset
- (void)printCurrentValuesAsPreset;
@end


/// This is an oscillator with linear interpolation that is capable of morphing
/// between an arbitrary number of wavetables.
SWIFT_CLASS("_TtC8AudioKit20AKMorphingOscillator")
@interface AKMorphingOscillator : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// In cycles per second, or Hz.
@property (nonatomic) double frequency;
/// Output Amplitude.
@property (nonatomic) double amplitude;
/// Index of the wavetable to use (fractional are okay).
@property (nonatomic) double index;
/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;
/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// This is an oscillator with linear interpolation that is capable of morphing
/// between an arbitrary number of wavetables.
SWIFT_CLASS("_TtC8AudioKit24AKMorphingOscillatorBank")
@interface AKMorphingOscillatorBank : AKPolyphonicNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Index of the wavetable to use (fractional are okay).
@property (nonatomic) double index;
/// Attack time
@property (nonatomic) double attackDuration;
/// Decay time
@property (nonatomic) double decayDuration;
/// Sustain Level
@property (nonatomic) double sustainLevel;
/// Release time
@property (nonatomic) double releaseDuration;
/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;
/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// stops all notes
- (void)reset;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(double)frequency;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end



/// Plot the FFT output from any node in an signal processing graph
SWIFT_CLASS("_TtC8AudioKit13AKNodeFFTPlot")
@interface AKNodeFFTPlot : EZAudioPlot <EZAudioFFTDelegate>
/// The node whose output to graph
@property (nonatomic, strong) AKNode * _Nullable node;
/// Required coder-based initialization (for use with Interface Builder)
/// \param coder NSCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Initialize the plot with the output from a given node and optional plot size
/// \param input AKNode from which to get the plot data
///
/// \param width Width of the view
///
/// \param height Height of the view
///
- (nonnull instancetype)init:(AKNode * _Nullable)input frame:(CGRect)frame bufferSize:(NSInteger)bufferSize OBJC_DESIGNATED_INITIALIZER;
/// Callback function for FFT data:
/// \param fft EZAudioFFT Reference
///
/// \param updatedWithFFTData A pointer to a c-style array of floats
///
/// \param bufferSize Number of elements in the FFT Data array
///
- (void)fft:(EZAudioFFT * _Null_unspecified)fft updatedWithFFTData:(float * _Nonnull)fftData bufferSize:(vDSP_Length)bufferSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Plot the output from any node in an signal processing graph
SWIFT_CLASS("_TtC8AudioKit16AKNodeOutputPlot")
@interface AKNodeOutputPlot : EZAudioPlot
/// The node whose output to graph
@property (nonatomic, strong) AKNode * _Nullable node;
/// Required coder-based initialization (for use with Interface Builder)
/// \param coder NSCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Initialize the plot with the output from a given node and optional plot size
/// \param input AKNode from which to get the plot data
///
/// \param width Width of the view
///
/// \param height Height of the view
///
- (nonnull instancetype)init:(AKNode * _Nullable)input frame:(CGRect)frame bufferSize:(NSInteger)bufferSize OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Simple audio recorder class
SWIFT_CLASS("_TtC8AudioKit14AKNodeRecorder")
@interface AKNodeRecorder : NSObject
/// True if we are recording.
@property (nonatomic, readonly) BOOL isRecording;
/// An optional duration for the recording to auto-stop when reached
@property (nonatomic) double durationToRecord;
/// Duration of recording
@property (nonatomic, readonly) double recordedDuration;
/// return the AKAudioFile for reading
@property (nonatomic, readonly, strong) AKAudioFile * _Nullable audioFile;
/// Initialize the node recorder
/// Recording buffer size is defaulted to be AKSettings.bufferLength
/// You can set a different value by setting an AKSettings.recordingBufferLength
/// \param node Node to record from
///
/// \param file Audio file to record to
///
- (nullable instancetype)initWithNode:(AKNode * _Nullable)node file:(AKAudioFile * _Nullable)file error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Start recording
- (BOOL)recordAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Stop recording
- (void)stop;
/// Reset the AKAudioFile to clear previous recordings
- (BOOL)resetAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Operation-based effect
SWIFT_CLASS("_TtC8AudioKit17AKOperationEffect")
@interface AKOperationEffect : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Parameters for changing internal operations
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull parameters;
/// Initialize the effect with an input and a valid Sporth string
/// \param input AKNode to use for processing
///
/// \param sporth String of valid Sporth code
///
- (nonnull instancetype)init:(AKNode * _Nullable)input sporth:(NSString * _Nonnull)sporth customUgens:(NSArray<AKCustomUgen *> * _Nonnull)customUgens OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end



/// Reads from the table sequentially and repeatedly at given frequency. Linear
/// interpolation is applied for table look up from internal phase values.
SWIFT_CLASS("_TtC8AudioKit12AKOscillator")
@interface AKOscillator : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// In cycles per second, or Hz.
@property (nonatomic) double frequency;
/// Output Amplitude.
@property (nonatomic) double amplitude;
/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;
/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Reads from the table sequentially and repeatedly at given frequency. Linear
/// interpolation is applied for table look up from internal phase values.
SWIFT_CLASS("_TtC8AudioKit16AKOscillatorBank")
@interface AKOscillatorBank : AKPolyphonicNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Attack time
@property (nonatomic) double attackDuration;
/// Decay time
@property (nonatomic) double decayDuration;
/// Sustain Level
@property (nonatomic) double sustainLevel;
/// Release time
@property (nonatomic) double releaseDuration;
/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;
/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(double)frequency;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Wrapper class for plotting audio from the final mix in a waveform plot
SWIFT_CLASS("_TtC8AudioKit20AKOutputWaveformPlot")
@interface AKOutputWaveformPlot : EZAudioPlot
/// Initialize the plot in a frame
/// \param frame CGRect in which to draw the plot
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initialize the plot in a frame with a different buffer size
/// \param frame CGRect in which to draw the plot
///
/// \param bufferSize size of the buffer - raise this number if the device struggles with generating the waveform
///
- (nonnull instancetype)initWithFrame:(CGRect)frame bufferSize:(NSInteger)bufferSize OBJC_DESIGNATED_INITIALIZER;
/// Required coder-based initialization (for use with Interface Builder)
/// \param coder NSCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Create a View with the plot (usually for playgrounds)
/// \param width Width of the view
///
/// \param height Height of the view
///
+ (UIView * _Nonnull)createViewWithWidth:(CGFloat)width height:(CGFloat)height SWIFT_WARN_UNUSED_RESULT;
@end


/// Pulse-Width Modulating Oscillator
SWIFT_CLASS("_TtC8AudioKit15AKPWMOscillator")
@interface AKPWMOscillator : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// In cycles per second, or Hz.
@property (nonatomic) double frequency;
/// Output amplitude
@property (nonatomic) double amplitude;
/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;
/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;
/// Duty cycle width (range 0-1).
@property (nonatomic) double pulseWidth;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the oscillator with defaults
/// \param frequency In cycles per second, or Hz.
///
- (nonnull instancetype)init;
/// Initialize this oscillator node
/// \param frequency In cycles per second, or Hz.
///
/// \param amplitude Output amplitude
///
/// \param pulseWidth Duty cycle width (range 0-1).
///
/// \param detuningOffset Frequency offset in Hz.
///
/// \param detuningMultiplier Frequency detuning multiplier
///
- (nonnull instancetype)initWithFrequency:(double)frequency amplitude:(double)amplitude pulseWidth:(double)pulseWidth detuningOffset:(double)detuningOffset detuningMultiplier:(double)detuningMultiplier OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Pulse-Width Modulating Oscillator Bank
SWIFT_CLASS("_TtC8AudioKit19AKPWMOscillatorBank")
@interface AKPWMOscillatorBank : AKPolyphonicNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Duty cycle width (range 0-1).
@property (nonatomic) double pulseWidth;
/// Attack time
@property (nonatomic) double attackDuration;
/// Decay time
@property (nonatomic) double decayDuration;
/// Sustain Level
@property (nonatomic) double sustainLevel;
/// Release time
@property (nonatomic) double releaseDuration;
/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;
/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;
/// Initialize the oscillator with defaults
/// \param frequency In cycles per second, or Hz.
///
- (nonnull instancetype)init;
/// Initialize this oscillator node
/// \param pulseWidth Duty cycle width (range 0-1).
///
/// \param attackDuration Attack time
///
/// \param decayDuration Decay time
///
/// \param sustainLevel Sustain Level
///
/// \param releaseDuration Release time
///
/// \param detuningOffset Frequency offset in Hz.
///
/// \param detuningMultiplier Frequency detuning multiplier
///
- (nonnull instancetype)initWithPulseWidth:(double)pulseWidth attackDuration:(double)attackDuration decayDuration:(double)decayDuration sustainLevel:(double)sustainLevel releaseDuration:(double)releaseDuration detuningOffset:(double)detuningOffset detuningMultiplier:(double)detuningMultiplier OBJC_DESIGNATED_INITIALIZER;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(double)frequency;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Stereo Panner
SWIFT_CLASS("_TtC8AudioKit8AKPanner")
@interface AKPanner : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Panning. A value of -1 is hard left, and a value of 1 is hard right, and 0 is center.
@property (nonatomic) double pan;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this panner node
/// \param input Input node to process
///
/// \param pan Panning. A value of -1 is hard left, and a value of 1 is hard right, and 0 is center.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input pan:(double)pan OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s PeakLimiter Audio Unit
SWIFT_CLASS("_TtC8AudioKit13AKPeakLimiter")
@interface AKPeakLimiter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Attack Time (Secs) ranges from 0.001 to 0.03 (Default: 0.012)
@property (nonatomic) double attackTime;
/// Decay Time (Secs) ranges from 0.001 to 0.06 (Default: 0.024)
@property (nonatomic) double decayTime;
/// Pre Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) double preGain;
/// Dry/Wet Mix (Default 100)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the peak limiter node
/// \param input Input node to process
///
/// \param attackTime Attack Time (Secs) ranges from 0.001 to 0.03 (Default: 0.012)
///
/// \param decayTime Decay Time (Secs) ranges from 0.001 to 0.06 (Default: 0.024)
///
/// \param preGain Pre Gain (dB) ranges from -40 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input attackTime:(double)attackTime decayTime:(double)decayTime preGain:(double)preGain OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// This is an implementation of Zoelzer’s parametric equalizer filter.
SWIFT_CLASS("_TtC8AudioKit34AKPeakingParametricEqualizerFilter")
@interface AKPeakingParametricEqualizerFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Center frequency.
@property (nonatomic) double centerFrequency;
/// Amount at which the center frequency value shall be increased or decreased. A value of 1 is a flat response.
@property (nonatomic) double gain;
/// Q of the filter. sqrt(0.5) is no resonance.
@property (nonatomic) double q;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this equalizer node
/// \param input Input node to process
///
/// \param centerFrequency Center frequency.
///
/// \param gain Amount the center frequency value shall be increased or decreased. A value of 1 is a flat response.
///
/// \param q Q of the filter. sqrt(0.5) is no resonance.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input centerFrequency:(double)centerFrequency gain:(double)gain q:(double)q OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// A class to periodically perform a callback
SWIFT_CLASS("_TtC8AudioKit18AKPeriodicFunction")
@interface AKPeriodicFunction : AKOperationGenerator
/// Repeat this loop at a given period with a code block
/// \param every Period, or interval between block executions
///
/// \param handler Code block to execute
///
- (nonnull instancetype)initWithEvery:(double)dur handler:(void (^ _Nonnull)(void))handler OBJC_DESIGNATED_INITIALIZER;
/// Repeat this loop at a given frequency with a code block
/// \param frequency Period, or interval between block executions
///
/// \param handler Code block to execute
///
- (nonnull instancetype)initWithFrequency:(double)frequency handler:(void (^ _Nonnull)(void))handler;
- (nonnull instancetype)initWithSporth:(NSString * _Nonnull)sporth customUgens:(NSArray<AKCustomUgen *> * _Nonnull)customUgens SWIFT_UNAVAILABLE;
@end


/// Phase Distortion Oscillator
SWIFT_CLASS("_TtC8AudioKit27AKPhaseDistortionOscillator")
@interface AKPhaseDistortionOscillator : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// In cycles per second, or Hz.
@property (nonatomic) double frequency;
/// Output amplitude
@property (nonatomic) double amplitude;
/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;
/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;
/// Duty cycle width (range -1 - 1).
@property (nonatomic) double phaseDistortion;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Phase Distortion Oscillator Bank
SWIFT_CLASS("_TtC8AudioKit31AKPhaseDistortionOscillatorBank")
@interface AKPhaseDistortionOscillatorBank : AKPolyphonicNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Duty cycle width (range -1 - 1).
@property (nonatomic) double phaseDistortion;
/// Attack time
@property (nonatomic) double attackDuration;
/// Decay time
@property (nonatomic) double decayDuration;
/// Sustain Level
@property (nonatomic) double sustainLevel;
/// Release time
@property (nonatomic) double releaseDuration;
/// Frequency offset in Hz.
@property (nonatomic) double detuningOffset;
/// Frequency detuning multiplier
@property (nonatomic) double detuningMultiplier;
/// Initialize the oscillator with defaults
- (nonnull instancetype)init;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(double)frequency;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// This is a phase locked vocoder. It has the ability to play back an audio
/// file loaded into an ftable like a sampler would. Unlike a typical sampler,
/// mincer allows time and pitch to be controlled separately.
SWIFT_CLASS("_TtC8AudioKit20AKPhaseLockedVocoder")
@interface AKPhaseLockedVocoder : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Position in time. When non-changing it will do a spectral freeze of a the current point in time.
@property (nonatomic) double position;
/// Amplitude.
@property (nonatomic) double amplitude;
/// Pitch ratio. A value of 1 is normal, 2 is double speed, 0.5 is halfspeed, etc.
@property (nonatomic) double pitchRatio;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this Phase-Locked Vocoder node
/// \param audioFileURL Location of the audio file to use.
///
/// \param position Position in time. When non-changing it will do a spectral freeze of a the current point in time.
///
/// \param amplitude Amplitude.
///
/// \param pitchRatio Pitch ratio. A value of 1 is normal, 2 is double speed, 0.5 is halfspeed, etc.
///
- (nonnull instancetype)initWithFile:(AVAudioFile * _Nonnull)file position:(double)position amplitude:(double)amplitude pitchRatio:(double)pitchRatio OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// A stereo phaser This is a stereo phaser, generated from Faust code taken
/// from the Guitarix project.
SWIFT_CLASS("_TtC8AudioKit8AKPhaser")
@interface AKPhaser : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Notch Minimum Frequency
@property (nonatomic) double notchMinimumFrequency;
/// Notch Maximum Frequency
@property (nonatomic) double notchMaximumFrequency;
/// Between 10 and 5000
@property (nonatomic) double notchWidth;
/// Between 1.1 and 4
@property (nonatomic) double notchFrequency;
/// 1 or 0
@property (nonatomic) double vibratoMode;
/// Between 0 and 1
@property (nonatomic) double depth;
/// Between 0 and 1
@property (nonatomic) double feedback;
/// 1 or 0
@property (nonatomic) double inverted;
/// Between 24 and 360
@property (nonatomic) double lfoBPM;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this phaser node
/// \param input Input node to process
///
/// \param notchMinimumFrequency Notch Minimum Frequency
///
/// \param notchMaximumFrequency Notch Maximum Frequency
///
/// \param notchWidth Between 10 and 5000
///
/// \param notchFrequency Between 1.1 and 4
///
/// \param vibratoMode 1 or 0
///
/// \param depth Between 0 and 1
///
/// \param feedback Between 0 and 1
///
/// \param inverted 1 or 0
///
/// \param lfoBPM Between 24 and 360
///
- (nonnull instancetype)init:(AKNode * _Nullable)input notchMinimumFrequency:(double)notchMinimumFrequency notchMaximumFrequency:(double)notchMaximumFrequency notchWidth:(double)notchWidth notchFrequency:(double)notchFrequency vibratoMode:(double)vibratoMode depth:(double)depth feedback:(double)feedback inverted:(double)inverted lfoBPM:(double)lfoBPM OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Faust-based pink noise generator
SWIFT_CLASS("_TtC8AudioKit11AKPinkNoise")
@interface AKPinkNoise : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Amplitude. (Value between 0-1).
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this noise node
/// \param amplitude Amplitude. (Value between 0-1).
///
- (nonnull instancetype)initWithAmplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Faust-based pitch shfiter
SWIFT_CLASS("_TtC8AudioKit14AKPitchShifter")
@interface AKPitchShifter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Pitch shift (in semitones)
@property (nonatomic) double shift;
/// Window size (in samples)
@property (nonatomic) double windowSize;
/// Crossfade (in samples)
@property (nonatomic) double crossfade;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this pitchshifter node
/// \param input Input node to process
///
/// \param shift Pitch shift (in semitones)
///
/// \param windowSize Window size (in samples)
///
/// \param crossfade Crossfade (in samples)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input shift:(double)shift windowSize:(double)windowSize crossfade:(double)crossfade OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Class to handle updating via CADisplayLink
SWIFT_CLASS("_TtC8AudioKit16AKPlaygroundLoop")
@interface AKPlaygroundLoop : NSObject
/// Repeat this loop at a given period with a code block
/// \param every Period, or interval between block executions
///
/// \param handler Code block to execute
///
- (nonnull instancetype)initWithEvery:(double)dur handler:(void (^ _Nonnull)(void))handler OBJC_DESIGNATED_INITIALIZER;
/// Repeat this loop at a given frequency with a code block
/// \param frequency Frequency of block executions in Hz
///
/// \param handler Code block to execute
///
- (nonnull instancetype)initWithFrequency:(double)frequency handler:(void (^ _Nonnull)(void))handler OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UILabel;

/// UIView for playgrounds allowing live views to be generated easily
SWIFT_CLASS("_TtC8AudioKit16AKPlaygroundView")
@interface AKPlaygroundView : UIView
/// Default standard element height (buttons, text)
@property (nonatomic) CGFloat elementHeight;
/// Current Y position
@property (nonatomic) NSInteger yPosition;
/// Spacing height between elements
@property (nonatomic) NSInteger spacing;
/// Initialize the playground view
- (nonnull instancetype)initWithFrame:(CGRect)frameRect OBJC_DESIGNATED_INITIALIZER;
/// Initialize with default size
- (nonnull instancetype)init;
/// Override this function in subclasses
- (void)setup;
/// Add a title to the playground view
- (UILabel * _Nonnull)addTitle:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Add label text
- (UILabel * _Nonnull)addLabel:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Add the subview, and move the Y Position down
- (void)addSubview:(UIView * _Nullable)potentialView;
/// Initialization within Interface Builder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Karplus-Strong plucked string instrument.
SWIFT_CLASS("_TtC8AudioKit15AKPluckedString")
@interface AKPluckedString : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
@property (nonatomic) double frequency;
/// Amplitude
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the pluck with defaults
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Initialize this pluck node
/// \param frequency Variable frequency. Values less than the initial frequency will be
/// doubled until it is greater than that.
///
/// \param amplitude Amplitude
///
/// \param lowestFrequency This frequency is used to allocate all the buffers needed for the delay.
/// This should be the lowest frequency you plan on using.
///
- (nonnull instancetype)initWithFrequency:(double)frequency amplitude:(double)amplitude lowestFrequency:(double)lowestFrequency OBJC_DESIGNATED_INITIALIZER;
/// Trigger the sound with an optional set of parameters
/// <ul>
///   <li>
///     frequency: Frequency in Hz
///   </li>
///   <li>
///     amplitude amplitude: Volume
///   </li>
/// </ul>
- (void)triggerWithFrequency:(double)frequency amplitude:(double)amplitude;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


@class UIFont;

/// Preset view scoller
SWIFT_CLASS("_TtC8AudioKit18AKPresetLoaderView")
@interface AKPresetLoaderView : UIView
/// Text to display as a label
@property (nonatomic, copy) NSString * _Nonnull label;
/// The presets to scroll through
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull presets;
/// Function to call when the preset is changed
@property (nonatomic, copy) void (^ _Nonnull callback)(NSString * _Nonnull);
/// Font size
@property (nonatomic) CGFloat fontSize;
/// Font
@property (nonatomic, strong) UIFont * _Nonnull font;
/// Initialize the preset loader view
- (nonnull instancetype)initWithPresets:(NSArray<NSString *> * _Nonnull)presets frame:(CGRect)frame font:(UIFont * _Nonnull)font fontSize:(CGFloat)fontSize initialIndex:(NSInteger)initialIndex callback:(void (^ _Nonnull)(NSString * _Nonnull))callback OBJC_DESIGNATED_INITIALIZER;
/// Initialize in Interface Builder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Draw the preset loader
- (void)drawRect:(CGRect)rect;
/// Handle new touches
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Handle moved touches
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Simple slider interface for AudioKit properties
SWIFT_CLASS("_TtC8AudioKit16AKPropertySlider")
@interface AKPropertySlider : UIView
/// Current value of the slider
@property (nonatomic) double value;
/// Minimum, left-most value
@property (nonatomic) double minimum;
/// Maximum, right-most value
@property (nonatomic) double maximum;
/// Text shown on the slider
@property (nonatomic, copy) NSString * _Nonnull property;
/// Format for the number shown on the slider
@property (nonatomic, copy) NSString * _Nonnull format;
/// Background color
@property (nonatomic, strong) UIColor * _Nonnull bgColor;
/// Slider overlay color
@property (nonatomic, strong) UIColor * _Nonnull sliderColor;
/// Text color
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// Font size
@property (nonatomic) CGFloat fontSize;
/// Function to call when value changes
@property (nonatomic, copy) void (^ _Nullable callback)(double);
/// Initialize the slider
- (nonnull instancetype)initWithProperty:(NSString * _Nonnull)property format:(NSString * _Nonnull)format value:(double)value minimum:(double)minimum maximum:(double)maximum color:(UIColor * _Nonnull)color frame:(CGRect)frame callback:(void (^ _Nonnull)(double))callback OBJC_DESIGNATED_INITIALIZER;
/// Initialization with no details
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initialization within Interface Builder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Actions to perform to make sure the view is renderable in Interface Builder
- (void)prepareForInterfaceBuilder;
/// Require constraint-based layout
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL requiresConstraintBasedLayout;)
+ (BOOL)requiresConstraintBasedLayout SWIFT_WARN_UNUSED_RESULT;
/// Handle new touches
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Handle moved touches
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Give the slider a random value
- (double)randomize SWIFT_WARN_UNUSED_RESULT;
/// Draw the slider
- (void)drawRect:(CGRect)rect;
@end


/// The output for reson appears to be very hot, so take caution when using this
/// module.
SWIFT_CLASS("_TtC8AudioKit16AKResonantFilter")
@interface AKResonantFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Center frequency of the filter, or frequency position of the peak response.
@property (nonatomic) double frequency;
/// Bandwidth of the filter.
@property (nonatomic) double bandwidth;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param frequency Center frequency of the filter, or frequency position of the peak response.
///
/// \param bandwidth Bandwidth of the filter.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input frequency:(double)frequency bandwidth:(double)bandwidth OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// View to choose from audio files to use in playgrounds
SWIFT_CLASS("_TtC8AudioKit30AKResourcesAudioFileLoaderView")
@interface AKResourcesAudioFileLoaderView : UIView
/// Handle touches
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Initialize the resource loader
- (nonnull instancetype)initWithPlayer:(AKAudioPlayer * _Nonnull)player filenames:(NSArray<NSString *> * _Nonnull)filenames frame:(CGRect)frame;
/// Draw the resource loader
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// AudioKit version of Apple’s Reverb Audio Unit
SWIFT_CLASS("_TtC8AudioKit8AKReverb")
@interface AKReverb : AKNode
/// Dry/Wet Mix (Default 0.5)
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the reverb node
/// \param input AKNode to reverberate
///
/// \param dryWetMix Amount of processed signal (Default: 0.5, Minimum: 0, Maximum: 1)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input dryWetMix:(double)dryWetMix OBJC_DESIGNATED_INITIALIZER;
/// Load an Apple Factory Preset
- (void)loadFactoryPreset:(AVAudioUnitReverbPreset)preset;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s Reverb2 Audio Unit
SWIFT_CLASS("_TtC8AudioKit9AKReverb2")
@interface AKReverb2 : AKNode
/// Dry Wet Mix (CrossFade) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double dryWetMix;
/// Gain (Decibels) ranges from -20 to 20 (Default: 0)
@property (nonatomic) double gain;
/// Min Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.008)
@property (nonatomic) double minDelayTime;
/// Max Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.050)
@property (nonatomic) double maxDelayTime;
/// Decay Time At0 Hz (Secs) ranges from 0.001 to 20.0 (Default: 1.0)
@property (nonatomic) double decayTimeAt0Hz;
/// Decay Time At Nyquist (Secs) ranges from 0.001 to 20.0 (Default: 0.5)
@property (nonatomic) double decayTimeAtNyquist;
/// Randomize Reflections (Integer) ranges from 1 to 1000 (Default: 1)
@property (nonatomic) double randomizeReflections;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the reverb2 node
/// \param input Input node to process
///
/// \param dryWetMix Dry Wet Mix (CrossFade) ranges from 0 to 1 (Default: 0.5)
///
/// \param gain Gain (Decibels) ranges from -20 to 20 (Default: 0)
///
/// \param minDelayTime Min Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.008)
///
/// \param maxDelayTime Max Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.050)
///
/// \param decayTimeAt0Hz Decay Time At0 Hz (Secs) ranges from 0.001 to 20.0 (Default: 1.0)
///
/// \param decayTimeAtNyquist Decay Time At Nyquist (Secs) ranges from 0.001 to 20.0 (Default: 0.5)
///
/// \param randomizeReflections Randomize Reflections (Integer) ranges from 1 to 1000 (Default: 1)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input dryWetMix:(double)dryWetMix gain:(double)gain minDelayTime:(double)minDelayTime maxDelayTime:(double)maxDelayTime decayTimeAt0Hz:(double)decayTimeAt0Hz decayTimeAtNyquist:(double)decayTimeAtNyquist randomizeReflections:(double)randomizeReflections OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// STK RhodesPiano
SWIFT_CLASS("_TtC8AudioKit13AKRhodesPiano")
@interface AKRhodesPiano : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
@property (nonatomic) double frequency;
/// Amplitude
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the mandolin with defaults
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Initialize the STK RhodesPiano model
/// \param frequency Variable frequency. Values less than the initial frequency will be doubled until it is
/// greater than that.
///
/// \param amplitude Amplitude
///
- (nonnull instancetype)initWithFrequency:(double)frequency amplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/// Trigger the sound with an optional set of parameters
/// \param frequency Frequency in Hz
///
/// \param amplitude amplitude Volume
///
- (void)triggerWithFrequency:(double)frequency amplitude:(double)amplitude;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s Ring Modulator from the Distortion Audio Unit
SWIFT_CLASS("_TtC8AudioKit15AKRingModulator")
@interface AKRingModulator : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Frequency1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) double frequency1;
/// Frequency2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) double frequency2;
/// Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) double balance;
/// Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
@property (nonatomic) double mix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the ring modulator node
/// \param input Input node to process
///
/// \param frequency1 Frequency1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param frequency2 Frequency2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param balance Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param mix Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input frequency1:(double)frequency1 frequency2:(double)frequency2 balance:(double)balance mix:(double)mix OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Disconnect the node
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Emulation of the Roland TB-303 filter
SWIFT_CLASS("_TtC8AudioKit19AKRolandTB303Filter")
@interface AKRolandTB303Filter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Cutoff frequency. (in Hertz)
@property (nonatomic) double cutoffFrequency;
/// Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing,
/// analogue synths generally allow resonances to be above 1.
@property (nonatomic) double resonance;
/// Distortion. Value is typically 2.0; deviation from this can cause stability issues.
@property (nonatomic) double distortion;
/// Asymmetry of resonance. Value is between 0-1
@property (nonatomic) double resonanceAsymmetry;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff frequency. (in Hertz)
///
/// \param resonance Resonance, generally < 1, but not limited to it.
/// Higher than 1 resonance values might cause aliasing,
/// analogue synths generally allow resonances to be above 1.
///
/// \param distortion Distortion. Value is typically 2.0; deviation from this can cause stability issues.
///
/// \param resonanceAsymmetry Asymmetry of resonance. Value is between 0-1
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance distortion:(double)distortion resonanceAsymmetry:(double)resonanceAsymmetry OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Wrapper class for plotting audio from the final mix in a rolling plot
SWIFT_CLASS("_TtC8AudioKit19AKRollingOutputPlot")
@interface AKRollingOutputPlot : EZAudioPlot
/// Useful to reconnect after connecting to Audiobus or IAA
- (void)reconnect;
/// Initialize the plot in a frame
/// \param frame CGRect in which to draw the plot
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initialize the plot in a frame with a different buffer size
/// \param frame CGRect in which to draw the plot
///
/// \param bufferSize size of the buffer - raise this number if the device struggles with generating the waveform
///
- (nonnull instancetype)initWithFrame:(CGRect)frame bufferSize:(NSInteger)bufferSize OBJC_DESIGNATED_INITIALIZER;
/// Required coder-based initialization (for use with Interface Builder)
/// \param coder NSCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Create a View with the plot (usually for playgrounds)
/// \param width Width of the view
///
/// \param height Height of the view
///
+ (UIView * _Nonnull)createViewWithWidth:(CGFloat)width height:(CGFloat)height SWIFT_WARN_UNUSED_RESULT;
@end


/// Audio player that loads a sample into memory
SWIFT_CLASS("_TtC8AudioKit14AKSamplePlayer")
@interface AKSamplePlayer : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// startPoint in samples - where to start playing the sample from
@property (nonatomic) uint32_t startPoint;
/// endPoint - this is where the sample will play to before stopping.
/// A value less than the start point will play the sample backwards.
@property (nonatomic) uint32_t endPoint;
/// playback rate - A value of 1 is normal, 2 is double speed, 0.5 is halfspeed, etc.
@property (nonatomic) double rate;
/// Volume - amplitude adjustment
@property (nonatomic) double volume;
/// Loop Enabled - if enabled, the sample will loop back to the startpoint when the endpoint is reached.
/// When disabled, the sample will play through once from startPoint to endPoint
@property (nonatomic) BOOL loopEnabled;
/// Number of sample in the audio stored in memory
@property (nonatomic, readonly) uint32_t size;
/// Position in the audio file from 0 - 1
@property (nonatomic, readonly) double normalizedPosition;
/// Position in the audio in samples, but represented as a double since
/// you could conceivably be at a non-integer sample
@property (nonatomic, readonly) double position;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this SamplePlayer node
- (nonnull instancetype)initWithFile:(AVAudioFile * _Nonnull)file startPoint:(uint32_t)startPoint endPoint:(uint32_t)endPoint rate:(double)rate volume:(double)volume completionHandler:(void (^ _Nonnull)(void))completionHandler OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Play from a certain sample
- (void)playFrom:(uint32_t)from;
/// Play from a certain sample for a certain number of samples
- (void)playFrom:(uint32_t)from length:(uint32_t)length;
/// Play from a certain sample to an end sample
- (void)playFrom:(uint32_t)from to:(uint32_t)to;
/// Load a new audio file into memory
- (void)loadSoundWithFile:(AVAudioFile * _Nonnull)file;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end



@interface AKSampler (SWIFT_EXTENSION(AudioKit))
@end


@interface AKSampler (SWIFT_EXTENSION(AudioKit))
/// Load a Bank from a SoundFont SF2 sample data file
/// \param file Name of the SoundFont SF2 file without the .sf2 extension
///
/// \param preset Number of the program to use
///
/// \param bank Number of the bank to use
///
- (BOOL)loadSoundFont:(NSString * _Nonnull)file preset:(NSInteger)preset bank:(NSInteger)bank error:(NSError * _Nullable * _Nullable)error;
/// Load a Melodic SoundFont SF2 sample data file
/// \param file Name of the SoundFont SF2 file without the .sf2 extension
///
/// \param preset Number of the program to use
///
- (BOOL)loadMelodicSoundFont:(NSString * _Nonnull)file preset:(NSInteger)preset error:(NSError * _Nullable * _Nullable)error;
/// Load a Percussive SoundFont SF2 sample data file
/// \param file Name of the SoundFont SF2 file without the .sf2 extension
///
/// \param preset Number of the program to use
///
- (BOOL)loadPercussiveSoundFont:(NSString * _Nonnull)file preset:(NSInteger)preset error:(NSError * _Nullable * _Nullable)error;
@end

@class AVAudioFormat;
enum BufferLength : NSInteger;

/// Global settings for AudioKit
SWIFT_CLASS("_TtC8AudioKit10AKSettings")
@interface AKSettings : NSObject
/// The sample rate in Hertz
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double sampleRate;)
+ (double)sampleRate SWIFT_WARN_UNUSED_RESULT;
+ (void)setSampleRate:(double)value;
/// Number of audio channels: 2 for stereo, 1 for mono
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) uint32_t numberOfChannels;)
+ (uint32_t)numberOfChannels SWIFT_WARN_UNUSED_RESULT;
+ (void)setNumberOfChannels:(uint32_t)value;
/// Whether we should be listening to audio input (microphone)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL audioInputEnabled;)
+ (BOOL)audioInputEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setAudioInputEnabled:(BOOL)value;
/// Whether to allow audio playback to override the mute setting
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL playbackWhileMuted;)
+ (BOOL)playbackWhileMuted SWIFT_WARN_UNUSED_RESULT;
+ (void)setPlaybackWhileMuted:(BOOL)value;
/// Global audio format AudioKit will default to
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AVAudioFormat * _Nonnull audioFormat;)
+ (AVAudioFormat * _Nonnull)audioFormat SWIFT_WARN_UNUSED_RESULT;
/// Whether to DefaultToSpeaker when audio input is enabled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL defaultToSpeaker;)
+ (BOOL)defaultToSpeaker SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultToSpeaker:(BOOL)value;
/// Whether to use bluetooth when audio input is enabled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL useBluetooth;)
+ (BOOL)useBluetooth SWIFT_WARN_UNUSED_RESULT;
+ (void)setUseBluetooth:(BOOL)value;
/// Additional control over the options to use for bluetooth
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) AVAudioSessionCategoryOptions bluetoothOptions;)
+ (AVAudioSessionCategoryOptions)bluetoothOptions SWIFT_WARN_UNUSED_RESULT;
+ (void)setBluetoothOptions:(AVAudioSessionCategoryOptions)value;
/// Global default rampTime value
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double rampTime;)
+ (double)rampTime SWIFT_WARN_UNUSED_RESULT;
+ (void)setRampTime:(double)value;
/// Allows AudioKit to send Notifications
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL notificationsEnabled;)
+ (BOOL)notificationsEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setNotificationsEnabled:(BOOL)value;
/// AudioKit buffer length is set using AKSettings.BufferLength
/// default is .VeryLong for a buffer set to 2 power 10 = 1024 samples (232 ms)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum BufferLength bufferLength;)
+ (enum BufferLength)bufferLength SWIFT_WARN_UNUSED_RESULT;
+ (void)setBufferLength:(enum BufferLength)value;
/// AudioKit recording buffer length is set using AKSettings.BufferLength
/// default is .VeryLong for a buffer set to 2 power 10 = 1024 samples (232 ms)
/// in Apple’s doc : “The requested size of the incoming buffers. The implementation may choose another size.”
/// So setting this value may have no effect (depending on the hardware device ?)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum BufferLength recordingBufferLength;)
+ (enum BufferLength)recordingBufferLength SWIFT_WARN_UNUSED_RESULT;
+ (void)setRecordingBufferLength:(enum BufferLength)value;
/// If set to true, Recording will stop after some delay to compensate
/// latency between time recording is stopped and time it is written to file
/// If set to false (the default value) , stopping record will be immediate,
/// even if the last audio frames haven’t been recorded to file yet.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL fixTruncatedRecordings;)
+ (BOOL)fixTruncatedRecordings SWIFT_WARN_UNUSED_RESULT;
+ (void)setFixTruncatedRecordings:(BOOL)value;
/// Enable AudioKit AVAudioSession Category Management
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL disableAVAudioSessionCategoryManagement;)
+ (BOOL)disableAVAudioSessionCategoryManagement SWIFT_WARN_UNUSED_RESULT;
+ (void)setDisableAVAudioSessionCategoryManagement:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableRouteChangeHandling;)
+ (BOOL)enableRouteChangeHandling SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableRouteChangeHandling:(BOOL)value;
/// Turn off AudioKit logging
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableLogging;)
+ (BOOL)enableLogging SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableLogging:(BOOL)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum of available buffer lengths
/// from Shortest: 2 power 5 samples (32 samples = 0.7 ms @ 44100 kz)
/// to Longest: 2 power 12 samples (4096 samples = 92.9 ms @ 44100 Hz)
typedef SWIFT_ENUM(NSInteger, BufferLength) {
/// Shortest
  BufferLengthShortest = 5,
/// Very Short
  BufferLengthVeryShort = 6,
/// Short
  BufferLengthShort = 7,
/// Medium
  BufferLengthMedium = 8,
/// Long
  BufferLengthLong = 9,
/// Very Long
  BufferLengthVeryLong = 10,
/// Huge
  BufferLengthHuge = 11,
/// Longest
  BufferLengthLongest = 12,
};

@class AVAudioSession;
enum SessionCategory : NSInteger;

@interface AKSettings (SWIFT_EXTENSION(AudioKit))
/// Shortcut for AVAudioSession.sharedInstance()
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AVAudioSession * _Nonnull session;)
+ (AVAudioSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
/// Convenience method accessible from Objective-C
+ (BOOL)setSessionWithCategory:(enum SessionCategory)category options:(NSUInteger)options error:(NSError * _Nullable * _Nullable)error;
/// Set the audio session type
+ (BOOL)setSessionWithCategory:(enum SessionCategory)category with:(AVAudioSessionCategoryOptions)options error:(NSError * _Nullable * _Nullable)error;
/// Checks if headphones are plugged
/// Returns true if headPhones are plugged, otherwise return false
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL headPhonesPlugged;)
+ (BOOL)headPhonesPlugged SWIFT_WARN_UNUSED_RESULT;
@end

/// Enum of available AVAudioSession Categories
typedef SWIFT_ENUM(NSInteger, SessionCategory) {
/// Audio silenced by silent switch and screen lock - audio is mixable
  SessionCategoryAmbient = 0,
/// Audio is silenced by silent switch and screen lock - audio is non mixable
  SessionCategorySoloAmbient = 1,
/// Audio is not silenced by silent switch and screen lock - audio is non mixable
  SessionCategoryPlayback = 2,
/// Silences playback audio
  SessionCategoryRecord = 3,
/// Audio is not silenced by silent switch and screen lock - audio is non mixable.
/// To allow mixing see AVAudioSessionCategoryOptionMixWithOthers.
  SessionCategoryPlayAndRecord = 4,
/// Disables playback and recording
  SessionCategoryAudioProcessing = 5,
/// Use to multi-route audio. May be used on input, output, or both.
  SessionCategoryMultiRoute = 6,
};


/// STK Shaker
SWIFT_CLASS("_TtC8AudioKit8AKShaker")
@interface AKShaker : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Amplitude
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the mandolin with defaults
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Trigger the sound with an optional set of parameters
/// <ul>
///   <li>
///     amplitude amplitude: Volume
///   </li>
/// </ul>
- (void)triggerWithAmplitude:(double)amplitude;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Incrementor view, normally used for MIDI presets, but could be useful elsehwere
SWIFT_CLASS("_TtC8AudioKit9AKStepper")
@interface AKStepper : UIView
/// Text / label to display
@property (nonatomic, copy) NSString * _Nonnull text;
/// Current value
@property (nonatomic) uint8_t value;
/// Function to call on change
@property (nonatomic, copy) void (^ _Nonnull callback)(uint8_t);
/// Handle new touches
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Initialize the stepper view
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text value:(uint8_t)value frame:(CGRect)frame callback:(void (^ _Nonnull)(uint8_t))callback OBJC_DESIGNATED_INITIALIZER;
/// Initialize within Interface Builder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Draw the stepper
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Stereo Field Limiter
SWIFT_CLASS("_TtC8AudioKit20AKStereoFieldLimiter")
@interface AKStereoFieldLimiter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Limiting Factor
@property (nonatomic) double amount;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this stereo field limiter node
/// \param input AKNode whose output will be limited
///
/// \param amount limit factor (Default: 1, Minimum: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input amount:(double)amount OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Audio from a standard stereo input (very useful for making filters that use Audiobus or IAA as their input source)
SWIFT_CLASS("_TtC8AudioKit13AKStereoInput")
@interface AKStereoInput : AKNode
/// Output Volume (Default 1)
@property (nonatomic) double volume;
/// Determine if the microphone is currently on.
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the microphone
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AKStringResonator passes the input through a network composed of comb,
/// low-pass and all-pass filters, similar to the one used in some versions of
/// the Karplus-Strong algorithm, creating a string resonator effect. The
/// fundamental frequency of the “string” is controlled by the
/// fundamentalFrequency.  This operation can be used to simulate sympathetic
/// resonances to an input signal.
SWIFT_CLASS("_TtC8AudioKit17AKStringResonator")
@interface AKStringResonator : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Fundamental frequency of string.
@property (nonatomic) double fundamentalFrequency;
/// Feedback amount (value between 0-1). A value close to 1 creates a slower decay and a more pronounced resonance.
/// Small values may leave the input signal unaffected. Depending on the filter frequency, typical values are > .9.
@property (nonatomic) double feedback;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param fundamentalFrequency Fundamental frequency of string.
///
/// \param feedback Feedback amount (value between 0-1). A value close to 1 creates a slower decay and a more
/// pronounced resonance. Small values may leave the input signal unaffected. Depending on the
/// filter frequency, typical values are > .9.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input fundamentalFrequency:(double)fundamentalFrequency feedback:(double)feedback OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Kick Drum Synthesizer Instrument
SWIFT_CLASS("_TtC8AudioKit11AKSynthKick")
@interface AKSynthKick : AKMIDIInstrument
/// Create the synth kick voice
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity;
/// Unneeded stop function since the sounds all decay quickly
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Snare Drum Synthesizer Instrument
SWIFT_CLASS("_TtC8AudioKit12AKSynthSnare")
@interface AKSynthSnare : AKMIDIInstrument
/// Create the synth snare voice
- (nonnull instancetype)initWithDuration:(double)duration resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity;
/// Unneeded stop function since the sounds all decay quickly
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Distortion using a modified hyperbolic tangent function.
SWIFT_CLASS("_TtC8AudioKit16AKTanhDistortion")
@interface AKTanhDistortion : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Determines the amount of gain applied to the signal before waveshaping. A value of 1 gives slight distortion.
@property (nonatomic) double pregain;
/// Gain applied after waveshaping
@property (nonatomic) double postgain;
/// Shape of the positive part of the signal. A value of 0 gets a flat clip.
@property (nonatomic) double postiveShapeParameter;
/// Like the positive shape parameter, only for the negative part.
@property (nonatomic) double negativeShapeParameter;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this distortion node
/// \param input Input node to process
///
/// \param pregain The amount of gain applied to the signal before waveshaping. A value of 1 gives slight distortion.
///
/// \param postgain Gain applied after waveshaping
///
/// \param postiveShapeParameter Shape of the positive part of the signal. A value of 0 gets a flat clip.
///
/// \param negativeShapeParameter Like the positive shape parameter, only for the negative part.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input pregain:(double)pregain postgain:(double)postgain postiveShapeParameter:(double)postiveShapeParameter negativeShapeParameter:(double)negativeShapeParameter OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// This is primarily for the telephone page in the Synthesis playground
SWIFT_CLASS("_TtC8AudioKit15AKTelephoneView")
@interface AKTelephoneView : UIView
/// Handle new touches
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Handle new touches
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Initialize the telephone view
- (nonnull instancetype)initWithFrame:(CGRect)frame callback:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))callback OBJC_DESIGNATED_INITIALIZER;
/// Initialize within Interface Builder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Draw the telephone view
- (void)drawRect:(CGRect)rect;
/// Draw one key
+ (void)drawKeyWithText:(NSString * _Nonnull)text numeral:(NSString * _Nonnull)numeral isPressed:(BOOL)isPressed;
/// Draw one key
+ (void)drawCenteredKeyWithNumeral:(NSString * _Nonnull)numeral isPressed:(BOOL)isPressed;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Testing node
SWIFT_CLASS("_TtC8AudioKit8AKTester")
@interface AKTester : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Calculate the MD5
@property (nonatomic, readonly, copy) NSString * _Nonnull MD5;
/// Flag on whether or not the test is still in progress
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this test node
/// \param input AKNode to test
///
/// \param sample Number of sample to product
///
- (nonnull instancetype)init:(AKNode * _Nullable)input samples:(NSInteger)samples OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// 3-pole (18 db/oct slope) Low-Pass filter with resonance and tanh distortion.
SWIFT_CLASS("_TtC8AudioKit24AKThreePoleLowpassFilter")
@interface AKThreePoleLowpassFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Distortion amount.  Zero gives a clean output. Greater than zero adds tanh distortion controlled by the
/// filter parameters, in such a way that both low cutoff and high resonance increase the distortion amount.
@property (nonatomic) double distortion;
/// Filter cutoff frequency in Hertz.
@property (nonatomic) double cutoffFrequency;
/// Resonance. Usually a value in the range 0-1. A value of 1.0 will self oscillate at the cutoff frequency.
/// Values slightly greater than 1 are possible for more sustained oscillation and an “overdrive” effect.
@property (nonatomic) double resonance;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param distortion Distortion amount.  Zero gives a clean output. Greater than zero adds tanh distortion
/// controlled by the filter parameters, in such a way that both low cutoff and high resonance
/// increase the distortion amount.
///
/// \param cutoffFrequency Filter cutoff frequency in Hertz.
///
/// \param resonance Usually a value in the range 0-1. A value of 1.0 will self oscillate at the cutoff frequency.
/// Values slightly greater than 1 are possible for more sustained oscillation and an “overdrive”
/// effect.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input distortion:(double)distortion cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// AudioKit version of Apple’s TimePitch Audio Unit
SWIFT_CLASS("_TtC8AudioKit11AKTimePitch")
@interface AKTimePitch : AKNode
/// Rate (rate) ranges from 0.03125 to 32.0 (Default: 1.0)
@property (nonatomic) double rate;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Pitch (Cents) ranges from -2400 to 2400 (Default: 0.0)
@property (nonatomic) double pitch;
/// Overlap (generic) ranges from 3.0 to 32.0 (Default: 8.0)
@property (nonatomic) double overlap;
/// Initialize the time pitch node
/// \param input Input node to process
///
/// \param rate Rate (rate) ranges from 0.03125 to 32.0 (Default: 1.0)
///
/// \param pitch Pitch (Cents) ranges from -2400 to 2400 (Default: 1.0)
///
/// \param overlap Overlap (generic) ranges from 3.0 to 32.0 (Default: 8.0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input rate:(double)rate pitch:(double)pitch overlap:(double)overlap OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// A complement to the AKLowPassFilter.
SWIFT_CLASS("_TtC8AudioKit22AKToneComplementFilter")
@interface AKToneComplementFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Half-Power Point in Hertz. Half power is defined as peak power / square root of 2.
@property (nonatomic) double halfPowerPoint;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param halfPowerPoint Half-Power Point in Hertz. Half power is defined as peak power / square root of 2.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input halfPowerPoint:(double)halfPowerPoint OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// A first-order recursive low-pass filter with variable frequency response.
SWIFT_CLASS("_TtC8AudioKit12AKToneFilter")
@interface AKToneFilter : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// The response curve’s half-power point, in Hertz. Half power is defined as peak power / root 2.
@property (nonatomic) double halfPowerPoint;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this filter node
/// \param input Input node to process
///
/// \param halfPowerPoint The response curve’s half-power point, in Hz. Half power is defined as peak power / root 2.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input halfPowerPoint:(double)halfPowerPoint OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Table-lookup tremolo with linear interpolation
SWIFT_CLASS("_TtC8AudioKit9AKTremolo")
@interface AKTremolo : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Frequency (Hz)
@property (nonatomic) double frequency;
/// Depth
@property (nonatomic) double depth;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// STK TubularBells
SWIFT_CLASS("_TtC8AudioKit14AKTubularBells")
@interface AKTubularBells : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
@property (nonatomic) double frequency;
/// Amplitude
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the mandolin with defaults
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Initialize the STK TubularBells model
/// \param frequency Variable frequency. Values less than the initial frequency will be doubled until it is
/// greater than that.
///
/// \param amplitude Amplitude
///
- (nonnull instancetype)initWithFrequency:(double)frequency amplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/// Trigger the sound with an optional set of parameters
/// <ul>
///   <li>
///     frequency: Frequency in Hz
///   </li>
///   <li>
///     amplitude amplitude: Volume
///   </li>
/// </ul>
- (void)triggerWithFrequency:(double)frequency amplitude:(double)amplitude;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Tuning table stores frequencies at which to play MIDI notes
SWIFT_CLASS("_TtC8AudioKit13AKTuningTable")
@interface AKTuningTable : NSObject
/// Total number of MIDI Notes available to play
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger midiNoteCount;)
+ (NSInteger)midiNoteCount SWIFT_WARN_UNUSED_RESULT;
/// Note number for standard reference note
@property (nonatomic) uint8_t middleCNoteNumber;
/// Frequency of standard reference note
/// equivalent to noteToHz: return 440. * exp2((60 - 69)/12.)
@property (nonatomic) double middleCFrequency;
/// Octave number for standard reference note.  Can be negative
/// …, -2, -1, 0, 1, 2, …
@property (nonatomic) NSInteger middleCOctave;
/// Initialization for standard default 12 tone equal temperament
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Pull out frequency information for a given note number
- (double)frequencyForNoteNumber:(uint8_t)noteNumber SWIFT_WARN_UNUSED_RESULT;
/// Set frequency of a given note number
- (void)setFrequency:(double)frequency at:(uint8_t)noteNumber;
/// Create the tuning using the input frequencies
/// \param fromFrequencies An array of frequencies
///
- (void)tuningTableFromFrequencies:(NSArray<NSNumber *> * _Nonnull)inputFrequencies;
@end


@interface AKTuningTable (SWIFT_EXTENSION(AudioKit))
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (void)presetRecurrenceRelation01;
@end


@interface AKTuningTable (SWIFT_EXTENSION(AudioKit))
/// Creates a “Nested 2-interval pattern”, or “Moment of Symmetry”
/// \param generator A Double on [0, 1]
///
/// \param level An Int on [0, 7]
///
/// \param murchana The mode of the scale…degrees are normalized by the frequency at this index
///
///
/// returns:
/// Number of notes per octave
/// From Erv Wilson.  See http://anaphoria.com/wilsonintroMOS.html
- (NSInteger)momentOfSymmetryWithGenerator:(double)gInput level:(NSInteger)lInput murchana:(NSInteger)mInput SWIFT_WARN_UNUSED_RESULT;
@end


@interface AKTuningTable (SWIFT_EXTENSION(AudioKit))
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetHighlandBagPipes SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetDiaphonicTetrachord SWIFT_WARN_UNUSED_RESULT;
@end


@interface AKTuningTable (SWIFT_EXTENSION(AudioKit))
/// Create a hexany from 4 frequencies (4 choose 2)
/// \param A, B, C, D Master set of frequencies
/// From Erv Wilson.  See http://anaphoria.com/dal.pdf and http://anaphoria.com/hexany.pdf
///
- (NSInteger)hexany:(double)A :(double)B :(double)C :(double)D SWIFT_WARN_UNUSED_RESULT;
/// Create a major tetrany from 4 frequencies (4 choose 1)
/// \param A, B, C, D Master set of frequencies
///
- (NSInteger)majorTetrany:(double)A :(double)B :(double)C :(double)D SWIFT_WARN_UNUSED_RESULT;
/// Create a hexany from 4 frequencies (4 choose 3)
/// \param A, B, C, D Master set of frequencies
///
- (NSInteger)minorTetrany:(double)A :(double)B :(double)C :(double)D SWIFT_WARN_UNUSED_RESULT;
@end


@interface AKTuningTable (SWIFT_EXTENSION(AudioKit))
/// Use a Scala file to write the tuning table
- (void)scalaFile:(NSString * _Nonnull)filePath;
/// Get frequencies from a Scala string
- (NSArray<NSNumber *> * _Nullable)frequenciesFromScalaString:(NSString * _Nullable)rawStr SWIFT_WARN_UNUSED_RESULT;
@end


@interface AKTuningTable (SWIFT_EXTENSION(AudioKit))
/// Default tuning table is 12ET.
- (void)defaultTuning;
/// Create 12-tone equal temperament
- (void)twelveToneEqualTemperament;
/// Create 31-tone equal temperament
- (void)thirtyOneEqualTemperament;
/// Create an equal temperament with notesPerOctave
/// \param notesPerOctave divides the octave equally by this many steps 
/// From Erv Wilson.  See http://anaphoria.com/MOSedo.pdf
///
- (void)equalTemperamentWithNotesPerOctave:(NSInteger)npo;
@end


@interface AKTuningTable (SWIFT_EXTENSION(AudioKit))
/// Set tuning to 22 Indian Scale.
/// From Erv Wilson.  See http://anaphoria.com/Khiasmos.pdf
- (NSInteger)khiasmos22Indian SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian00_17 SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian01Kalyan SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian02Bilawal SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian03Khamaj SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian04KafiOld SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian05Kafi SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian06Asawari SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian07Bhairavi SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian08Marwa SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian09Purvi SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian10Lalit2 SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian11Todi SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian12Lalit SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian13NoName;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian14AnandBhairav SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian15Bhairav SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian16JogiyaTodi SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian17Madhubanti SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian18NatBhairav SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian19AhirBhairav SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian20ChandraKanada SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian21BasantMukhari SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian22Champakali SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian23Patdeep SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian24MohanKauns SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian25Parameswari SWIFT_WARN_UNUSED_RESULT;
@end


/// AudioKit version of Apple’s VariSpeed Audio Unit
SWIFT_CLASS("_TtC8AudioKit11AKVariSpeed")
@interface AKVariSpeed : AKNode
/// Rate (rate) ranges form 0.25 to 4.0 (Default: 1.0)
@property (nonatomic) double rate;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the varispeed node
/// \param input Input node to process
///
/// \param rate Rate (rate) ranges from 0.25 to 4.0 (Default: 1.0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input rate:(double)rate OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// A delay line with cubic interpolation.
SWIFT_CLASS("_TtC8AudioKit15AKVariableDelay")
@interface AKVariableDelay : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Delay time (in seconds) that can be changed at any point. This value must not exceed the maximum delay time.
@property (nonatomic) double time;
/// Feedback amount. Should be a value between 0-1.
@property (nonatomic) double feedback;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this delay node
/// \param input Input node to process
///
/// \param time Delay time (in seconds). This value must not exceed the maximum delay time.
///
/// \param feedback Feedback amount. Should be a value between 0-1.
///
/// \param maximumDelayTime The maximum delay time, in seconds.
///
- (nonnull instancetype)init:(AKNode * _Nullable)input time:(double)time feedback:(double)feedback maximumDelayTime:(double)maximumDelayTime OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// Based on the Pink Trombone algorithm by Neil Thapen, this implements a
/// physical model of the vocal tract glottal pulse wave. The tract model is
/// based on the classic Kelly-Lochbaum segmented cylindrical 1d waveguide
/// model, and the glottal pulse wave is a LF glottal pulse model.
/// \param frequency Glottal frequency.
///
/// \param tonguePosition Tongue position (0-1)
///
/// \param tongueDiameter Tongue diameter (0-1)
///
/// \param tenseness Vocal tenseness. 0 = all breath. 1=fully saturated.
///
/// \param nasality Sets the velum size. Larger values of this creates more nasally sounds.
///
SWIFT_CLASS("_TtC8AudioKit12AKVocalTract")
@interface AKVocalTract : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Glottal frequency.
@property (nonatomic) double frequency;
/// Tongue position (0-1)
@property (nonatomic) double tonguePosition;
/// Tongue diameter (0-1)
@property (nonatomic) double tongueDiameter;
/// Vocal tenseness. 0 = all breath. 1=fully saturated.
@property (nonatomic) double tenseness;
/// Sets the velum size. Larger values of this creates more nasally sounds.
@property (nonatomic) double nasality;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this vocal tract node
/// \param frequency Glottal frequency.
///
/// \param tonguePosition Tongue position (0-1)
///
/// \param tongueDiameter Tongue diameter (0-1)
///
/// \param tenseness Vocal tenseness. 0 = all breath. 1=fully saturated.
///
/// \param nasality Sets the velum size. Larger values of this creates more nasally sounds.
///
- (nonnull instancetype)initWithFrequency:(double)frequency tonguePosition:(double)tonguePosition tongueDiameter:(double)tongueDiameter tenseness:(double)tenseness nasality:(double)nasality OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// White noise generator
SWIFT_CLASS("_TtC8AudioKit12AKWhiteNoise")
@interface AKWhiteNoise : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Amplitude. (Value between 0-1).
@property (nonatomic) double amplitude;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this noise node
/// \param amplitude Amplitude. (Value between 0-1).
///
- (nonnull instancetype)initWithAmplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


/// 8 FDN stereo zitareverb algorithm, imported from Faust.
SWIFT_CLASS("_TtC8AudioKit12AKZitaReverb")
@interface AKZitaReverb : AKNode
/// Four letter unique description of the node
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) AudioComponentDescription ComponentDescription;)
+ (AudioComponentDescription)ComponentDescription SWIFT_WARN_UNUSED_RESULT;
/// Ramp Time represents the speed at which parameters are allowed to change
@property (nonatomic) double rampTime;
/// Delay in ms before reverberation begins.
@property (nonatomic) double delay;
/// Crossover frequency separating low and middle frequencies (Hz).
@property (nonatomic) double crossoverFrequency;
/// Time (in seconds) to decay 60db in low-frequency band.
@property (nonatomic) double lowReleaseTime;
/// Time (in seconds) to decay 60db in mid-frequency band.
@property (nonatomic) double midReleaseTime;
/// Frequency (Hz) at which the high-frequency T60 is half the middle-band’s T60.
@property (nonatomic) double dampingFrequency;
/// Center frequency of second-order Regalia Mitra peaking equalizer section 1.
@property (nonatomic) double equalizerFrequency1;
/// Peak level in dB of second-order Regalia-Mitra peaking equalizer section 1
@property (nonatomic) double equalizerLevel1;
/// Center frequency of second-order Regalia Mitra peaking equalizer section 2.
@property (nonatomic) double equalizerFrequency2;
/// Peak level in dB of second-order Regalia-Mitra peaking equalizer section 2
@property (nonatomic) double equalizerLevel2;
/// 0 = all dry, 1 = all wet
@property (nonatomic) double dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this reverb node
/// \param input Input node to process
///
/// \param delay Delay in ms before reverberation begins.
///
/// \param crossoverFrequency Crossover frequency separating low and middle frequencies (Hz).
///
/// \param lowReleaseTime Time (in seconds) to decay 60db in low-frequency band.
///
/// \param midReleaseTime Time (in seconds) to decay 60db in mid-frequency band.
///
/// \param dampingFrequency Frequency (Hz) at which the high-frequency T60 is half the middle-band’s T60.
///
/// \param equalizerFrequency1 Center frequency of second-order Regalia Mitra peaking equalizer section 1.
///
/// \param equalizerLevel1 Peak level in dB of second-order Regalia-Mitra peaking equalizer section 1
///
/// \param equalizerFrequency2 Center frequency of second-order Regalia Mitra peaking equalizer section 2.
///
/// \param equalizerLevel2 Peak level in dB of second-order Regalia-Mitra peaking equalizer section 2
///
/// \param dryWetMix 0 = all dry, 1 = all wet
///
- (nonnull instancetype)init:(AKNode * _Nullable)input delay:(double)delay crossoverFrequency:(double)crossoverFrequency lowReleaseTime:(double)lowReleaseTime midReleaseTime:(double)midReleaseTime dampingFrequency:(double)dampingFrequency equalizerFrequency1:(double)equalizerFrequency1 equalizerLevel1:(double)equalizerLevel1 equalizerFrequency2:(double)equalizerFrequency2 equalizerLevel2:(double)equalizerLevel2 dryWetMix:(double)dryWetMix OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAvAudioNode:(AVAudioNode * _Nonnull)avAudioNode attach:(BOOL)attach SWIFT_UNAVAILABLE;
@end


@interface AUParameter (SWIFT_EXTENSION(AudioKit))
@end


@interface AUParameterTree (SWIFT_EXTENSION(AudioKit))
- (AUParameter * _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


@interface AVAudioConnectionPoint (SWIFT_EXTENSION(AudioKit))
@end


@interface AVAudioEngine (SWIFT_EXTENSION(AudioKit))
- (void)connect:(AVAudioNode * _Nonnull)node1 to:(AVAudioNode * _Nonnull)node2;
@end


@interface AVAudioFile (SWIFT_EXTENSION(AudioKit))
/// The number of samples can be accessed by .length property,
/// but samplesCount has a less ambiguous meaning
@property (nonatomic, readonly) int64_t samplesCount;
/// strange that sampleRate is a Double and not an Integer
@property (nonatomic, readonly) double sampleRate;
/// Number of channels, 1 for mono, 2 for stereo
@property (nonatomic, readonly) uint32_t channelCount;
/// Duration in seconds
@property (nonatomic, readonly) double duration;
/// true if Audio Samples are interleaved
@property (nonatomic, readonly) BOOL interleaved;
/// true only if file format is “deinterleaved native-endian float (AVAudioPCMFormatFloat32)”
@property (nonatomic, readonly) BOOL standard;
/// Human-readable version of common format
@property (nonatomic, readonly, copy) NSString * _Nonnull commonFormatString;
/// the directory path as a URL object
@property (nonatomic, readonly, copy) NSURL * _Nonnull directoryPath;
/// the file name with extension as a String
@property (nonatomic, readonly, copy) NSString * _Nonnull fileNamePlusExtension;
/// the file name without extension as a String
@property (nonatomic, readonly, copy) NSString * _Nonnull fileName;
/// the file extension as a String (without “.”)
@property (nonatomic, readonly, copy) NSString * _Nonnull fileExt;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// returns file Mime Type if exists
/// Otherwise, returns nil
/// (useful when sending an AKAudioFile by email)
@property (nonatomic, readonly, copy) NSString * _Nullable mimeType;
/// Static function to delete all audiofiles from Temp directory
/// AKAudioFile.cleanTempDirectory()
+ (void)cleanTempDirectory;
@end


@interface AVAudioUnit (SWIFT_EXTENSION(AudioKit))
@end


@interface AVAudioUnit (SWIFT_EXTENSION(AudioKit))
@end


/// Top level AudioKit managing class
SWIFT_CLASS("_TtC8AudioKit8AudioKit")
@interface AudioKit : NSObject
/// Format of AudioKit Nodes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AVAudioFormat * _Nonnull format;)
+ (AVAudioFormat * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
+ (void)setFormat:(AVAudioFormat * _Nonnull)value;
/// Reference to the AV Audio Engine
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AVAudioEngine * _Nonnull engine;)
+ (AVAudioEngine * _Nonnull)engine SWIFT_WARN_UNUSED_RESULT;
/// An audio output operation that most applications will need to use last
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AKNode * _Nullable output;)
+ (AKNode * _Nullable)output SWIFT_WARN_UNUSED_RESULT;
+ (void)setOutput:(AKNode * _Nullable)newValue;
/// Enumerate the list of available input devices.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AKDevice *> * _Nullable inputDevices;)
+ (NSArray<AKDevice *> * _Nullable)inputDevices SWIFT_WARN_UNUSED_RESULT;
/// Enumerate the list of available output devices.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AKDevice *> * _Nullable outputDevices;)
+ (NSArray<AKDevice *> * _Nullable)outputDevices SWIFT_WARN_UNUSED_RESULT;
/// The name of the current input device, if available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AKDevice * _Nullable inputDevice;)
+ (AKDevice * _Nullable)inputDevice SWIFT_WARN_UNUSED_RESULT;
/// The name of the current output device, if available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AKDevice * _Nullable outputDevice;)
+ (AKDevice * _Nullable)outputDevice SWIFT_WARN_UNUSED_RESULT;
/// Change the preferred input device, giving it one of the names from the list of available inputs.
+ (BOOL)setInputDevice:(AKDevice * _Nonnull)input error:(NSError * _Nullable * _Nullable)error;
/// Change the preferred output device, giving it one of the names from the list of available output.
+ (BOOL)setOutputDevice:(AKDevice * _Nonnull)output error:(NSError * _Nullable * _Nullable)error;
/// Start up the audio engine
+ (void)start;
/// Stop the audio engine
+ (void)stop;
/// Testing AKNode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AKTester * _Nullable tester;)
+ (AKTester * _Nullable)tester SWIFT_WARN_UNUSED_RESULT;
+ (void)setTester:(AKTester * _Nullable)value;
/// Test the output of a given node
/// \param node AKNode to test
///
/// \param duration Number of seconds to test (accurate to the sample)
///
+ (void)testWithNode:(AKNode * _Nonnull)node duration:(double)duration;
/// Audition the test to hear what it sounds like
/// \param node AKNode to test
///
/// \param duration Number of seconds to test (accurate to the sample)
///
+ (void)auditionTestWithNode:(AKNode * _Nonnull)node duration:(double)duration;
/// Disconnect all inputs
+ (void)disconnectAllInputs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>UIGestureRecognizer</code> subclass which tracks the state of individual touches.
SWIFT_CLASS("_TtC8AudioKit27MultitouchGestureRecognizer")
@interface MultitouchGestureRecognizer : UIGestureRecognizer
/// The maximum number of touches allowed in the stack/queue. Defaults to <code>0</code>, signifying unlimited touches.
/// If <code>count</code> is decreased past the current number of touches, any excess touches will be ended immediately.
@property (nonatomic) NSInteger count;
/// If <code>sustain</code> is set to <code>true</code>, when touches end they will be retained in <code>touches</code> until such time as all
/// touches have ended and a new touch begins.
/// If <code>sustain</code> is switched from <code>true</code> to <code>false</code>, any currently sustained touches will be ended immediately.
@property (nonatomic) BOOL sustain;
/// The currently tracked collection of touches. May contain touches after they have ended,
/// if <code>sustain</code> is set to <code>true</code>.
@property (nonatomic, readonly, copy) NSArray<UITouch *> * _Nonnull touches;
/// Handle new touches
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/// Handle moved touches
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/// Handle cancelled touches
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/// Handle ended touches
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
@end


@interface MultitouchGestureRecognizer (SWIFT_EXTENSION(AudioKit))
@end


/// Extension of <code>UIGestureRecognizerDelegate</code> which allows the delegate to receive messages relating to
/// individual touches. The <code>delegate</code> property can be set to a class
/// implementing <code>MultitouchGestureRecognizerDelegate</code> and it will receive these messages.
SWIFT_PROTOCOL("_TtP8AudioKit35MultitouchGestureRecognizerDelegate_")
@protocol MultitouchGestureRecognizerDelegate <UIGestureRecognizerDelegate>
@optional
/// Called when a touch is started.
- (void)multitouchGestureRecognizer:(MultitouchGestureRecognizer * _Nonnull)gestureRecognizer touchDidBegin:(UITouch * _Nonnull)touch;
/// Called when a touch is updates.
- (void)multitouchGestureRecognizer:(MultitouchGestureRecognizer * _Nonnull)gestureRecognizer touchDidMove:(UITouch * _Nonnull)touch;
/// Called when a touch is cancelled.
- (void)multitouchGestureRecognizer:(MultitouchGestureRecognizer * _Nonnull)gestureRecognizer touchDidCancel:(UITouch * _Nonnull)touch;
/// Called when a touch is ended.
- (void)multitouchGestureRecognizer:(MultitouchGestureRecognizer * _Nonnull)gestureRecognizer touchDidEnd:(UITouch * _Nonnull)touch;
@end


@interface NSError (SWIFT_EXTENSION(AudioKit))
@end

#pragma clang diagnostic pop
