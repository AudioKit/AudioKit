// Generated by Apple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import AVFoundation;
@import Foundation;
@import CoreMIDI;
@import Accelerate;
#endif

#import <AudioKit/AudioKit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class AVAudioNode;

/**
  Parent class for all nodes in AudioKit
*/
SWIFT_CLASS("_TtC8AudioKit6AKNode")
@interface AKNode : NSObject
/**
  The internal AVAudioEngine AVAudioNode
*/
@property (nonatomic, strong) AVAudioNode * _Nonnull avAudioNode;
/**
  Create the node
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Connect this node to another
*/
- (void)addConnectionPoint:(AKNode * _Nonnull)node;
@end


/**
  3-D Spatialization of the input
*/
SWIFT_CLASS("_TtC8AudioKit10AK3DPanner")
@interface AK3DPanner : AKNode
/**
  Position of sound source along x-axis
*/
@property (nonatomic) double x;
/**
  Position of sound source along y-axis
*/
@property (nonatomic) double y;
/**
  Position of sound source along z-axis
*/
@property (nonatomic) double z;
/**
  Initialize the panner node
  \param input Node to pan in 3D Space

  \param x x-axis location in meters

  \param y y-axis location in meters

  \param z z-axis location in meters

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input x:(double)x y:(double)y z:(double)z OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIColor;
@class NSCoder;
@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC8AudioKit10AKADSRView")
@interface AKADSRView : UIView
@property (nonatomic) double attackDuration;
@property (nonatomic) double decayDuration;
@property (nonatomic) double sustainLevel;
@property (nonatomic) double releaseDuration;
@property (nonatomic, copy) void (^ _Nullable callback)(double, double, double, double);
/**
  / Color Declarations
*/
@property (nonatomic, strong) UIColor * _Nonnull attackColor;
@property (nonatomic, strong) UIColor * _Nonnull decayColor;
@property (nonatomic, strong) UIColor * _Nonnull sustainColor;
@property (nonatomic, strong) UIColor * _Nonnull releaseColor;
@property (nonatomic) CGFloat curveStrokeWidth;
@property (nonatomic, strong) UIColor * _Nonnull curveColor;
- (nonnull instancetype)initWithCallback:(void (^ _Nullable)(double, double, double, double))callback OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL requiresConstraintBasedLayout;)
+ (BOOL)requiresConstraintBasedLayout;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/**
  Triggerable classic ADSR envelope
  \param input Input node to process

  \param attackDuration Attack time

  \param decayDuration Decay time

  \param sustainLevel Sustain Level

  \param releaseDuration Release time

*/
SWIFT_CLASS("_TtC8AudioKit19AKAmplitudeEnvelope")
@interface AKAmplitudeEnvelope : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Attack time
*/
@property (nonatomic) double attackDuration;
/**
  Decay time
*/
@property (nonatomic) double decayDuration;
/**
  Sustain Level
*/
@property (nonatomic) double sustainLevel;
/**
  Release time
*/
@property (nonatomic) double releaseDuration;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this envelope node
  \param input Input node to process

  \param attackDuration Attack time

  \param decayDuration Decay time

  \param sustainLevel Sustain Level

  \param releaseDuration Release time

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input attackDuration:(double)attackDuration decayDuration:(double)decayDuration sustainLevel:(double)sustainLevel releaseDuration:(double)releaseDuration OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Performs a “root-mean-square” on a signal to get overall amplitude of a
  signal. The output signal looks similar to that of a classic VU meter.
  \param input Input node to process

  \param halfPowerPoint Half-power point (in Hz) of internal lowpass filter.

*/
SWIFT_CLASS("_TtC8AudioKit18AKAmplitudeTracker")
@interface AKAmplitudeTracker : AKNode
/**
  Half-power point (in Hz) of internal lowpass filter.
*/
@property (nonatomic) double halfPowerPoint;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Detected amplitude
*/
@property (nonatomic, readonly) double amplitude;
/**
  Initialize this amplitude tracker node
  \param input Input node to process

  \param halfPowerPoint Half-power point (in Hz) of internal lowpass filter.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input halfPowerPoint:(double)halfPowerPoint OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class AVURLAsset;
@class AVAudioPCMBuffer;

/**
  Audio file, inherits from AVAudioFile and adds functionality
*/
SWIFT_CLASS("_TtC8AudioKit11AKAudioFile")
@interface AKAudioFile : AVAudioFile
/**
  The number of samples can be accessed by .length property,
  but samplesCount has a less ambiguous meaning
*/
@property (nonatomic, readonly) int64_t samplesCount;
/**
  strange that sampleRate is a Double and not an Integer !…
*/
@property (nonatomic, readonly) double sampleRate;
/**
  Number of channels, 1 for mono, 2 for stereo…
*/
@property (nonatomic, readonly) uint32_t channelCount;
/**
  Duration in seconds
*/
@property (nonatomic, readonly) double duration;
/**
  true if Audio Samples are interleaved
*/
@property (nonatomic, readonly) BOOL interleaved;
/**
  true only if file format is “deinterleaved native-endian float (AVAudioPCMFormatFloat32)”
*/
@property (nonatomic, readonly) BOOL standard;
/**
  Human-readable version of common format
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull commonFormatString;
/**
  the directory path as a NSURL object
*/
@property (nonatomic, readonly, copy) NSURL * _Nonnull directoryPath;
/**
  the file name with extension as a String
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull fileNamePlusExtension;
/**
  the file name without extension as a String
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull fileName;
/**
  the file extension as a String (without “.”)
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull fileExt;
/**
  Returns an AVAsset from the AKAudioFile
*/
@property (nonatomic, readonly, strong) AVURLAsset * _Nonnull avAsset;
/**
  As The description doesn’t provide so much informations, appended the fileFormat.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/**
  returns audio data as an Array of float Arrays
  If stereo:
  - arraysOfFloats[0] will contain an Array of left channel samples as Floats
  - arraysOfFloats[1] will contains an Array of right channel samples as Floats
*/
@property (nonatomic, copy) NSArray<NSArray<NSNumber *> *> * _Nonnull arraysOfFloats;
/**
  returns audio data as an AVAudioPCMBuffer
*/
@property (nonatomic, strong) AVAudioPCMBuffer * _Nonnull pcmBuffer;
/**
  returns the peak level expressed in dB ( -> Float).
*/
@property (nonatomic) float maxLevel;
/**
  Initialize the audio file
  \param fileURL NSURL of the file


  returns:
  An initialized AKAudioFile object for reading, or nil if init failed.
*/
- (nullable instancetype)initForReading:(NSURL * _Nonnull)fileURL error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/**
  Initialize the audio file
  \param fileURL NSURL of the file

  \param format The processing commonFormat to use when reading from the file.

  \param interleaved Whether to use an interleaved processing format.


  returns:
  An initialized AKAudioFile object for reading, or nil if init failed.
*/
- (nullable instancetype)initForReading:(NSURL * _Nonnull)fileURL commonFormat:(AVAudioCommonFormat)format interleaved:(BOOL)interleaved error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/**
  Initialize the audio file
  From Apple doc: The file type to create is inferred from the file extension of fileURL.
  This method will overwrite a file at the specified URL if a file already exists.
  The file is opened for writing using the standard format, AVAudioPCMFormatFloat32.
  Note: It seems that Apple’s AVAudioFile class has a bug with .wav files. They cannot be set
  with a floating Point encoding. As a consequence, such files will fail to record properly.
  So it’s better to use .caf (or .aif) files for recording purpose.
  \param fileURL NSURL of the file.

  \param settings The format of the file to create.

  \param format The processing commonFormat to use when writing.

  \param interleaved Whether to use an interleaved processing format.


  throws:
  NSError if init failed

  returns:
  An initialized AKAudioFile for writing, or nil if init failed.
*/
- (nullable instancetype)initForWriting:(NSURL * _Nonnull)fileURL settings:(NSDictionary<NSString *, id> * _Nonnull)settings commonFormat:(AVAudioCommonFormat)format interleaved:(BOOL)interleaved error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/**
  Super.init inherited from AVAudioFile superclass
  From Apple doc: The file type to create is inferred from the file extension of fileURL.
  This method will overwrite a file at the specified URL if a file already exists.
  The file is opened for writing using the standard format, AVAudioPCMFormatFloat32.
  Note: It seems that Apple’s AVAudioFile class has a bug with .wav files. They cannot be set
  with a floating Point encoding. As a consequence, such files will fail to record properly.
  So it’s better to use .caf (or .aif) files for recording purpose.
  \param fileURL NSURL of the file.

  \param settings The settings of the file to create.


  returns:
  An initialized AKAudioFile for writing, or nil if init failed.
*/
- (nullable instancetype)initForWriting:(NSURL * _Nonnull)fileURL settings:(NSDictionary<NSString *, id> * _Nonnull)settings error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface AKAudioFile (SWIFT_EXTENSION(AudioKit))
@end


@interface AKAudioFile (SWIFT_EXTENSION(AudioKit))
@end


@interface AKAudioFile (SWIFT_EXTENSION(AudioKit))
/**
  returns file Mime Type if exists
  Otherwise, returns nil
  (useful when sending an AKAudioFile by email)
*/
@property (nonatomic, readonly, copy) NSString * _Nullable mimeType;
/**
  Static function to delete all audiofiles from Temp directory
  AKAudioFile.cleanTempDirectory()
*/
+ (void)cleanTempDirectory;
@end

@class AKSampler;
@class AKMIDISampler;
@class AKAudioPlayer;

@interface AKAudioFile (SWIFT_EXTENSION(AudioKit))
/**
  Create an AKSampler loaded with the current AKAudioFile
*/
@property (nonatomic, readonly, strong) AKSampler * _Nullable sampler;
/**
  Create an AKMIDISampler loaded with the current AKAudioFile
*/
@property (nonatomic, readonly, strong) AKMIDISampler * _Nullable midiSampler;
/**
  Create an AKAudioPlayer to play the current AKAudioFile
*/
@property (nonatomic, readonly, strong) AKAudioPlayer * _Nullable player;
@end


@interface AKAudioFile (SWIFT_EXTENSION(AudioKit))
/**
  Returns the remaining not completed queued Async processes (Int)
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger queuedAsyncProcessCount;)
+ (NSInteger)queuedAsyncProcessCount;
/**
  Returns the total scheduled Async processes count (Int)
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger scheduledAsyncProcessesCount;)
+ (NSInteger)scheduledAsyncProcessesCount;
/**
  Returns the completed Async processes count (Int)
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger completedAsyncProcessesCount;)
+ (NSInteger)completedAsyncProcessesCount;
@end


/**
  Not so simple audio playback class
*/
SWIFT_CLASS("_TtC8AudioKit13AKAudioPlayer")
@interface AKAudioPlayer : AKNode
/**
  Will be triggered when AKAudioPlayer has finished to play.
  (will not as long as loop is on)
*/
@property (nonatomic, copy) void (^ _Nullable completionHandler)(void);
/**
  Boolean indicating whether or not to loop the playback
*/
@property (nonatomic) BOOL looping;
/**
  return the current played AKAudioFile
*/
@property (nonatomic, readonly, strong) AKAudioFile * _Nonnull audioFile;
/**
  Total duration of one loop through of the file
*/
@property (nonatomic, readonly) double duration;
/**
  Output Volume (Default 1)
*/
@property (nonatomic) double volume;
/**
  Whether or not the audio player is currently started
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Current playback time (in seconds)
*/
@property (nonatomic, readonly) double currentTime;
/**
  Time within the audio file at the current time
*/
@property (nonatomic, readonly) double playhead;
/**
  Pan (Default Center = 0)
*/
@property (nonatomic) double pan;
/**
  sets the start time, If it is playing, player will
  restart playing from the start time each time end time is set
*/
@property (nonatomic) double startTime;
/**
  sets the end time, If it is playing, player will
  restart playing from the start time each time end time is set
*/
@property (nonatomic) double endTime;
/**
  Initialize the audio player
  Notice that completionCallBack will be triggered from a
  background thread. Any UI update should be made using:
  \code
  dispatch_async(dispatch_get_main_queue()) {
     // UI updates...
  }

  \endcode\param file the AKAudioFile to play

  \param looping will loop play if set to true, or stop when play ends, so it can trig the completionHandler callback. Default is false (non looping)

  \param completionHandler AKCallback that will be triggered when the player end playing (useful for refreshing UI so we’re not playing anymore, we stopped playing…


  returns:
  an AKAudioPlayer if init succeeds, or nil if init fails. If fails, errors may be catched as it is a throwing init.
*/
- (nullable instancetype)initWithFile:(AKAudioFile * _Nonnull)file looping:(BOOL)looping error:(NSError * _Nullable * _Nullable)error completionHandler:(void (^ _Nullable)(void))completionHandler OBJC_DESIGNATED_INITIALIZER;
/**
  Start playback
*/
- (void)start;
/**
  Stop playback
*/
- (void)stop;
/**
  Pause playback
*/
- (void)pause;
/**
  resets in and out times for playing
*/
- (BOOL)reloadFileAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  Replace player’s file with a new AKAudioFile file
*/
- (BOOL)replaceFile:(AKAudioFile * _Nonnull)file error:(NSError * _Nullable * _Nullable)error;
/**
  Play the file back from a certain time to an end time (if set)
  \param time Time into the file at which to start playing back

  \param endTime Time into the file at which to playing back will stop / Loop

*/
- (void)playFrom:(double)time to:(double)endTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  An automatic wah effect, ported from Guitarix via Faust.
  \param input Input node to process

  \param wah Wah Amount

  \param mix Dry/Wet Mix

  \param amplitude Overall level

*/
SWIFT_CLASS("_TtC8AudioKit9AKAutoWah")
@interface AKAutoWah : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Wah Amount
*/
@property (nonatomic) double wah;
/**
  Dry/Wet Mix
*/
@property (nonatomic) double mix;
/**
  Overall level
*/
@property (nonatomic) double amplitude;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this autoWah node
  \param input Input node to process

  \param wah Wah Amount

  \param mix Dry/Wet Mix

  \param amplitude Overall level

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input wah:(double)wah mix:(double)mix amplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This node outputs a version of the audio source, amplitude-modified so
  that its rms power is equal to that of the comparator audio source. Thus a
  signal that has suffered loss of power (eg., in passing through a filter
  bank) can be restored by matching it with, for instance, its own source. It
  should be noted that this modifies amplitude only; output signal is not
  altered in any other respect.
  \param input Input node to process

  \param comparator Audio to match power with

*/
SWIFT_CLASS("_TtC8AudioKit10AKBalancer")
@interface AKBalancer : AKNode
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this balance node
  \param input Input node to process

  \param comparator Audio to match power with

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input comparator:(AKNode * _Nonnull)comparator OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  These filters are Butterworth second-order IIR filters. They offer an almost
  flat passband and very good precision and stopband attenuation.
  \param input Input node to process

  \param centerFrequency Center frequency. (in Hertz)

  \param bandwidth Bandwidth. (in Hertz)

*/
SWIFT_CLASS("_TtC8AudioKit27AKBandPassButterworthFilter")
@interface AKBandPassButterworthFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Center frequency. (in Hertz)
*/
@property (nonatomic) double centerFrequency;
/**
  Bandwidth. (in Hertz)
*/
@property (nonatomic) double bandwidth;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param centerFrequency Center frequency. (in Hertz)

  \param bandwidth Bandwidth. (in Hertz)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency bandwidth:(double)bandwidth OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s BandPassFilter Audio Unit
  \param input Input node to process

  \param centerFrequency Center Frequency (Hz) ranges from 20 to 22050 (Default: 5000)

  \param bandwidth Bandwidth (Cents) ranges from 100 to 12000 (Default: 600)

*/
SWIFT_CLASS("_TtC8AudioKit16AKBandPassFilter")
@interface AKBandPassFilter : AKNode
/**
  Center Frequency (Hz) ranges from 20 to 22050 (Default: 5000)
*/
@property (nonatomic) double centerFrequency;
/**
  Bandwidth (Cents) ranges from 100 to 12000 (Default: 600)
*/
@property (nonatomic) double bandwidth;
/**
  Dry/Wet Mix (Default 100)
*/
@property (nonatomic) double dryWetMix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the band pass filter node
  \param input Input node to process

  \param centerFrequency Center Frequency (Hz) ranges from 20 to 22050 (Default: 5000)

  \param bandwidth Bandwidth (Cents) ranges from 100 to 12000 (Default: 600)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency bandwidth:(double)bandwidth OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  These filters are Butterworth second-order IIR filters. They offer an almost
  flat passband and very good precision and stopband attenuation.
  \param input Input node to process

  \param centerFrequency Center frequency. (in Hertz)

  \param bandwidth Bandwidth. (in Hertz)

*/
SWIFT_CLASS("_TtC8AudioKit29AKBandRejectButterworthFilter")
@interface AKBandRejectButterworthFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Center frequency. (in Hertz)
*/
@property (nonatomic) double centerFrequency;
/**
  Bandwidth. (in Hertz)
*/
@property (nonatomic) double bandwidth;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param centerFrequency Center frequency. (in Hertz)

  \param bandwidth Bandwidth. (in Hertz)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency bandwidth:(double)bandwidth OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This will digitally degrade a signal.
  \param input Input node to process

  \param bitDepth The bit depth of signal output. Typically in range (1-24). Non-integer values are OK.

  \param sampleRate The sample rate of signal output.

*/
SWIFT_CLASS("_TtC8AudioKit12AKBitCrusher")
@interface AKBitCrusher : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  The bit depth of signal output. Typically in range (1-24). Non-integer values are OK.
*/
@property (nonatomic) double bitDepth;
/**
  The sample rate of signal output.
*/
@property (nonatomic) double sampleRate;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this bitcrusher node
  \param input Input node to process

  \param bitDepth The bit depth of signal output. Typically in range (1-24). Non-integer values are OK.

  \param sampleRate The sample rate of signal output.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input bitDepth:(double)bitDepth sampleRate:(double)sampleRate OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Stereo Booster
  \param input Input node to process

  \param gain Boosting multiplier.

*/
SWIFT_CLASS("_TtC8AudioKit9AKBooster")
@interface AKBooster : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Amplification Factor
*/
@property (nonatomic) double gain;
/**
  Amplification Factor in db
*/
@property (nonatomic) double dB;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this gainner node
  \param input AKNode whose output will be amplified

  \param gain Amplification factor (Default: 1, Minimum: 0)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input gain:(double)gain OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8AudioKit8AKButton")
@interface AKButton : UIView
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, strong) UIColor * _Nonnull color;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title color:(UIColor * _Nonnull)color frame:(CGRect)frame callback:(NSString * _Nonnull (^ _Nonnull)(void))callback OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/**
  Button that just access the start/stop feature of an AKNode,
  primarily used for playgrounds, but potentially useful in your own code.
*/
SWIFT_CLASS("_TtC8AudioKit14AKBypassButton")
@interface AKBypassButton : UIView
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/**
  Required initializer
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Draw the button
*/
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/**
  Bare bones implementation of AKPolyphonic protocol
*/
SWIFT_CLASS("_TtC8AudioKit16AKPolyphonicNode")
@interface AKPolyphonicNode : AKNode
/**
  Play a sound corresponding to a MIDI note
  \param noteNumber MIDI Note Number

  \param velocity MIDI Velocity

*/
- (void)playWithNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity;
/**
  Stop a sound corresponding to a MIDI note
  \param noteNumber MIDI Note Number

*/
- (void)stopWithNoteNumber:(NSInteger)noteNumber;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A version of AKInstrument specifically targeted to instruments that
  should be triggerable via MIDI or sequenced with the sequencer.
*/
SWIFT_CLASS("_TtC8AudioKit16AKMIDIInstrument")
@interface AKMIDIInstrument : AKPolyphonicNode
/**
  MIDI Input
*/
@property (nonatomic) MIDIEndpointRef midiIn;
/**
  Name of the instrument
*/
@property (nonatomic, copy) NSString * _Nonnull name;
/**
  Enable MIDI input from a given MIDI client
  This is not in the init function because it must be called AFTER you start audiokit
  \param midiClient A refernce to the midi client

  \param name Name to connect with

*/
- (void)enableMIDI:(MIDIClientRef)midiClient name:(NSString * _Nonnull)name;
/**
  Handle MIDI commands that come in externally
  \param noteNumber MIDI Note number

  \param velocity MIDI velocity

  \param channel MIDI channel

*/
- (void)receivedMIDINoteOn:(NSInteger)noteNumber velocity:(NSInteger)velocity channel:(NSInteger)channel;
/**
  Handle MIDI commands that come in externally
  \param noteNumber MIDI Note number

  \param velocity MIDI velocity

  \param channel MIDI channel

*/
- (void)receivedMIDINoteOffWithNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity channel:(NSInteger)channel;
/**
  Start a note
  \param noteNumber Note number to play

  \param velocity Velocity at which to play the note (0 - 127)

  \param channel Channel on which to play the note

*/
- (void)startWithNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity channel:(NSInteger)channel;
/**
  Stop a note
  \param noteNumber Note number to stop

  \param channel Channel on which to stop the note

*/
- (void)stopWithNoteNumber:(NSInteger)noteNumber channel:(NSInteger)channel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  MIDI Instrument that triggers functions on MIDI note on/off commands
*/
SWIFT_CLASS("_TtC8AudioKit20AKCallbackInstrument")
@interface AKCallbackInstrument : AKMIDIInstrument
/**
  Will trigger in response to any noteOn Message
  \param noteNumber MIDI Note Number being started

  \param velocity MIDI Velocity (0-127)

  \param channel MIDI Channel

*/
- (void)startWithNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity channel:(NSInteger)channel;
/**
  Will trigger in response to any noteOff Message
  \param noteNumber MIDI Note Number being stopped

  \param velocity MIDI Velocity (0-127)

  \param channel MIDI Channel

*/
- (void)stopWithNoteNumber:(NSInteger)noteNumber channel:(NSInteger)channel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This is was built using the JC reverb implentation found in FAUST. According
  to the source code, the specifications for this implementation were found on
  an old SAIL DART backup tape.
  This class is derived from the CLM JCRev function, which is based on the use
  of networks of simple allpass and comb delay filters.  This class implements
  three series allpass units, followed by four parallel comb filters, and two
  decorrelation delay lines in parallel at the output.
  \param input Input node to process

*/
SWIFT_CLASS("_TtC8AudioKit16AKChowningReverb")
@interface AKChowningReverb : AKNode
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this reverb node
  \param input Input node to process

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Clips a signal to a predefined limit, in a “soft” manner, using one of three
  methods.
  \param input Input node to process

  \param limit Threshold / limiting value.

*/
SWIFT_CLASS("_TtC8AudioKit9AKClipper")
@interface AKClipper : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Threshold / limiting value.
*/
@property (nonatomic) double limit;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this clipper node
  \param input Input node to process

  \param limit Threshold / limiting value.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input limit:(double)limit OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This filter reiterates input with an echo density determined by
  loopDuration. The attenuation rate is independent and is determined by
  reverbDuration, the reverberation duration (defined as the time in seconds
  for a signal to decay to 1/1000, or 60dB down from its original amplitude).
  Output from a comb filter will appear only after loopDuration seconds.
  \param input Input node to process

  \param reverbDuration The time in seconds for a signal to decay to 1/1000, or 60dB from its original amplitude. (aka RT-60).

  \param loopDuration The loop time of the filter, in seconds. This can also be thought of as the delay time. Determines frequency response curve, loopDuration * sr/2 peaks spaced evenly between 0 and sr/2.

*/
SWIFT_CLASS("_TtC8AudioKit18AKCombFilterReverb")
@interface AKCombFilterReverb : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  The time in seconds for a signal to decay to 1/1000, or 60dB from its original amplitude. (aka RT-60).
*/
@property (nonatomic) double reverbDuration;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param reverbDuration The time in seconds for a signal to decay to 1/1000, or 60dB from its original amplitude. (aka RT-60).

  \param loopDuration The loop time of the filter, in seconds. This can also be thought of as the delay time. Determines frequency response curve, loopDuration * sr/2 peaks spaced evenly between 0 and sr/2.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input reverbDuration:(double)reverbDuration loopDuration:(double)loopDuration OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit Compressor based on Apple’s DynamicsProcessor Audio Unit
  \param input Input node to process

  \param threshold Threshold (dB) ranges from -40 to 20 (Default: -20)

  \param headRoom Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)

  \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)

  \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)

  \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)

  \param compressionAmount Compression Amount (dB) ranges from -40 to 40 (Default: 0) (read only)

  \param inputAmplitude Input Amplitude (dB) ranges from -40 to 40 (Default: 0) (read only)

  \param outputAmplitude Output Amplitude (dB) ranges from -40 to 40 (Default: 0) (read only)

*/
SWIFT_CLASS("_TtC8AudioKit12AKCompressor")
@interface AKCompressor : AKNode
/**
  Threshold (dB) ranges from -40 to 20 (Default: -20)
*/
@property (nonatomic) double threshold;
/**
  Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
*/
@property (nonatomic) double headRoom;
/**
  Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
*/
@property (nonatomic) double attackTime;
/**
  Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
*/
@property (nonatomic) double releaseTime;
/**
  Compression Amount (dB) read only
*/
@property (nonatomic, readonly) double compressionAmount;
/**
  Input Amplitude (dB) read only
*/
@property (nonatomic, readonly) double inputAmplitude;
/**
  Output Amplitude (dB) read only
*/
@property (nonatomic, readonly) double outputAmplitude;
/**
  Master Gain (dB) ranges from -40 to 40 (Default: 0)
*/
@property (nonatomic) double masterGain;
/**
  Dry/Wet Mix (Default 100)
*/
@property (nonatomic) double dryWetMix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the dynamics processor node
  \param input Input node to process

  \param threshold Threshold (dB) ranges from -40 to 20 (Default: -20)

  \param headRoom Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)

  \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)

  \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)

  \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input threshold:(double)threshold headRoom:(double)headRoom attackTime:(double)attackTime releaseTime:(double)releaseTime masterGain:(double)masterGain OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This module will perform partitioned convolution on an input signal using an
  audio file as an impulse response.
  \param input Input node to process

  \param impulseResponseFileURL Location of the imulseResponse audio File

  \param partitionLength Partition length (in samples). Must be a power of 2. Lower values will add less latency, at the cost of requiring more CPU power.

*/
SWIFT_CLASS("_TtC8AudioKit13AKConvolution")
@interface AKConvolution : AKNode
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this convolution node
  \param input Input node to process

  \param impulseResponseFileURL Location of the imulseResponse audio File

  \param partitionLength Partition length (in samples). Must be a power of 2. Lower values will add less latency, at the cost of requiring more CPU power.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input impulseResponseFileURL:(NSURL * _Nonnull)impulseResponseFileURL partitionLength:(NSInteger)partitionLength OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  8 delay line stereo FDN reverb, with feedback matrix based upon physical
  modeling scattering junction of 8 lossless waveguides of equal
  characteristic impedance.
  \param input Input node to process

  \param feedback Feedback level in the range 0 to 1. 0.6 gives a good small ‘live’ room sound, 0.8 a small hall, and 0.9 a large hall. A setting of exactly 1 means infinite length, while higher values will make the opcode unstable.

  \param cutoffFrequency Low-pass cutoff frequency.

*/
SWIFT_CLASS("_TtC8AudioKit16AKCostelloReverb")
@interface AKCostelloReverb : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Feedback level in the range 0 to 1. 0.6 gives a good small ‘live’ room sound, 0.8 a small hall, and 0.9 a large hall. A setting of exactly 1 means infinite length, while higher values will make the opcode unstable.
*/
@property (nonatomic) double feedback;
/**
  Low-pass cutoff frequency.
*/
@property (nonatomic) double cutoffFrequency;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this reverb node
  \param input Input node to process

  \param feedback Feedback level in the range 0 to 1. 0.6 gives a good small ‘live’ room sound, 0.8 a small hall, and 0.9 a large hall. A setting of exactly 1 means infinite length, while higher values will make the opcode unstable.

  \param cutoffFrequency Low-pass cutoff frequency.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input feedback:(double)feedback cutoffFrequency:(double)cutoffFrequency OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface AKCostelloReverb (SWIFT_EXTENSION(AudioKit))
/**
  Short Tail Reverb
*/
- (void)presetShortTailCostelloReverb;
/**
  Low Ringing Long Tail Reverb
*/
- (void)presetLowRingingLongTailCostelloReverb;
/**
  Print out current values in case you want to save it as a preset
*/
- (void)printCurrentValuesAsPreset;
@end


/**
  Implements the DC blocking filter Y[i] = X[i] - X[i-1] + (igain * Y[i-1])
  Based on work by Perry Cook.
  \param input Input node to process

*/
SWIFT_CLASS("_TtC8AudioKit9AKDCBlock")
@interface AKDCBlock : AKNode
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s Decimator from the Distortion Audio Unit
  \param input Input node to process

  \param decimation Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param rounding Rounding (Normalized Value) ranges from 0 to 1 (Default: 0)

  \param mix Mix (Normalized Value) ranges from 0 to 1 (Default: 1)

*/
SWIFT_CLASS("_TtC8AudioKit11AKDecimator")
@interface AKDecimator : AKNode
/**
  Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double decimation;
/**
  Rounding (Normalized Value) ranges from 0 to 1 (Default: 0)
*/
@property (nonatomic) double rounding;
/**
  Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
*/
@property (nonatomic) double mix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the decimator node
  \param input Input node to process

  \param decimation Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param rounding Rounding (Normalized Value) ranges from 0 to 1 (Default: 0)

  \param mix Mix (Normalized Value) ranges from 0 to 1 (Default: 1)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input decimation:(double)decimation rounding:(double)rounding mix:(double)mix OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s Delay Audio Unit
  \param input Input audio AKNode to process

  \param time Delay time in seconds, ranges from 0 to 2 (Default: 1)

  \param feedback Amount of feedback (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param lowPassCutoff Low-pass cutoff frequency in Hz (Default 15000)

  \param dryWetMix Amount of unprocessed (dry) to delayed (wet) audio (Normalized Value) ranges from 0 to 1 (Default: 0.5)

*/
SWIFT_CLASS("_TtC8AudioKit7AKDelay")
@interface AKDelay : AKNode
/**
  Delay time in seconds (Default: 1)
*/
@property (nonatomic) NSTimeInterval time;
/**
  Feedback (Normalized Value) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double feedback;
/**
  Low pass cut-off frequency in Hertz (Default: 15000)
*/
@property (nonatomic) double lowPassCutoff;
/**
  Dry/Wet Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double dryWetMix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the delay node
  \param input Input audio AKNode to process

  \param time Delay time in seconds (Default: 1)

  \param feedback Amount of feedback (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param lowPassCutoff Low-pass cutoff frequency in Hz (Default 15000)

  \param dryWetMix Amount of unprocessed (dry) to delayed (wet) audio (Normalized Value) ranges from 0 to 1 (Default: 0.5)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input time:(double)time feedback:(double)feedback lowPassCutoff:(double)lowPassCutoff dryWetMix:(double)dryWetMix OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface AKDelay (SWIFT_EXTENSION(AudioKit))
/**
  Short Delay
*/
- (void)presetShortDelay;
/**
  Long, dense delay
*/
- (void)presetDenseLongDelay;
/**
  Electrical Circuits, Robotic Delay Effect
*/
- (void)presetElectricCircuitsDelay;
/**
  Print out current values in case you want to save it as a preset
*/
- (void)printCurrentValuesAsPreset;
@end


/**
  Wrapper for audio device selection
*/
SWIFT_CLASS("_TtC8AudioKit8AKDevice")
@interface AKDevice : NSObject
/**
  The human-readable name for the device.
*/
@property (nonatomic, copy) NSString * _Nonnull name;
/**
  The device identifier.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceID;
/**
  Initialize the device
  \param name The human-readable name for the device.

  \param deviceID The device identifier.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name deviceID:(NSString * _Nonnull)deviceID OBJC_DESIGNATED_INITIALIZER;
/**
  Printable device description
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s Distortion Audio Unit
  \param input Input node to process

  \param delay Delay (Milliseconds) ranges from 0.1 to 500 (Default: 0.1)

  \param decay Decay (Rate) ranges from 0.1 to 50 (Default: 1.0)

  \param delayMix Delay Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param decimation Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param rounding Rounding (Normalized Value) ranges from 0 to 1 (Default: 0.0)

  \param decimationMix Decimation Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param linearTerm Linear Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param squaredTerm Squared Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param cubicTerm Cubic Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param polynomialMix Polynomial Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param ringModFreq1 Ring Mod Freq1 (Hertz) ranges from 0.5 to 8000 (Default: 100)

  \param ringModFreq2 Ring Mod Freq2 (Hertz) ranges from 0.5 to 8000 (Default: 100)

  \param ringModBalance Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param ringModMix Ring Mod Mix (Normalized Value) ranges from 0 to 1 (Default: 0.0)

  \param softClipGain Soft Clip Gain (dB) ranges from -80 to 20 (Default: -6)

  \param finalMix Final Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)

*/
SWIFT_CLASS("_TtC8AudioKit12AKDistortion")
@interface AKDistortion : AKNode
/**
  Delay (Milliseconds) ranges from 0.1 to 500 (Default: 0.1)
*/
@property (nonatomic) double delay;
/**
  Decay (Rate) ranges from 0.1 to 50 (Default: 1.0)
*/
@property (nonatomic) double decay;
/**
  Delay Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double delayMix;
/**
  Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double decimation;
/**
  Rounding (Normalized Value) ranges from 0 to 1 (Default: 0.0)
*/
@property (nonatomic) double rounding;
/**
  Decimation Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double decimationMix;
/**
  Linear Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double linearTerm;
/**
  Squared Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double squaredTerm;
/**
  Cubic Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double cubicTerm;
/**
  Polynomial Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double polynomialMix;
/**
  Ring Mod Freq1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
*/
@property (nonatomic) double ringModFreq1;
/**
  Ring Mod Freq2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
*/
@property (nonatomic) double ringModFreq2;
/**
  Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double ringModBalance;
/**
  Ring Mod Mix (Normalized Value) ranges from 0 to 1 (Default: 0.0)
*/
@property (nonatomic) double ringModMix;
/**
  Soft Clip Gain (dB) ranges from -80 to 20 (Default: -6)
*/
@property (nonatomic) double softClipGain;
/**
  Final Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double finalMix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the distortion node
  \param input Input node to process

  \param delay Delay (Milliseconds) ranges from 0.1 to 500 (Default: 0.1)

  \param decay Decay (Rate) ranges from 0.1 to 50 (Default: 1.0)

  \param delayMix Delay Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param decimation Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param rounding Rounding (Normalized Value) ranges from 0 to 1 (Default: 0.0)

  \param decimationMix Decimation Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param linearTerm Linear Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param squaredTerm Squared Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param cubicTerm Cubic Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param polynomialMix Polynomial Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param ringModFreq1 Ring Mod Freq1 (Hertz) ranges from 0.5 to 8000 (Default: 100)

  \param ringModFreq2 Ring Mod Freq2 (Hertz) ranges from 0.5 to 8000 (Default: 100)

  \param ringModBalance Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param ringModMix Ring Mod Mix (Normalized Value) ranges from 0 to 1 (Default: 0.0)

  \param softClipGain Soft Clip Gain (dB) ranges from -80 to 20 (Default: -6)

  \param finalMix Final Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input delay:(double)delay decay:(double)decay delayMix:(double)delayMix decimation:(double)decimation rounding:(double)rounding decimationMix:(double)decimationMix linearTerm:(double)linearTerm squaredTerm:(double)squaredTerm cubicTerm:(double)cubicTerm polynomialMix:(double)polynomialMix ringModFreq1:(double)ringModFreq1 ringModFreq2:(double)ringModFreq2 ringModBalance:(double)ringModBalance ringModMix:(double)ringModMix softClipGain:(double)softClipGain finalMix:(double)finalMix OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface AKDistortion (SWIFT_EXTENSION(AudioKit))
/**
  Massive Distortion
*/
- (void)presetInfiniteDistortionWall;
/**
  Print out current values in case you want to save it as a preset
*/
- (void)printCurrentValuesAsPreset;
@end


/**
  Physical model of the sound of dripping water. When triggered, it will
  produce a droplet of water.
  \param intensity The intensity of the dripping sound.

  \param dampingFactor The damping factor. Maximum value is 2.0.

  \param energyReturn The amount of energy to add back into the system.

  \param mainResonantFrequency Main resonant frequency.

  \param firstResonantFrequency The first resonant frequency.

  \param secondResonantFrequency The second resonant frequency.

  \param amplitude Amplitude.

*/
SWIFT_CLASS("_TtC8AudioKit6AKDrip")
@interface AKDrip : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  The intensity of the dripping sound.
*/
@property (nonatomic) double intensity;
/**
  The damping factor. Maximum value is 2.0.
*/
@property (nonatomic) double dampingFactor;
/**
  The amount of energy to add back into the system.
*/
@property (nonatomic) double energyReturn;
/**
  Main resonant frequency.
*/
@property (nonatomic) double mainResonantFrequency;
/**
  The first resonant frequency.
*/
@property (nonatomic) double firstResonantFrequency;
/**
  The second resonant frequency.
*/
@property (nonatomic) double secondResonantFrequency;
/**
  Amplitude.
*/
@property (nonatomic) double amplitude;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize the drip with defaults
*/
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Initialize this drip node
  \param intensity The intensity of the dripping sound.

  \param dampingFactor The damping factor. Maximum value is 2.0.

  \param energyReturn The amount of energy to add back into the system.

  \param mainResonantFrequency Main resonant frequency.

  \param firstResonantFrequency The first resonant frequency.

  \param secondResonantFrequency The second resonant frequency.

  \param amplitude Amplitude.

*/
- (nonnull instancetype)initWithIntensity:(double)intensity dampingFactor:(double)dampingFactor energyReturn:(double)energyReturn mainResonantFrequency:(double)mainResonantFrequency firstResonantFrequency:(double)firstResonantFrequency secondResonantFrequency:(double)secondResonantFrequency amplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/**
  Trigger the sound with an optional set of parameters
*/
- (void)trigger;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
@end


/**
  Balanceable Mix between two signals, usually used for a dry signal and wet signal
  \param dry Dry Input (or just input 1)

  \param wet Wet Input (or just input 2)

  \param balance Balance Point (0 = all dry, 1 = all wet)

*/
SWIFT_CLASS("_TtC8AudioKit13AKDryWetMixer")
@interface AKDryWetMixer : AKNode
/**
  Balance (Default 0.5)
*/
@property (nonatomic) double balance;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize this dry wet mixer node
  \param dry Dry Input (or just input 1)

  \param wet Wet Input (or just input 2)

  \param balance Balance Point (0 = all dry, 1 = all wet)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)dry :(AKNode * _Nonnull)wet balance:(double)balance OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s DynamicsProcessor Audio Unit
  \param input Input node to process

  \param threshold Threshold (dB) ranges from -40 to 20 (Default: -20)

  \param headRoom Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)

  \param expansionRatio Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)

  \param expansionThreshold Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)

  \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)

  \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)

  \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)

  \param compressionAmount Compression Amount (dB) ranges from -40 to 40 (Default: 0) (read only)

  \param inputAmplitude Input Amplitude (dB) ranges from -40 to 40 (Default: 0) (read only)

  \param outputAmplitude Output Amplitude (dB) ranges from -40 to 40 (Default: 0) (read only)

*/
SWIFT_CLASS("_TtC8AudioKit19AKDynamicsProcessor")
@interface AKDynamicsProcessor : AKNode
/**
  Threshold (dB) ranges from -40 to 20 (Default: -20)
*/
@property (nonatomic) double threshold;
/**
  Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
*/
@property (nonatomic) double headRoom;
/**
  Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
*/
@property (nonatomic) double expansionRatio;
/**
  Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
*/
@property (nonatomic) double expansionThreshold;
/**
  Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
*/
@property (nonatomic) double attackTime;
/**
  Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
*/
@property (nonatomic) double releaseTime;
/**
  Master Gain (dB) ranges from -40 to 40 (Default: 0)
*/
@property (nonatomic) double masterGain;
/**
  Compression Amount (dB) read only
*/
@property (nonatomic, readonly) double compressionAmount;
/**
  Input Amplitude (dB) read only
*/
@property (nonatomic, readonly) double inputAmplitude;
/**
  Output Amplitude (dB) read only
*/
@property (nonatomic, readonly) double outputAmplitude;
/**
  Dry/Wet Mix (Default 100)
*/
@property (nonatomic) double dryWetMix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the dynamics processor node
  \param input Input node to process

  \param threshold Threshold (dB) ranges from -40 to 20 (Default: -20)

  \param headRoom Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)

  \param expansionRatio Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)

  \param expansionThreshold Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)

  \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)

  \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)

  \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)

  \param compressionAmount Compression Amount (dB) ranges from -40 to 40 (Default: 0)

  \param inputAmplitude Input Amplitude (dB) ranges from -40 to 40 (Default: 0)

  \param outputAmplitude Output Amplitude (dB) ranges from -40 to 40 (Default: 0)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input threshold:(double)threshold headRoom:(double)headRoom expansionRatio:(double)expansionRatio expansionThreshold:(double)expansionThreshold attackTime:(double)attackTime releaseTime:(double)releaseTime masterGain:(double)masterGain compressionAmount:(double)compressionAmount inputAmplitude:(double)inputAmplitude outputAmplitude:(double)outputAmplitude OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A 2nd order tunable equalization filter that provides a peak/notch filter
  for building parametric/graphic equalizers. With gain above 1, there will be
  a peak at the center frequency with a width dependent on bandwidth. If gain
  is less than 1, a notch is formed around the center frequency.
  \param input Input node to process

  \param centerFrequency Center frequency in Hertz

  \param bandwidth The peak/notch bandwidth in Hertz

  \param gain The peak/notch gain

*/
SWIFT_CLASS("_TtC8AudioKit17AKEqualizerFilter")
@interface AKEqualizerFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Center frequency. (in Hertz)
*/
@property (nonatomic) double centerFrequency;
/**
  The peak/notch bandwidth in Hertz
*/
@property (nonatomic) double bandwidth;
/**
  The peak/notch gain
*/
@property (nonatomic) double gain;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param centerFrequency Center frequency in Hertz

  \param bandwidth The peak/notch bandwidth in Hertz

  \param gain The peak/notch gain

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency bandwidth:(double)bandwidth gain:(double)gain OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit Expander based on Apple’s DynamicsProcessor Audio Unit
  \param input Input node to process

  \param expansionRatio Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)

  \param expansionThreshold Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)

  \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)

  \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)

  \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)

  \param compressionAmount Compression Amount (dB) ranges from -40 to 40 (Default: 0) (read only)

  \param inputAmplitude Input Amplitude (dB) ranges from -40 to 40 (Default: 0) (read only)

  \param outputAmplitude Output Amplitude (dB) ranges from -40 to 40 (Default: 0) (read only)

*/
SWIFT_CLASS("_TtC8AudioKit10AKExpander")
@interface AKExpander : AKNode
/**
  Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
*/
@property (nonatomic) double expansionRatio;
/**
  Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
*/
@property (nonatomic) double expansionThreshold;
/**
  Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
*/
@property (nonatomic) double attackTime;
/**
  Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)
*/
@property (nonatomic) double releaseTime;
/**
  Master Gain (dB) ranges from -40 to 40 (Default: 0)
*/
@property (nonatomic) double masterGain;
/**
  Compression Amount (dB) read only
*/
@property (nonatomic, readonly) double compressionAmount;
/**
  Input Amplitude (dB) read only
*/
@property (nonatomic, readonly) double inputAmplitude;
/**
  Output Amplitude (dB) read only
*/
@property (nonatomic, readonly) double outputAmplitude;
/**
  Dry/Wet Mix (Default 100)
*/
@property (nonatomic) double dryWetMix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the dynamics processor node
  \param input Input node to process

  \param expansionRatio Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)

  \param expansionThreshold Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)

  \param attackTime Attack Time (secs) ranges from 0.0001 to 0.2 (Default: 0.001)

  \param releaseTime Release Time (secs) ranges from 0.01 to 3 (Default: 0.05)

  \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input threshold:(double)threshold headRoom:(double)headRoom expansionRatio:(double)expansionRatio expansionThreshold:(double)expansionThreshold attackTime:(double)attackTime releaseTime:(double)releaseTime masterGain:(double)masterGain compressionAmount:(double)compressionAmount inputAmplitude:(double)inputAmplitude outputAmplitude:(double)outputAmplitude OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class EZAudioFFT;

/**
  FFT Calculation for any node
*/
SWIFT_CLASS("_TtC8AudioKit8AKFFTTap")
@interface AKFFTTap : NSObject <EZAudioFFTDelegate>
/**
  Array of FFT data
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull fftData;
/**
  Initialze the FFT calculation on a given node
  \param input Node on whose output the FFT will be computed

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input OBJC_DESIGNATED_INITIALIZER;
/**
  Callback function for FFT computation
*/
- (void)fft:(EZAudioFFT * _Null_unspecified)fft updatedWithFFTData:(float * _Nonnull)fftData bufferSize:(vDSP_Length)bufferSize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Classic FM Synthesis audio generation.
  \param waveform Shape of the oscillation

  \param baseFrequency In cycles per second, or Hz, this is the common denominator for the carrier and modulating frequencies.

  \param carrierMultiplier This multiplied by the baseFrequency gives the carrier frequency.

  \param modulatingMultiplier This multiplied by the baseFrequency gives the modulating frequency.

  \param modulationIndex This multiplied by the modulating frequency gives the modulation amplitude.

  \param amplitude Output Amplitude.

*/
SWIFT_CLASS("_TtC8AudioKit14AKFMOscillator")
@interface AKFMOscillator : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  In cycles per second, or Hz, this is the common denominator for the carrier and modulating frequencies.
*/
@property (nonatomic) double baseFrequency;
/**
  This multiplied by the baseFrequency gives the carrier frequency.
*/
@property (nonatomic) double carrierMultiplier;
/**
  This multiplied by the baseFrequency gives the modulating frequency.
*/
@property (nonatomic) double modulatingMultiplier;
/**
  This multiplied by the modulating frequency gives the modulation amplitude.
*/
@property (nonatomic) double modulationIndex;
/**
  Output Amplitude.
*/
@property (nonatomic) double amplitude;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize the oscillator with defaults
*/
- (nonnull instancetype)init;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
@end


@interface AKFMOscillator (SWIFT_EXTENSION(AudioKit))
/**
  Stun Ray Preset
*/
- (void)presetStunRay;
/**
  Fog Horn Preset
*/
- (void)presetFogHorn;
/**
  Buzzer Preset
*/
- (void)presetBuzzer;
/**
  Spiral Preset
*/
- (void)presetSpiral;
/**
  Wobble Preset
*/
- (void)presetWobble;
@end


/**
  Frequency Modulation Polyphonic Oscillator
  \param waveform The waveform of oscillation

  \param carrierMultiplier This multiplied by the baseFrequency gives the carrier frequency.

  \param modulatingMultiplier This multiplied by the baseFrequency gives the modulating frequency.

  \param modulationIndex This multiplied by the modulating frequency gives the modulation amplitude.

  \param attackDuration Attack time

  \param decayDuration Decay time

  \param sustainLevel Sustain Level

  \param releaseDuration Release time

  \param detuningOffset Frequency offset in Hz.

  \param detuningMultiplier Frequency detuning multiplier

*/
SWIFT_CLASS("_TtC8AudioKit18AKFMOscillatorBank")
@interface AKFMOscillatorBank : AKPolyphonicNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  This multiplied by the baseFrequency gives the carrier frequency.
*/
@property (nonatomic) double carrierMultiplier;
/**
  This multiplied by the baseFrequency gives the modulating frequency.
*/
@property (nonatomic) double modulatingMultiplier;
/**
  This multiplied by the modulating frequency gives the modulation amplitude.
*/
@property (nonatomic) double modulationIndex;
/**
  Attack time
*/
@property (nonatomic) double attackDuration;
/**
  Decay time
*/
@property (nonatomic) double decayDuration;
/**
  Sustain Level
*/
@property (nonatomic) double sustainLevel;
/**
  Release time
*/
@property (nonatomic) double releaseDuration;
/**
  Frequency offset in Hz.
*/
@property (nonatomic) double detuningOffset;
/**
  Frequency detuning multiplier
*/
@property (nonatomic) double detuningMultiplier;
/**
  Initialize the oscillator with defaults
*/
- (nonnull instancetype)init;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)playWithNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stopWithNoteNumber:(NSInteger)noteNumber;
@end


/**
  This filter reiterates the input with an echo density determined by loop
  time. The attenuation rate is independent and is determined by the
  reverberation time (defined as the time in seconds for a signal to decay to
  1/1000, or 60dB down from its original amplitude).  Output will begin to
  appear immediately.
  \param input Input node to process

  \param reverbDuration The duration in seconds for a signal to decay to 1/1000, or 60dB down from its original amplitude.

  \param loopDuration The loop duration of the filter, in seconds. This can also be thought of as the delay time or “echo density” of the reverberation.

*/
SWIFT_CLASS("_TtC8AudioKit29AKFlatFrequencyResponseReverb")
@interface AKFlatFrequencyResponseReverb : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  The duration in seconds for a signal to decay to 1/1000, or 60dB down from its original amplitude.
*/
@property (nonatomic) double reverbDuration;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this reverb node
  \param input Input node to process

  \param reverbDuration The duration in seconds for a signal to decay to 1/1000, or 60dB down from its original amplitude.

  \param loopDuration The loop duration of the filter, in seconds. This can also be thought of as the delay time or “echo density” of the reverberation.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input reverbDuration:(double)reverbDuration loopDuration:(double)loopDuration OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  STK Flutee
  \param frequency Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.

  \param amplitude Amplitude

*/
SWIFT_CLASS("_TtC8AudioKit7AKFlute")
@interface AKFlute : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
*/
@property (nonatomic) double frequency;
/**
  Amplitude
*/
@property (nonatomic) double amplitude;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize the mandolin with defaults
*/
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Initialize the STK Flute model
  \param frequency Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.

  \param amplitude Amplitude

*/
- (nonnull instancetype)initWithFrequency:(double)frequency amplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/**
  Trigger the sound with an optional set of parameters
  <ul>
    <li>
      frequency: Frequency in Hz
    </li>
    <li>
      amplitude amplitude: Volume
    </li>
  </ul>
*/
- (void)triggerWithFrequency:(double)frequency amplitude:(double)amplitude;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
@end


/**
  When fed with a pulse train, it will generate a series of overlapping
  grains. Overlapping will occur when 1/freq < dec, but there is no upper
  limit on the number of overlaps.
  \param input Input node to process

  \param centerFrequency Center frequency.

  \param attackDuration Impulse response attack time (in seconds).

  \param decayDuration Impulse reponse decay time (in seconds)

*/
SWIFT_CLASS("_TtC8AudioKit15AKFormantFilter")
@interface AKFormantFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Center frequency.
*/
@property (nonatomic) double centerFrequency;
/**
  Impulse response attack time (in seconds).
*/
@property (nonatomic) double attackDuration;
/**
  Impulse reponse decay time (in seconds)
*/
@property (nonatomic) double decayDuration;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param centerFrequency Center frequency.

  \param attackDuration Impulse response attack time (in seconds).

  \param decayDuration Impulse reponse decay time (in seconds)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency attackDuration:(double)attackDuration decayDuration:(double)decayDuration OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This is based on an algorithm originally created by Miller Puckette.
  \param input Input node to process

  \param hopSize Hop size.

  \param peakCount Number of peaks.

*/
SWIFT_CLASS("_TtC8AudioKit18AKFrequencyTracker")
@interface AKFrequencyTracker : AKNode
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Detected Amplitude (Use AKAmplitude tracker if you don’t need frequency)
*/
@property (nonatomic, readonly) double amplitude;
/**
  Detected frequency
*/
@property (nonatomic, readonly) double frequency;
/**
  Initialize this Pitch-tracker node
  \param input Input node to process

  \param hopSize Hop size.

  \param peakCount Number of peaks.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input hopSize:(double)hopSize peakCount:(double)peakCount OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  These filters are Butterworth second-order IIR filters. They offer an almost
  flat passband and very good precision and stopband attenuation.
  \param input Input node to process

  \param cutoffFrequency Cutoff frequency. (in Hertz)

*/
SWIFT_CLASS("_TtC8AudioKit27AKHighPassButterworthFilter")
@interface AKHighPassButterworthFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Cutoff frequency. (in Hertz)
*/
@property (nonatomic) double cutoffFrequency;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param cutoffFrequency Cutoff frequency. (in Hertz)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s HighPassFilter Audio Unit
  \param input Input node to process

  \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)

  \param resonance Resonance (dB) ranges from -20 to 40 (Default: 0)

*/
SWIFT_CLASS("_TtC8AudioKit16AKHighPassFilter")
@interface AKHighPassFilter : AKNode
/**
  Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
*/
@property (nonatomic) double cutoffFrequency;
/**
  Resonance (dB) ranges from -20 to 40 (Default: 0)
*/
@property (nonatomic) double resonance;
/**
  Dry/Wet Mix (Default 100)
*/
@property (nonatomic) double dryWetMix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the high pass filter node
  \param input Input node to process

  \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)

  \param resonance Resonance (dB) ranges from -20 to 40 (Default: 0)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s HighShelfFilter Audio Unit
  \param input Input node to process

  \param cutOffFrequency Cut Off Frequency (Hz) ranges from 10000 to 22050 (Default: 10000)

  \param gain Gain (dB) ranges from -40 to 40 (Default: 0)

*/
SWIFT_CLASS("_TtC8AudioKit17AKHighShelfFilter")
@interface AKHighShelfFilter : AKNode
/**
  Cut Off Frequency (Hz) ranges from 10000 to 22050 (Default: 10000)
*/
@property (nonatomic) double cutoffFrequency;
/**
  Gain (dB) ranges from -40 to 40 (Default: 0)
*/
@property (nonatomic) double gain;
/**
  Dry/Wet Mix (Default 100)
*/
@property (nonatomic) double dryWetMix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the high shelf filter node
  \param input Input node to process

  \param cutOffFrequency Cut Off Frequency (Hz) ranges from 10000 to 22050 (Default: 10000)

  \param gain Gain (dB) ranges from -40 to 40 (Default: 0)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutOffFrequency:(double)cutOffFrequency gain:(double)gain OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This is an implementation of Zoelzer’s parametric equalizer filter.
  \param input Input node to process

  \param centerFrequency Corner frequency.

  \param gain Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.

  \param q Q of the filter. sqrt(0.5) is no resonance.

*/
SWIFT_CLASS("_TtC8AudioKit36AKHighShelfParametricEqualizerFilter")
@interface AKHighShelfParametricEqualizerFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Corner frequency.
*/
@property (nonatomic) double centerFrequency;
/**
  Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.
*/
@property (nonatomic) double gain;
/**
  Q of the filter. sqrt(0.5) is no resonance.
*/
@property (nonatomic) double q;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this equalizer node
  \param input Input node to process

  \param centerFrequency Corner frequency.

  \param gain Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.

  \param q Q of the filter. sqrt(0.5) is no resonance.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency gain:(double)gain q:(double)q OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8AudioKit14AKKeyboardView")
@interface AKKeyboardView : UIView
@property (nonatomic) NSInteger octaveCount;
@property (nonatomic) NSInteger firstOctave;
@property (nonatomic) CGFloat topKeyHeightRatio;
@property (nonatomic, strong) UIColor * _Nonnull whiteKeyOff;
@property (nonatomic, strong) UIColor * _Nonnull blackKeyOff;
@property (nonatomic, strong) UIColor * _Nonnull keyOnColor;
@property (nonatomic) BOOL polyphonicMode;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithWidth:(NSInteger)width height:(NSInteger)height firstOctave:(NSInteger)firstOctave octaveCount:(NSInteger)octaveCount polyphonic:(BOOL)polyphonic OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL requiresConstraintBasedLayout;)
+ (BOOL)requiresConstraintBasedLayout;
- (void)drawRect:(CGRect)rect;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end


/**
  Analogue model of the Korg 35 Lowpass Filter
  \param input Input node to process

  \param cutoffFrequency Filter cutoff

  \param resonance Filter resonance (should be between 0-2)

  \param saturation Filter saturation.

*/
SWIFT_CLASS("_TtC8AudioKit19AKKorgLowPassFilter")
@interface AKKorgLowPassFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Filter cutoff
*/
@property (nonatomic) double cutoffFrequency;
/**
  Filter resonance (should be between 0-2)
*/
@property (nonatomic) double resonance;
/**
  Filter saturation.
*/
@property (nonatomic) double saturation;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param cutoffFrequency Filter cutoff

  \param resonance Filter resonance (should be between 0-2)

  \param saturation Filter saturation.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance saturation:(double)saturation OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  These filters are Butterworth second-order IIR filters. They offer an almost
  flat passband and very good precision and stopband attenuation.
  \param input Input node to process

  \param cutoffFrequency Cutoff frequency. (in Hertz)

*/
SWIFT_CLASS("_TtC8AudioKit26AKLowPassButterworthFilter")
@interface AKLowPassButterworthFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Cutoff frequency. (in Hertz)
*/
@property (nonatomic) double cutoffFrequency;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param cutoffFrequency Cutoff frequency. (in Hertz)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s LowPassFilter Audio Unit
  \param input Input node to process

  \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)

  \param resonance Resonance (dB) ranges from -20 to 40 (Default: 0)

*/
SWIFT_CLASS("_TtC8AudioKit15AKLowPassFilter")
@interface AKLowPassFilter : AKNode
/**
  Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
*/
@property (nonatomic) double cutoffFrequency;
/**
  Resonance (dB) ranges from -20 to 40 (Default: 0)
*/
@property (nonatomic) double resonance;
/**
  Dry/Wet Mix (Default 100)
*/
@property (nonatomic) double dryWetMix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the low pass filter node
  \param input Input node to process

  \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)

  \param resonance Resonance (dB) ranges from -20 to 40 (Default: 0)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s LowShelfFilter Audio Unit
  \param input Input node to process

  \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 200 (Default: 80)

  \param gain Gain (dB) ranges from -40 to 40 (Default: 0)

*/
SWIFT_CLASS("_TtC8AudioKit16AKLowShelfFilter")
@interface AKLowShelfFilter : AKNode
/**
  Cutoff Frequency (Hz) ranges from 10 to 200 (Default: 80)
*/
@property (nonatomic) double cutoffFrequency;
/**
  Gain (dB) ranges from -40 to 40 (Default: 0)
*/
@property (nonatomic) double gain;
/**
  Dry/Wet Mix (Default 100)
*/
@property (nonatomic) double dryWetMix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the low shelf filter node
  \param input Input node to process

  \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 200 (Default: 80)

  \param gain Gain (dB) ranges from -40 to 40 (Default: 0)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency gain:(double)gain OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This is an implementation of Zoelzer’s parametric equalizer filter.
  \param input Input node to process

  \param cornerFrequency Corner frequency.

  \param gain Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.

  \param q Q of the filter. sqrt(0.5) is no resonance.

*/
SWIFT_CLASS("_TtC8AudioKit35AKLowShelfParametricEqualizerFilter")
@interface AKLowShelfParametricEqualizerFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Corner frequency.
*/
@property (nonatomic) double cornerFrequency;
/**
  Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.
*/
@property (nonatomic) double gain;
/**
  Q of the filter. sqrt(0.5) is no resonance.
*/
@property (nonatomic) double q;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this equalizer node
  \param input Input node to process

  \param cornerFrequency Corner frequency.

  \param gain Amount at which the corner frequency value shall be increased or decreased. A value of 1 is a flat response.

  \param q Q of the filter. sqrt(0.5) is no resonance.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input cornerFrequency:(double)cornerFrequency gain:(double)gain q:(double)q OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/**
  A version of AKInstrument specifically targeted to instruments that
  should be triggerable via MIDI or sequenced with the sequencer.
*/
SWIFT_CLASS("_TtC8AudioKit10AKMIDINode")
@interface AKMIDINode : AKNode
/**
  MIDI Input
*/
@property (nonatomic) MIDIEndpointRef midiIn;
/**
  Name of the instrument
*/
@property (nonatomic, copy) NSString * _Nonnull name;
/**
  Initialize the MIDI node
  \param node A polyphonic node that will be triggered via MIDI

*/
- (nonnull instancetype)initWithNode:(AKPolyphonicNode * _Nonnull)node OBJC_DESIGNATED_INITIALIZER;
/**
  Enable MIDI input from a given MIDI client
  This is not in the init function because it must be called AFTER you start audiokit
  \param midiClient A refernce to the midi client

  \param name Name to connect with

*/
- (void)enableMIDI:(MIDIClientRef)midiClient name:(NSString * _Nonnull)name;
/**
  Handle MIDI commands that come in externally
  \param noteNumber MIDI Note number

  \param velocity MIDI velocity

  \param channel MIDI channel

*/
- (void)receivedMIDINoteOn:(NSInteger)noteNumber velocity:(NSInteger)velocity channel:(NSInteger)channel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class AUAudioUnit;
@class AVAudioUnitSampler;

/**
  Sampler audio generation.
  <ol>
    <li>
      init the audio unit like this: var sampler = AKSampler()
    </li>
    <li>
      load a sound a file: sampler.loadWav(“path/to/your/sound/file/in/app/bundle”) (without wav extension)
    </li>
    <li>
      connect to the engine: AudioKit.output = sampler
    </li>
    <li>
      start the engine AudioKit.start()
    </li>
  </ol>
*/
SWIFT_CLASS("_TtC8AudioKit9AKSampler")
@interface AKSampler : AKNode
@property (nonatomic, strong) AUAudioUnit * _Nullable internalAU;
/**
  Sampler AV Audio Unit
*/
@property (nonatomic, strong) AVAudioUnitSampler * _Nonnull samplerUnit;
/**
  Transposition amount in semitones, from -24 to 24, Default: 0
*/
@property (nonatomic) double tuning;
/**
  Initialize the sampler node
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Load a wav file
  \param file Name of the file without an extension (assumed to be accessible from the bundle)

*/
- (void)loadWav:(NSString * _Nonnull)file;
/**
  Load an EXS24 sample data file
  \param file Name of the EXS24 file without the .exs extension

*/
- (void)loadEXS24:(NSString * _Nonnull)file;
/**
  Load an AKAudioFile
  \param file an AKAudioFile

*/
- (BOOL)loadAudioFile:(AKAudioFile * _Nonnull)file error:(NSError * _Nullable * _Nullable)error;
/**
  Load an array of AKAudioFiles
  If a file name ends with a note name (ex: “violinC3.wav”)
  The file will be set to this note
  Handy to set multi-sampled instruments or a drum kit…
  \param file an array of AKAudioFile

*/
- (BOOL)loadAudioFiles:(NSArray<AKAudioFile *> * _Nonnull)files error:(NSError * _Nullable * _Nullable)error;
/**
  Load a Melodic SoundFont SF2 sample data file
  \param file Name of the SoundFont SF2 file without the .sf2 extension

  \param preset Number of the program to use

*/
- (void)loadMelodicSoundFont:(NSString * _Nonnull)file preset:(NSInteger)preset;
/**
  Load a Percussive SoundFont SF2 sample data file
  \param file Name of the SoundFont SF2 file without the .sf2 extension

  \param preset Number of the program to use

*/
- (void)loadPercussiveSoundFont:(NSString * _Nonnull)file preset:(NSInteger)preset;
/**
  Load a file path
  \param filePath Name of the file with the extension

*/
- (void)loadPath:(NSString * _Nonnull)filePath;
/**
  Output Amplitude. Range: -90.0 -> +12 db, Default: 0 db
*/
@property (nonatomic) double amplitude;
/**
  Normalized Output Volume. Range: 0 -> 1, Default: 1
*/
@property (nonatomic) double volume;
/**
  Pan. Range: -1 -> 1, Default: 0
*/
@property (nonatomic) double pan;
/**
  Play a MIDI Note
  \param noteNumber MIDI Note Number to play

  \param velocity MIDI Velocity

  \param channel MIDI Channnel

*/
- (void)playWithNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity channel:(NSInteger)channel;
/**
  Stop a MIDI Note
  \param noteNumber MIDI Note Number to stop

  \param channel MIDI Channnel

*/
- (void)stopWithNoteNumber:(NSInteger)noteNumber channel:(NSInteger)channel;
@end


/**
  MIDI receiving Sampler
  Be sure to enableMIDI if you want to receive messages
*/
SWIFT_CLASS("_TtC8AudioKit13AKMIDISampler")
@interface AKMIDISampler : AKSampler
/**
  MIDI Input
*/
@property (nonatomic) MIDIEndpointRef midiIn;
/**
  Name of the instrument
*/
@property (nonatomic, copy) NSString * _Nonnull name;
/**
  Enable MIDI input from a given MIDI client
  This is not in the init function because it must be called AFTER you start AudioKit
  \param midiClient A refernce to the MIDI client

  \param name Name to connect with

*/
- (void)enableMIDI:(MIDIClientRef)midiClient name:(NSString * _Nonnull)name;
/**
  Handle MIDI commands that come in externally
  \param noteNumber MIDI Note number

  \param velocity MIDI velocity

  \param channel MIDI channel

*/
- (void)receivedMIDINoteOnNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity channel:(NSInteger)channel;
/**
  Handle MIDI CC that come in externally
  \param cc MIDI cc number

  \param value MIDI cc value

  \param channel MIDI cc channel

*/
- (void)midiCC:(NSInteger)cc value:(NSInteger)value channel:(NSInteger)channel;
/**
  Start a note
*/
- (void)playWithNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity channel:(NSInteger)channel;
/**
  Stop a note
*/
- (void)stopWithNoteNumber:(NSInteger)noteNumber channel:(NSInteger)channel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Physical model of a 4 course mandolin
  \param detune Detuning of second string in the course (1=Unison (deault), 2=Octave)

  \param bodySize Relative size of the mandoline (Default: 1, ranges ~ 0.5 - 2)

*/
SWIFT_CLASS("_TtC8AudioKit10AKMandolin")
@interface AKMandolin : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Detuning of second string in the course (1=Unison (deault), 2=Octave)
*/
@property (nonatomic) double detune;
/**
  Relative size of the mandoline (Default: 1, ranges ~ 0.5 - 2)
*/
@property (nonatomic) double bodySize;
/**
  Initialize the 4 course (string-pair) Mandolin
  \param detune Detuning of second string in the course (1=Unison (deault), 2=Octave)

  \param bodySize Relative size of the mandoline (Default: 1, ranges ~ 0.5 - 2)

*/
- (nonnull instancetype)initWithDetune:(double)detune bodySize:(double)bodySize OBJC_DESIGNATED_INITIALIZER;
/**
  Virutally pressing fingers on all the strings of the mandolin
  \param course1Note MIDI note number for course 1

  \param course2Note MIDI note number for course 2

  \param course3Note MIDI note number for course 3

  \param course4Note MIDI note number for course 4

*/
- (void)prepareChord:(NSInteger)course1Note :(NSInteger)course2Note :(NSInteger)course3Note :(NSInteger)course4Note;
/**
  Pressing a finger on a course of the mandolin
  \param noteNumber MIDI note number of fretted note

  \param course Which set of strings to press

*/
- (void)fretWithNoteNumber:(NSInteger)noteNumber course:(NSInteger)course;
/**
  Pluck an individual course
  \param course Which set of string parirs to pluck

  \param position Position lengthwise along the string to pluck (0 - 1)

  \param velocity MIDI Velocity as an amplitude of the pluck (0 - 127)

*/
- (void)pluckWithCourse:(NSInteger)course position:(double)position velocity:(NSInteger)velocity;
/**
  Strum all strings of the mandolin
  \param position Position lengthwise along the string to pluck (0 - 1)

  \param velocity MIDI Velocity as an amplitude of the pluck (0 - 127)

*/
- (void)strum:(double)position velocity:(NSInteger)velocity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface AKMandolin (SWIFT_EXTENSION(AudioKit))
/**
  Large Resonant Mandolin
*/
- (void)presetLargeResonantMandolin;
/**
  Preset with Strings pairs separated by an octave
*/
- (void)presetOctaveUpMandolin;
/**
  A mandolin that sounds a bit like an electric guitar
*/
- (void)presetElectricGuitarMandolin;
/**
  Small, distorted mandolin
*/
- (void)presetSmallBodiedDistortedMandolin;
/**
  A strangly tuned, psychedelic mandolin
*/
- (void)presetAcidMandolin;
/**
  Print out current values in case you want to save it as a preset
*/
- (void)printCurrentValuesAsPreset;
@end


/**
  \param leftBoundaryCondition Boundary condition at left end of bar. 1 = clamped, 2 = pivoting, 3 = free

  \param rightBoundaryCondition Boundary condition at right end of bar. 1 = clamped, 2 = pivoting, 3 = free

  \param decayDuration 30db decay time (in seconds).

  \param scanSpeed Speed of scanning the output location.

  \param position Position along bar that strike occurs.

  \param strikeVelocity Normalized strike velocity

  \param strikeWidth Spatial width of strike.

  \param stiffness Dimensionless stiffness parameter

  \param highFrequencyDamping High-frequency loss parameter. Keep this small

*/
SWIFT_CLASS("_TtC8AudioKit10AKMetalBar")
@interface AKMetalBar : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Boundary condition at left end of bar. 1 = clamped, 2 = pivoting, 3 = free
*/
@property (nonatomic) double leftBoundaryCondition;
/**
  Boundary condition at right end of bar. 1 = clamped, 2 = pivoting, 3 = free
*/
@property (nonatomic) double rightBoundaryCondition;
/**
  30db decay time (in seconds).
*/
@property (nonatomic) double decayDuration;
/**
  Speed of scanning the output location.
*/
@property (nonatomic) double scanSpeed;
/**
  Position along bar that strike occurs.
*/
@property (nonatomic) double position;
/**
  Normalized strike velocity
*/
@property (nonatomic) double strikeVelocity;
/**
  Spatial width of strike.
*/
@property (nonatomic) double strikeWidth;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this Bar node
  \param leftBoundaryCondition Boundary condition at left end of bar. 1 = clamped, 2 = pivoting, 3 = free

  \param rightBoundaryCondition Boundary condition at right end of bar. 1 = clamped, 2 = pivoting, 3 = free

  \param decayDuration 30db decay time (in seconds).

  \param scanSpeed Speed of scanning the output location.

  \param position Position along bar that strike occurs.

  \param strikeVelocity Normalized strike velocity

  \param strikeWidth Spatial width of strike.

  \param stiffness Dimensionless stiffness parameter

  \param highFrequencyDamping High-frequency loss parameter. Keep this small

*/
- (nonnull instancetype)initWithLeftBoundaryCondition:(double)leftBoundaryCondition rightBoundaryCondition:(double)rightBoundaryCondition decayDuration:(double)decayDuration scanSpeed:(double)scanSpeed position:(double)position strikeVelocity:(double)strikeVelocity strikeWidth:(double)strikeWidth stiffness:(double)stiffness highFrequencyDamping:(double)highFrequencyDamping OBJC_DESIGNATED_INITIALIZER;
/**
  Trigger the sound with an optional set of parameters
*/
- (void)trigger;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Audio from the standard input
*/
SWIFT_CLASS("_TtC8AudioKit12AKMicrophone")
@interface AKMicrophone : AKNode
/**
  Output Volume (Default 1)
*/
@property (nonatomic) double volume;
/**
  Determine if the microphone is currently on.
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize the microphone
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
@end


/**
  AudioKit version of Apple’s Mixer Node
*/
SWIFT_CLASS("_TtC8AudioKit7AKMixer")
@interface AKMixer : AKNode
/**
  Output Volume (Default 1)
*/
@property (nonatomic) double volume;
/**
  Determine if the mixer is serving any output or if it is stopped.
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize the mixer node with no inputs, to be connected later
  \param inputs A varaiadic list of AKNodes

*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Connnect another input after initialization
  \param input AKNode to connect

*/
- (void)connect:(AKNode * _Nonnull)input;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
@end


/**
  A modal resonance filter used for modal synthesis. Plucked and bell sounds
  can be created using  passing an impulse through a combination of modal
  filters.
  \param input Input node to process

  \param frequency Resonant frequency of the filter.

  \param qualityFactor Quality factor of the filter. Roughly equal to Q/frequency.

*/
SWIFT_CLASS("_TtC8AudioKit22AKModalResonanceFilter")
@interface AKModalResonanceFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Resonant frequency of the filter.
*/
@property (nonatomic) double frequency;
/**
  Quality factor of the filter. Roughly equal to Q/frequency.
*/
@property (nonatomic) double qualityFactor;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param frequency Resonant frequency of the filter.

  \param qualityFactor Quality factor of the filter. Roughly equal to Q/frequency.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input frequency:(double)frequency qualityFactor:(double)qualityFactor OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Moog Ladder is an new digital implementation of the Moog ladder filter based
  on the work of Antti Huovilainen, described in the paper “Non-Linear Digital
  Implementation of the Moog Ladder Filter” (Proceedings of DaFX04, Univ of
  Napoli). This implementation is probably a more accurate digital
  representation of the original analogue filter.
  \param input Input node to process

  \param cutoffFrequency Filter cutoff frequency.

  \param resonance Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing, analogue synths generally allow resonances to be above 1.

*/
SWIFT_CLASS("_TtC8AudioKit12AKMoogLadder")
@interface AKMoogLadder : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Filter cutoff frequency.
*/
@property (nonatomic) double cutoffFrequency;
/**
  Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing, analogue synths generally allow resonances to be above 1.
*/
@property (nonatomic) double resonance;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param cutoffFrequency Filter cutoff frequency.

  \param resonance Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing, analogue synths generally allow resonances to be above 1.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface AKMoogLadder (SWIFT_EXTENSION(AudioKit))
/**
  Blurry, foggy filter
*/
- (void)presetFogMoogLadder;
/**
  Dull noise filter
*/
- (void)presetDullNoiseMoogLadder;
/**
  Print out current values in case you want to save it as a preset
*/
- (void)printCurrentValuesAsPreset;
@end


/**
  This is an oscillator with linear interpolation that is capable of morphing
  between an arbitrary number of wavetables.
  \param waveformArray An array of exactly four waveforms

  \param frequency Frequency (in Hz)

  \param amplitude Amplitude (typically a value between 0 and 1).

  \param index Index of the wavetable to use (fractional are okay).

  \param detuningOffset Frequency offset in Hz.

  \param detuningMultiplier Frequency detuning multiplier

  \param phase Initial phase of waveform, expects a value 0-1

*/
SWIFT_CLASS("_TtC8AudioKit20AKMorphingOscillator")
@interface AKMorphingOscillator : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  In cycles per second, or Hz.
*/
@property (nonatomic) double frequency;
/**
  Output Amplitude.
*/
@property (nonatomic) double amplitude;
/**
  Index of the wavetable to use (fractional are okay).
*/
@property (nonatomic) double index;
/**
  Frequency offset in Hz.
*/
@property (nonatomic) double detuningOffset;
/**
  Frequency detuning multiplier
*/
@property (nonatomic) double detuningMultiplier;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize the oscillator with defaults
*/
- (nonnull instancetype)init;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
@end


/**
  This is an oscillator with linear interpolation that is capable of morphing
  between an arbitrary number of wavetables.
  \param waveform The waveform of oscillation

  \param index Index of the wavetable to use (fractional are okay).

  \param attackDuration Attack time

  \param decayDuration Decay time

  \param sustainLevel Sustain Level

  \param releaseDuration Release time

  \param detuningOffset Frequency offset in Hz.

  \param detuningMultiplier Frequency detuning multiplier

*/
SWIFT_CLASS("_TtC8AudioKit24AKMorphingOscillatorBank")
@interface AKMorphingOscillatorBank : AKPolyphonicNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Index of the wavetable to use (fractional are okay).
*/
@property (nonatomic) double index;
/**
  Attack time
*/
@property (nonatomic) double attackDuration;
/**
  Decay time
*/
@property (nonatomic) double decayDuration;
/**
  Sustain Level
*/
@property (nonatomic) double sustainLevel;
/**
  Release time
*/
@property (nonatomic) double releaseDuration;
/**
  Frequency offset in Hz.
*/
@property (nonatomic) double detuningOffset;
/**
  Frequency detuning multiplier
*/
@property (nonatomic) double detuningMultiplier;
/**
  Initialize the oscillator with defaults
*/
- (nonnull instancetype)init;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)playWithNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stopWithNoteNumber:(NSInteger)noteNumber;
@end



/**
  Plot the FFT output from any node in an signal processing graph
*/
SWIFT_CLASS("_TtC8AudioKit13AKNodeFFTPlot")
@interface AKNodeFFTPlot : EZAudioPlot <EZAudioFFTDelegate>
/**
  The node whose output to graph
*/
@property (nonatomic, strong) AKNode * _Nullable node;
/**
  Required coder-based initialization (for use with Interface Builder)
  \param coder NSCoder

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Initialize the plot with the output from a given node and optional plot size
  \param input AKNode from which to get the plot data

  \param width Width of the view

  \param height Height of the view

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input frame:(CGRect)frame bufferSize:(NSInteger)bufferSize OBJC_DESIGNATED_INITIALIZER;
/**
  Callback function for FFT data:
  \param fft EZAudioFFT Reference

  \param updatedWithFFTData A pointer to a c-style array of floats

  \param bufferSize Number of elements in the FFT Data array

*/
- (void)fft:(EZAudioFFT * _Null_unspecified)fft updatedWithFFTData:(float * _Nonnull)fftData bufferSize:(vDSP_Length)bufferSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/**
  Plot the output from any node in an signal processing graph
*/
SWIFT_CLASS("_TtC8AudioKit16AKNodeOutputPlot")
@interface AKNodeOutputPlot : EZAudioPlot
/**
  The node whose output to graph
*/
@property (nonatomic, strong) AKNode * _Nullable node;
/**
  Required coder-based initialization (for use with Interface Builder)
  \param coder NSCoder

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Initialize the plot with the output from a given node and optional plot size
  \param input AKNode from which to get the plot data

  \param width Width of the view

  \param height Height of the view

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input frame:(CGRect)frame bufferSize:(NSInteger)bufferSize OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/**
  Object to handle notifications for events that can affect the audio
*/
SWIFT_CLASS("_TtC8AudioKit15AKNotifications")
@interface AKNotifications : NSObject
/**
  After the audio route is changed, (headphones plugged in, for example) AudioKit restarts,
  and engineRestartAfterRouteChange is sent.
  The userInfo dictionary of this notification contains the AVAudioSessionRouteChangeReasonKey
  and AVAudioSessionSilenceSecondaryAudioHintTypeKey keys, which provide information about the route change.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull engineRestartedAfterRouteChange;)
+ (NSString * _Nonnull)engineRestartedAfterRouteChange;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Operation-based effect
*/
SWIFT_CLASS("_TtC8AudioKit17AKOperationEffect")
@interface AKOperationEffect : AKNode
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Parameters for changing internal operations
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull parameters;
/**
  Initialize the effect with an input and a valid Sporth string
  \param input AKNode to use for processing

  \param sporth String of valid Sporth code

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input sporth:(NSString * _Nonnull)sporth OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Operation-based generator
*/
SWIFT_CLASS("_TtC8AudioKit20AKOperationGenerator")
@interface AKOperationGenerator : AKNode
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
@property (nonatomic, copy) NSString * _Nonnull sporth;
/**
  Parameters for changing internal operations
*/
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull parameters;
/**
  Initialize this generator node with a generic sporth stack and a triggering flag
  \param sporth String of valid Sporth code

*/
- (nonnull instancetype)initWithSporth:(NSString * _Nonnull)sporth OBJC_DESIGNATED_INITIALIZER;
/**
  Trigger the sound with current parameters
*/
- (void)trigger:(NSInteger)triggerNumber;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Reads from the table sequentially and repeatedly at given frequency. Linear
  interpolation is applied for table look up from internal phase values.
  \param frequency Frequency in cycles per second

  \param amplitude Output Amplitude.

  \param detuningOffset Frequency offset in Hz.

  \param detuningMultiplier Frequency detuning multiplier

*/
SWIFT_CLASS("_TtC8AudioKit12AKOscillator")
@interface AKOscillator : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  In cycles per second, or Hz.
*/
@property (nonatomic) double frequency;
/**
  Output Amplitude.
*/
@property (nonatomic) double amplitude;
/**
  Frequency offset in Hz.
*/
@property (nonatomic) double detuningOffset;
/**
  Frequency detuning multiplier
*/
@property (nonatomic) double detuningMultiplier;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize the oscillator with defaults
*/
- (nonnull instancetype)init;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
@end


/**
  Reads from the table sequentially and repeatedly at given frequency. Linear
  interpolation is applied for table look up from internal phase values.
  \param waveform The waveform of oscillation

  \param attackDuration Attack time

  \param decayDuration Decay time

  \param sustainLevel Sustain Level

  \param releaseDuration Release time

  \param detuningOffset Frequency offset in Hz.

  \param detuningMultiplier Frequency detuning multiplier

*/
SWIFT_CLASS("_TtC8AudioKit16AKOscillatorBank")
@interface AKOscillatorBank : AKPolyphonicNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Attack time
*/
@property (nonatomic) double attackDuration;
/**
  Decay time
*/
@property (nonatomic) double decayDuration;
/**
  Sustain Level
*/
@property (nonatomic) double sustainLevel;
/**
  Release time
*/
@property (nonatomic) double releaseDuration;
/**
  Frequency offset in Hz.
*/
@property (nonatomic) double detuningOffset;
/**
  Frequency detuning multiplier
*/
@property (nonatomic) double detuningMultiplier;
/**
  Initialize the oscillator with defaults
*/
- (nonnull instancetype)init;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)playWithNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stopWithNoteNumber:(NSInteger)noteNumber;
@end


/**
  Wrapper class for plotting audio from the final mix in a waveform plot
*/
SWIFT_CLASS("_TtC8AudioKit20AKOutputWaveformPlot")
@interface AKOutputWaveformPlot : EZAudioPlot
/**
  Initialize the plot in a frame
  \param frame CGRect in which to draw the plot

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  Initialize the plot in a frame with a different buffer size
  \param frame CGRect in which to draw the plot

  \param bufferSize size of the buffer - raise this number if the device struggles with generating the waveform

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame bufferSize:(NSInteger)bufferSize OBJC_DESIGNATED_INITIALIZER;
/**
  Required coder-based initialization (for use with Interface Builder)
  \param coder NSCoder

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Create a View with the plot (usually for playgrounds)
  \param width Width of the view

  \param height Height of the view

*/
+ (UIView * _Nonnull)createViewWithWidth:(CGFloat)width height:(CGFloat)height;
@end


/**
  Pulse-Width Modulating Oscillator
  \param frequency In cycles per second, or Hz.

  \param amplitude Output amplitude

  \param pulseWidth Duty cycle width (range 0-1).

  \param detuningOffset Frequency offset in Hz.

  \param detuningMultiplier Frequency detuning multiplier

*/
SWIFT_CLASS("_TtC8AudioKit15AKPWMOscillator")
@interface AKPWMOscillator : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  In cycles per second, or Hz.
*/
@property (nonatomic) double frequency;
/**
  Output amplitude
*/
@property (nonatomic) double amplitude;
/**
  Frequency offset in Hz.
*/
@property (nonatomic) double detuningOffset;
/**
  Frequency detuning multiplier
*/
@property (nonatomic) double detuningMultiplier;
/**
  Duty cycle width (range 0-1).
*/
@property (nonatomic) double pulseWidth;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize the oscillator with defaults
  \param frequency In cycles per second, or Hz.

*/
- (nonnull instancetype)init;
/**
  Initialize this oscillator node
  \param frequency In cycles per second, or Hz.

  \param amplitude Output amplitude

  \param pulseWidth Duty cycle width (range 0-1).

  \param detuningOffset Frequency offset in Hz.

  \param detuningMultiplier Frequency detuning multiplier

*/
- (nonnull instancetype)initWithFrequency:(double)frequency amplitude:(double)amplitude pulseWidth:(double)pulseWidth detuningOffset:(double)detuningOffset detuningMultiplier:(double)detuningMultiplier OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
@end


/**
  Pulse-Width Modulating Oscillator Bank
  \param pulseWidth Duty cycle width (range 0-1).

  \param attackDuration Attack time

  \param decayDuration Decay time

  \param sustainLevel Sustain Level

  \param releaseDuration Release time

  \param detuningOffset Frequency offset in Hz.

  \param detuningMultiplier Frequency detuning multiplier

*/
SWIFT_CLASS("_TtC8AudioKit19AKPWMOscillatorBank")
@interface AKPWMOscillatorBank : AKPolyphonicNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Duty cycle width (range 0-1).
*/
@property (nonatomic) double pulseWidth;
/**
  Attack time
*/
@property (nonatomic) double attackDuration;
/**
  Decay time
*/
@property (nonatomic) double decayDuration;
/**
  Sustain Level
*/
@property (nonatomic) double sustainLevel;
/**
  Release time
*/
@property (nonatomic) double releaseDuration;
/**
  Frequency offset in Hz.
*/
@property (nonatomic) double detuningOffset;
/**
  Frequency detuning multiplier
*/
@property (nonatomic) double detuningMultiplier;
/**
  Initialize the oscillator with defaults
  \param frequency In cycles per second, or Hz.

*/
- (nonnull instancetype)init;
/**
  Initialize this oscillator node
  \param pulseWidth Duty cycle width (range 0-1).

  \param attackDuration Attack time

  \param decayDuration Decay time

  \param sustainLevel Sustain Level

  \param releaseDuration Release time

  \param detuningOffset Frequency offset in Hz.

  \param detuningMultiplier Frequency detuning multiplier

*/
- (nonnull instancetype)initWithPulseWidth:(double)pulseWidth attackDuration:(double)attackDuration decayDuration:(double)decayDuration sustainLevel:(double)sustainLevel releaseDuration:(double)releaseDuration detuningOffset:(double)detuningOffset detuningMultiplier:(double)detuningMultiplier OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)playWithNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stopWithNoteNumber:(NSInteger)noteNumber;
@end


/**
  Stereo Panner
  \param input Input node to process

  \param pan Panning. A value of -1 is hard left, and a value of 1 is hard right, and 0 is center.

*/
SWIFT_CLASS("_TtC8AudioKit8AKPanner")
@interface AKPanner : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Panning. A value of -1 is hard left, and a value of 1 is hard right, and 0 is center.
*/
@property (nonatomic) double pan;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this panner node
  \param input Input node to process

  \param pan Panning. A value of -1 is hard left, and a value of 1 is hard right, and 0 is center.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input pan:(double)pan OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s ParametricEQ Audio Unit
  \param input Input node to process

  \param centerFrequency Center Freq (Hz) ranges from 20 to 22050 (Default: 2000)

  \param q Q (Hz) ranges from 0.1 to 20 (Default: 1.0)

  \param gain Gain (dB) ranges from -20 to 20 (Default: 0)

*/
SWIFT_CLASS("_TtC8AudioKit14AKParametricEQ")
@interface AKParametricEQ : AKNode
/**
  Center Freq (Hz) ranges from 20 to 22050 (Default: 2000)
*/
@property (nonatomic) double centerFrequency;
/**
  Q (Hz) ranges from 0.1 to 20 (Default: 1.0)
*/
@property (nonatomic) double q;
/**
  Gain (dB) ranges from -20 to 20 (Default: 0)
*/
@property (nonatomic) double gain;
/**
  Dry/Wet Mix (Default 100)
*/
@property (nonatomic) double dryWetMix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the parametric eq node
  \param input Input node to process

  \param centerFrequency Center Frequency (Hz) ranges from 20 to 22050 (Default: 2000)

  \param q Q (Hz) ranges from 0.1 to 20 (Default: 1.0)

  \param gain Gain (dB) ranges from -20 to 20 (Default: 0)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency q:(double)q gain:(double)gain OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s PeakLimiter Audio Unit
  \param input Input node to process

  \param attackTime Attack Time (Secs) ranges from 0.001 to 0.03 (Default: 0.012)

  \param decayTime Decay Time (Secs) ranges from 0.001 to 0.06 (Default: 0.024)

  \param preGain Pre Gain (dB) ranges from -40 to 40 (Default: 0)

*/
SWIFT_CLASS("_TtC8AudioKit13AKPeakLimiter")
@interface AKPeakLimiter : AKNode
/**
  Attack Time (Secs) ranges from 0.001 to 0.03 (Default: 0.012)
*/
@property (nonatomic) double attackTime;
/**
  Decay Time (Secs) ranges from 0.001 to 0.06 (Default: 0.024)
*/
@property (nonatomic) double decayTime;
/**
  Pre Gain (dB) ranges from -40 to 40 (Default: 0)
*/
@property (nonatomic) double preGain;
/**
  Dry/Wet Mix (Default 100)
*/
@property (nonatomic) double dryWetMix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the peak limiter node
  \param input Input node to process

  \param attackTime Attack Time (Secs) ranges from 0.001 to 0.03 (Default: 0.012)

  \param decayTime Decay Time (Secs) ranges from 0.001 to 0.06 (Default: 0.024)

  \param preGain Pre Gain (dB) ranges from -40 to 40 (Default: 0)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input attackTime:(double)attackTime decayTime:(double)decayTime preGain:(double)preGain OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This is an implementation of Zoelzer’s parametric equalizer filter.
  \param input Input node to process

  \param centerFrequency Center frequency.

  \param gain Amount at which the center frequency value shall be increased or decreased. A value of 1 is a flat response.

  \param q Q of the filter. sqrt(0.5) is no resonance.

*/
SWIFT_CLASS("_TtC8AudioKit34AKPeakingParametricEqualizerFilter")
@interface AKPeakingParametricEqualizerFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Center frequency.
*/
@property (nonatomic) double centerFrequency;
/**
  Amount at which the center frequency value shall be increased or decreased. A value of 1 is a flat response.
*/
@property (nonatomic) double gain;
/**
  Q of the filter. sqrt(0.5) is no resonance.
*/
@property (nonatomic) double q;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this equalizer node
  \param input Input node to process

  \param centerFrequency Center frequency.

  \param gain Amount at which the center frequency value shall be increased or decreased. A value of 1 is a flat response.

  \param q Q of the filter. sqrt(0.5) is no resonance.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input centerFrequency:(double)centerFrequency gain:(double)gain q:(double)q OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Phase Distortion Oscillator
  \param frequency In cycles per second, or Hz.

  \param amplitude Output amplitude

  \param phaseDistortion Duty cycle width (range 0-1).

  \param detuningOffset Frequency offset in Hz.

  \param detuningMultiplier Frequency detuning multiplier

*/
SWIFT_CLASS("_TtC8AudioKit27AKPhaseDistortionOscillator")
@interface AKPhaseDistortionOscillator : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  In cycles per second, or Hz.
*/
@property (nonatomic) double frequency;
/**
  Output amplitude
*/
@property (nonatomic) double amplitude;
/**
  Frequency offset in Hz.
*/
@property (nonatomic) double detuningOffset;
/**
  Frequency detuning multiplier
*/
@property (nonatomic) double detuningMultiplier;
/**
  Duty cycle width (range -1 - -1).
*/
@property (nonatomic) double phaseDistortion;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize the oscillator with defaults
*/
- (nonnull instancetype)init;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
@end


/**
  Phase Distortion Oscillator Bank
  \param waveform The waveform of oscillation

  \param phaseDistortion Duty cycle width (range 0-1).

  \param attackDuration Attack time

  \param decayDuration Decay time

  \param sustainLevel Sustain Level

  \param releaseDuration Release time

  \param detuningOffset Frequency offset in Hz.

  \param detuningMultiplier Frequency detuning multiplier

*/
SWIFT_CLASS("_TtC8AudioKit31AKPhaseDistortionOscillatorBank")
@interface AKPhaseDistortionOscillatorBank : AKPolyphonicNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Duty cycle width (range -1 - 1).
*/
@property (nonatomic) double phaseDistortion;
/**
  Attack time
*/
@property (nonatomic) double attackDuration;
/**
  Decay time
*/
@property (nonatomic) double decayDuration;
/**
  Sustain Level
*/
@property (nonatomic) double sustainLevel;
/**
  Release time
*/
@property (nonatomic) double releaseDuration;
/**
  Frequency offset in Hz.
*/
@property (nonatomic) double detuningOffset;
/**
  Frequency detuning multiplier
*/
@property (nonatomic) double detuningMultiplier;
/**
  Initialize the oscillator with defaults
*/
- (nonnull instancetype)init;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)playWithNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stopWithNoteNumber:(NSInteger)noteNumber;
@end


/**
  This is a phase locked vocoder. It has the ability to play back an audio
  file loaded into an ftable like a sampler would. Unlike a typical sampler,
  mincer allows time and pitch to be controlled separately.
  \param audioFileURL Location of the audio file to use.

  \param position Position in time. When non-changing it will do a spectral freeze of a the current point in time.

  \param amplitude Amplitude.

  \param pitchRatio Pitch ratio. A value of. 1  normal, 2 is double speed, 0.5 is halfspeed, etc.

*/
SWIFT_CLASS("_TtC8AudioKit20AKPhaseLockedVocoder")
@interface AKPhaseLockedVocoder : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Position in time. When non-changing it will do a spectral freeze of a the current point in time.
*/
@property (nonatomic) double position;
/**
  Amplitude.
*/
@property (nonatomic) double amplitude;
/**
  Pitch ratio. A value of. 1  normal, 2 is double speed, 0.5 is halfspeed, etc.
*/
@property (nonatomic) double pitchRatio;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this Phase-Locked Vocoder node
  \param audioFileURL Location of the audio file to use.

  \param position Position in time. When non-changing it will do a spectral freeze of a the current point in time.

  \param amplitude Amplitude.

  \param pitchRatio Pitch ratio. A value of. 1  normal, 2 is double speed, 0.5 is halfspeed, etc.

*/
- (nonnull instancetype)initWithFile:(AVAudioFile * _Nonnull)file position:(double)position amplitude:(double)amplitude pitchRatio:(double)pitchRatio OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Faust-based pink noise generator
  \param amplitude Amplitude. (Value between 0-1).

*/
SWIFT_CLASS("_TtC8AudioKit11AKPinkNoise")
@interface AKPinkNoise : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Amplitude. (Value between 0-1).
*/
@property (nonatomic) double amplitude;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this noise node
  \param amplitude Amplitude. (Value between 0-1).

*/
- (nonnull instancetype)initWithAmplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Faust-based pitch shfiter
  \param input Input node to process

  \param shift Pitch shift (in semitones)

  \param windowSize Window size (in samples)

  \param crossfade Crossfade (in samples)

*/
SWIFT_CLASS("_TtC8AudioKit14AKPitchShifter")
@interface AKPitchShifter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Pitch shift (in semitones)
*/
@property (nonatomic) double shift;
/**
  Window size (in samples)
*/
@property (nonatomic) double windowSize;
/**
  Crossfade (in samples)
*/
@property (nonatomic) double crossfade;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this pitchshifter node
  \param input Input node to process

  \param shift Pitch shift (in semitones)

  \param windowSize Window size (in samples)

  \param crossfade Crossfade (in samples)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input shift:(double)shift windowSize:(double)windowSize crossfade:(double)crossfade OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UILabel;

SWIFT_CLASS("_TtC8AudioKit16AKPlaygroundView")
@interface AKPlaygroundView : UIView
@property (nonatomic) CGFloat elementHeight;
@property (nonatomic) NSInteger yPosition;
@property (nonatomic) NSInteger spacing;
- (nonnull instancetype)initWithFrame:(CGRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)setup;
- (UILabel * _Nonnull)addTitle:(NSString * _Nonnull)text;
- (UILabel * _Nonnull)addLabel:(NSString * _Nonnull)text;
- (void)addSubview:(UIView * _Nonnull)view;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Karplus-Strong plucked string instrument.
  \param frequency Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.

  \param amplitude Amplitude

  \param lowestFrequency This frequency is used to allocate all the buffers needed for the delay. This should be the lowest frequency you plan on using.

*/
SWIFT_CLASS("_TtC8AudioKit15AKPluckedString")
@interface AKPluckedString : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.
*/
@property (nonatomic) double frequency;
/**
  Amplitude
*/
@property (nonatomic) double amplitude;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize the pluck with defaults
*/
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Initialize this pluck node
  \param frequency Variable frequency. Values less than the initial frequency will be doubled until it is greater than that.

  \param amplitude Amplitude

  \param lowestFrequency This frequency is used to allocate all the buffers needed for the delay. This should be the lowest frequency you plan on using.

*/
- (nonnull instancetype)initWithFrequency:(double)frequency amplitude:(double)amplitude lowestFrequency:(double)lowestFrequency OBJC_DESIGNATED_INITIALIZER;
/**
  Trigger the sound with an optional set of parameters
  <ul>
    <li>
      frequency: Frequency in Hz
    </li>
    <li>
      amplitude amplitude: Volume
    </li>
  </ul>
*/
- (void)triggerWithFrequency:(double)frequency amplitude:(double)amplitude;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
@end



SWIFT_CLASS("_TtC8AudioKit18AKPresetLoaderView")
@interface AKPresetLoaderView : UIView
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithPresets:(NSArray<NSString *> * _Nonnull)presets frame:(CGRect)frame callback:(void (^ _Nonnull)(NSString * _Nonnull))callback OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8AudioKit16AKPropertySlider")
@interface AKPropertySlider : UIView
@property (nonatomic) double value;
@property (nonatomic) double minimum;
@property (nonatomic) double maximum;
@property (nonatomic, copy) NSString * _Nonnull property;
@property (nonatomic, copy) NSString * _Nonnull format;
@property (nonatomic, strong) UIColor * _Nonnull sliderColor;
@property (nonatomic, strong) UIColor * _Nonnull textColor;
@property (nonatomic) CGFloat fontSize;
@property (nonatomic, copy) void (^ _Nullable callback)(double);
@property (nonatomic) CGPoint lastTouch;
- (nonnull instancetype)initWithProperty:(NSString * _Nonnull)property format:(NSString * _Nonnull)format value:(double)value minimum:(double)minimum maximum:(double)maximum color:(UIColor * _Nonnull)color frame:(CGRect)frame callback:(void (^ _Nonnull)(double))callback OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL requiresConstraintBasedLayout;)
+ (BOOL)requiresConstraintBasedLayout;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (double)randomize;
- (void)drawRect:(CGRect)rect;
@end


/**
  The output for reson appears to be very hot, so take caution when using this
  module.
  \param input Input node to process

  \param frequency Center frequency of the filter, or frequency position of the peak response.

  \param bandwidth Bandwidth of the filter.

*/
SWIFT_CLASS("_TtC8AudioKit16AKResonantFilter")
@interface AKResonantFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Center frequency of the filter, or frequency position of the peak response.
*/
@property (nonatomic) double frequency;
/**
  Bandwidth of the filter.
*/
@property (nonatomic) double bandwidth;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param frequency Center frequency of the filter, or frequency position of the peak response.

  \param bandwidth Bandwidth of the filter.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input frequency:(double)frequency bandwidth:(double)bandwidth OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8AudioKit30AKResourcesAudioFileLoaderView")
@interface AKResourcesAudioFileLoaderView : UIView
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithPlayer:(AKAudioPlayer * _Nonnull)player filenames:(NSArray<NSString *> * _Nonnull)filenames frame:(CGRect)frame;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/**
  AudioKit version of Apple’s Reverb Audio Unit
  \param input AKNode to reverberate

  \param dryWetMix Amount of processed signal (Default: 0.5, Minimum: 0, Maximum: 1)

*/
SWIFT_CLASS("_TtC8AudioKit8AKReverb")
@interface AKReverb : AKNode
/**
  Dry/Wet Mix (Default 0.5)
*/
@property (nonatomic) double dryWetMix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the reverb node
  \param input AKNode to reverberate

  \param dryWetMix Amount of processed signal (Default: 0.5, Minimum: 0, Maximum: 1)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input dryWetMix:(double)dryWetMix OBJC_DESIGNATED_INITIALIZER;
/**
  Load an Apple Factory Preset
*/
- (void)loadFactoryPreset:(AVAudioUnitReverbPreset)preset;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s Reverb2 Audio Unit
  \param input Input node to process

  \param dryWetMix Dry Wet Mix (CrossFade) ranges from 0 to  (Default: 0.5)

  \param gain Gain (Decibels) ranges from -20 to 20 (Default: 0)

  \param minDelayTime Min Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.008)

  \param maxDelayTime Max Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.050)

  \param decayTimeAt0Hz Decay Time At0 Hz (Secs) ranges from 0.001 to 20.0 (Default: 1.0)

  \param decayTimeAtNyquist Decay Time At Nyquist (Secs) ranges from 0.001 to 20.0 (Default: 0.5)

  \param randomizeReflections Randomize Reflections (Integer) ranges from 1 to 1000 (Default: 1)

*/
SWIFT_CLASS("_TtC8AudioKit9AKReverb2")
@interface AKReverb2 : AKNode
/**
  Dry Wet Mix (CrossFade) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double dryWetMix;
/**
  Gain (Decibels) ranges from -20 to 20 (Default: 0)
*/
@property (nonatomic) double gain;
/**
  Min Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.008)
*/
@property (nonatomic) double minDelayTime;
/**
  Max Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.050)
*/
@property (nonatomic) double maxDelayTime;
/**
  Decay Time At0 Hz (Secs) ranges from 0.001 to 20.0 (Default: 1.0)
*/
@property (nonatomic) double decayTimeAt0Hz;
/**
  Decay Time At Nyquist (Secs) ranges from 0.001 to 20.0 (Default: 0.5)
*/
@property (nonatomic) double decayTimeAtNyquist;
/**
  Randomize Reflections (Integer) ranges from 1 to 1000 (Default: 1)
*/
@property (nonatomic) double randomizeReflections;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the reverb2 node
  \param input Input node to process

  \param dryWetMix Dry Wet Mix (CrossFade) ranges from 0 to 1 (Default: 0.5)

  \param gain Gain (Decibels) ranges from -20 to 20 (Default: 0)

  \param minDelayTime Min Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.008)

  \param maxDelayTime Max Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.050)

  \param decayTimeAt0Hz Decay Time At0 Hz (Secs) ranges from 0.001 to 20.0 (Default: 1.0)

  \param decayTimeAtNyquist Decay Time At Nyquist (Secs) ranges from 0.001 to 20.0 (Default: 0.5)

  \param randomizeReflections Randomize Reflections (Integer) ranges from 1 to 1000 (Default: 1)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input dryWetMix:(double)dryWetMix gain:(double)gain minDelayTime:(double)minDelayTime maxDelayTime:(double)maxDelayTime decayTimeAt0Hz:(double)decayTimeAt0Hz decayTimeAtNyquist:(double)decayTimeAtNyquist randomizeReflections:(double)randomizeReflections OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s Ring Modulator from the Distortion Audio Unit
  \param input Input node to process

  \param frequency1 Frequency1 (Hertz) ranges from 0.5 to 8000 (Default: 100)

  \param frequency2 Frequency2 (Hertz) ranges from 0.5 to 8000 (Default: 100)

  \param balance Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param mix Mix (Normalized Value) ranges from 0 to 1 (Default: 1)

*/
SWIFT_CLASS("_TtC8AudioKit15AKRingModulator")
@interface AKRingModulator : AKNode
/**
  Frequency1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
*/
@property (nonatomic) double frequency1;
/**
  Frequency2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
*/
@property (nonatomic) double frequency2;
/**
  Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
*/
@property (nonatomic) double balance;
/**
  Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
*/
@property (nonatomic) double mix;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic) BOOL isStarted;
/**
  Initialize the ring modulator node
  \param input Input node to process

  \param frequency1 Frequency1 (Hertz) ranges from 0.5 to 8000 (Default: 100)

  \param frequency2 Frequency2 (Hertz) ranges from 0.5 to 8000 (Default: 100)

  \param balance Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)

  \param mix Mix (Normalized Value) ranges from 0 to 1 (Default: 1)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input frequency1:(double)frequency1 frequency2:(double)frequency2 balance:(double)balance mix:(double)mix OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Emulation of the Roland TB-303 filter
  \param input Input node to process

  \param cutoffFrequency Cutoff frequency. (in Hertz)

  \param resonance Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing, analogue synths generally allow resonances to be above 1.

  \param distortion Distortion. Value is typically 2.0; deviation from this can cause stability issues.

  \param resonanceAsymmetry Asymmetry of resonance. Value is between 0-1

*/
SWIFT_CLASS("_TtC8AudioKit19AKRolandTB303Filter")
@interface AKRolandTB303Filter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Cutoff frequency. (in Hertz)
*/
@property (nonatomic) double cutoffFrequency;
/**
  Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing, analogue synths generally allow resonances to be above 1.
*/
@property (nonatomic) double resonance;
/**
  Distortion. Value is typically 2.0; deviation from this can cause stability issues.
*/
@property (nonatomic) double distortion;
/**
  Asymmetry of resonance. Value is between 0-1
*/
@property (nonatomic) double resonanceAsymmetry;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param cutoffFrequency Cutoff frequency. (in Hertz)

  \param resonance Resonance, generally < 1, but not limited to it. Higher than 1 resonance values might cause aliasing, analogue synths generally allow resonances to be above 1.

  \param distortion Distortion. Value is typically 2.0; deviation from this can cause stability issues.

  \param resonanceAsymmetry Asymmetry of resonance. Value is between 0-1

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance distortion:(double)distortion resonanceAsymmetry:(double)resonanceAsymmetry OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Wrapper class for plotting audio from the final mix in a rolling plot
*/
SWIFT_CLASS("_TtC8AudioKit19AKRollingOutputPlot")
@interface AKRollingOutputPlot : EZAudioPlot
/**
  Initialize the plot in a frame
  \param frame CGRect in which to draw the plot

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/**
  Initialize the plot in a frame with a different buffer size
  \param frame CGRect in which to draw the plot

  \param bufferSize size of the buffer - raise this number if the device struggles with generating the waveform

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame bufferSize:(NSInteger)bufferSize OBJC_DESIGNATED_INITIALIZER;
/**
  Required coder-based initialization (for use with Interface Builder)
  \param coder NSCoder

*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Create a View with the plot (usually for playgrounds)
  \param width Width of the view

  \param height Height of the view

*/
+ (UIView * _Nonnull)createViewWithWidth:(CGFloat)width height:(CGFloat)height;
@end


@class AVAudioFormat;
@class AVAudioSession;

/**
  Global settings for AudioKit
*/
SWIFT_CLASS("_TtC8AudioKit10AKSettings")
@interface AKSettings : NSObject
/**
  The sample rate in Hertz
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double sampleRate;)
+ (double)sampleRate;
+ (void)setSampleRate:(double)value;
/**
  Number of audio channels: 2 for stereo, 1 for mono
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) uint32_t numberOfChannels;)
+ (uint32_t)numberOfChannels;
+ (void)setNumberOfChannels:(uint32_t)value;
/**
  Whether we should be listening to audio input (microphone)
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL audioInputEnabled;)
+ (BOOL)audioInputEnabled;
+ (void)setAudioInputEnabled:(BOOL)value;
/**
  Whether to allow audio playback to override the mute setting
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL playbackWhileMuted;)
+ (BOOL)playbackWhileMuted;
+ (void)setPlaybackWhileMuted:(BOOL)value;
/**
  Global audio format AudioKit will default to
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AVAudioFormat * _Nonnull audioFormat;)
+ (AVAudioFormat * _Nonnull)audioFormat;
/**
  Whether to DefaultToSpeaker when audio input is enabled
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL defaultToSpeaker;)
+ (BOOL)defaultToSpeaker;
+ (void)setDefaultToSpeaker:(BOOL)value;
/**
  Global default rampTime value
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double rampTime;)
+ (double)rampTime;
+ (void)setRampTime:(double)value;
/**
  Allows AudioKit to send Notifications
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL notificationsEnabled;)
+ (BOOL)notificationsEnabled;
+ (void)setNotificationsEnabled:(BOOL)value;
/**
  If set to true, Recording will stop after some delay to compensate
  latency between time recording is stopped and time it is written to file
  If set to false (the default value) , stopping record will be immediate,
  even if the last audio frames haven’t been recorded to file yet.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL fixTruncatedRecordings;)
+ (BOOL)fixTruncatedRecordings;
+ (void)setFixTruncatedRecordings:(BOOL)value;
/**
  Enable AudioKit AVAudioSession Category Management
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL disableAVAudioSessionCategoryManagement;)
+ (BOOL)disableAVAudioSessionCategoryManagement;
+ (void)setDisableAVAudioSessionCategoryManagement:(BOOL)value;
/**
  Shortcut for AVAudioSession.sharedInstance()
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AVAudioSession * _Nonnull session;)
+ (AVAudioSession * _Nonnull)session;
/**
  Checks if headphones are plugged
  Returns true if headPhones are plugged, otherwise return false
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL headPhonesPlugged;)
+ (BOOL)headPhonesPlugged;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  AKStringResonator passes the input through a network composed of comb,
  low-pass and all-pass filters, similar to the one used in some versions of
  the Karplus-Strong algorithm, creating a string resonator effect. The
  fundamental frequency of the “string” is controlled by the
  fundamentalFrequency.  This operation can be used to simulate sympathetic
  resonances to an input signal.
  \param input Input node to process

  \param fundamentalFrequency Fundamental frequency of string.

  \param feedback Feedback amount (value between 0-1). A value close to 1 creates a slower decay and a more pronounced resonance. Small values may leave the input signal unaffected. Depending on the filter frequency, typical values are > .9.

*/
SWIFT_CLASS("_TtC8AudioKit17AKStringResonator")
@interface AKStringResonator : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Fundamental frequency of string.
*/
@property (nonatomic) double fundamentalFrequency;
/**
  Feedback amount (value between 0-1). A value close to 1 creates a slower decay and a more pronounced resonance. Small values may leave the input signal unaffected. Depending on the filter frequency, typical values are > .9.
*/
@property (nonatomic) double feedback;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param fundamentalFrequency Fundamental frequency of string.

  \param feedback Feedback amount (value between 0-1). A value close to 1 creates a slower decay and a more pronounced resonance. Small values may leave the input signal unaffected. Depending on the filter frequency, typical values are > .9.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input fundamentalFrequency:(double)fundamentalFrequency feedback:(double)feedback OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Kick Drum Synthesizer Instrument
*/
SWIFT_CLASS("_TtC8AudioKit11AKSynthKick")
@interface AKSynthKick : AKMIDIInstrument
/**
  Create the synth kick voice
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)playWithNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity;
/**
  Unneeded stop function since the sounds all decay quickly
*/
- (void)stopWithNoteNumber:(NSInteger)noteNumber;
@end


/**
  Snare Drum Synthesizer Instrument
*/
SWIFT_CLASS("_TtC8AudioKit12AKSynthSnare")
@interface AKSynthSnare : AKMIDIInstrument
/**
  Create the synth snare voice
*/
- (nonnull instancetype)initWithDuration:(double)duration resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)playWithNoteNumber:(NSInteger)noteNumber velocity:(NSInteger)velocity;
/**
  Unneeded stop function since the sounds all decay quickly
*/
- (void)stopWithNoteNumber:(NSInteger)noteNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Distortion using a modified hyperbolic tangent function.
  \param input Input node to process

  \param pregain Determines the amount of gain applied to the signal before waveshaping. A value of 1 gives slight distortion.

  \param postgain Gain applied after waveshaping

  \param postiveShapeParameter Shape of the positive part of the signal. A value of 0 gets a flat clip.

  \param negativeShapeParameter Like the positive shape parameter, only for the negative part.

*/
SWIFT_CLASS("_TtC8AudioKit16AKTanhDistortion")
@interface AKTanhDistortion : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Determines the amount of gain applied to the signal before waveshaping. A value of 1 gives slight distortion.
*/
@property (nonatomic) double pregain;
/**
  Gain applied after waveshaping
*/
@property (nonatomic) double postgain;
/**
  Shape of the positive part of the signal. A value of 0 gets a flat clip.
*/
@property (nonatomic) double postiveShapeParameter;
/**
  Like the positive shape parameter, only for the negative part.
*/
@property (nonatomic) double negativeShapeParameter;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this distortion node
  \param input Input node to process

  \param pregain Determines the amount of gain applied to the signal before waveshaping. A value of 1 gives slight distortion.

  \param postgain Gain applied after waveshaping

  \param postiveShapeParameter Shape of the positive part of the signal. A value of 0 gets a flat clip.

  \param negativeShapeParameter Like the positive shape parameter, only for the negative part.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input pregain:(double)pregain postgain:(double)postgain postiveShapeParameter:(double)postiveShapeParameter negativeShapeParameter:(double)negativeShapeParameter OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  This is primarily for the telephone page in the Synthesis playground
*/
SWIFT_CLASS("_TtC8AudioKit15AKTelephoneView")
@interface AKTelephoneView : UIView
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame callback:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))callback OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
+ (void)drawKeyWithText:(NSString * _Nonnull)text numeral:(NSString * _Nonnull)numeral isPressed:(BOOL)isPressed;
+ (void)drawCenteredKeyWithNumeral:(NSString * _Nonnull)numeral isPressed:(BOOL)isPressed;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/**
  Testing node
*/
SWIFT_CLASS("_TtC8AudioKit8AKTester")
@interface AKTester : AKNode
/**
  Calculate the MD5
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull MD5;
/**
  Flag on whether or not the test is still in progress
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this test node
  \param input AKNode to test

  \param sample Number of sample to product

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input samples:(NSInteger)samples OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  3-pole (18 db/oct slope) Low-Pass filter with resonance and tanh distortion.
  \param input Input node to process

  \param distortion Distortion amount.  Zero gives a clean output. Greater than zero adds tanh distortion controlled by the filter parameters, in such a way that both low cutoff and high resonance increase the distortion amount.

  \param cutoffFrequency Filter cutoff frequency in Hertz.

  \param resonance Resonance. Usually a value in the range 0-1. A value of 1.0 will self oscillate at the cutoff frequency. Values slightly greater than 1 are possible for more sustained oscillation and an “overdrive” effect.

*/
SWIFT_CLASS("_TtC8AudioKit24AKThreePoleLowpassFilter")
@interface AKThreePoleLowpassFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Distortion amount.  Zero gives a clean output. Greater than zero adds tanh distortion controlled by the filter parameters, in such a way that both low cutoff and high resonance increase the distortion amount.
*/
@property (nonatomic) double distortion;
/**
  Filter cutoff frequency in Hertz.
*/
@property (nonatomic) double cutoffFrequency;
/**
  Resonance. Usually a value in the range 0-1. A value of 1.0 will self oscillate at the cutoff frequency. Values slightly greater than 1 are possible for more sustained oscillation and an “overdrive” effect.
*/
@property (nonatomic) double resonance;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param distortion Distortion amount.  Zero gives a clean output. Greater than zero adds tanh distortion controlled by the filter parameters, in such a way that both low cutoff and high resonance increase the distortion amount.

  \param cutoffFrequency Filter cutoff frequency in Hertz.

  \param resonance Resonance. Usually a value in the range 0-1. A value of 1.0 will self oscillate at the cutoff frequency. Values slightly greater than 1 are possible for more sustained oscillation and an “overdrive” effect.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input distortion:(double)distortion cutoffFrequency:(double)cutoffFrequency resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s TimePitch Audio Unit
  \param input Input node to process

  \param rate Rate (rate) ranges from 0.03125 to 32.0 (Default: 1.0)

  \param pitch Pitch (Cents) ranges from -2400 to 2400 (Default: 1.0)

  \param overlap Overlap (generic) ranges from 3.0 to 32.0 (Default: 8.0)

*/
SWIFT_CLASS("_TtC8AudioKit11AKTimePitch")
@interface AKTimePitch : AKNode
/**
  Rate (rate) ranges from 0.03125 to 32.0 (Default: 1.0)
*/
@property (nonatomic) double rate;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Pitch (Cents) ranges from -2400 to 2400 (Default: 1.0)
*/
@property (nonatomic) double pitch;
/**
  Overlap (generic) ranges from 3.0 to 32.0 (Default: 8.0)
*/
@property (nonatomic) double overlap;
/**
  Initialize the time pitch node
  \param input Input node to process

  \param rate Rate (rate) ranges from 0.03125 to 32.0 (Default: 1.0)

  \param pitch Pitch (Cents) ranges from -2400 to 2400 (Default: 1.0)

  \param overlap Overlap (generic) ranges from 3.0 to 32.0 (Default: 8.0)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input rate:(double)rate pitch:(double)pitch overlap:(double)overlap OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A complement to the AKLowPassFilter.
  \param input Input node to process

  \param halfPowerPoint Half-Power Point in Hertz. Half power is defined as peak power / square root of 2.

*/
SWIFT_CLASS("_TtC8AudioKit22AKToneComplementFilter")
@interface AKToneComplementFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Half-Power Point in Hertz. Half power is defined as peak power / square root of 2.
*/
@property (nonatomic) double halfPowerPoint;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param halfPowerPoint Half-Power Point in Hertz. Half power is defined as peak power / square root of 2.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input halfPowerPoint:(double)halfPowerPoint OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A first-order recursive low-pass filter with variable frequency response.
  \param input Input node to process

  \param halfPowerPoint The response curve’s half-power point, in Hertz. Half power is defined as peak power / root 2.

*/
SWIFT_CLASS("_TtC8AudioKit12AKToneFilter")
@interface AKToneFilter : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  The response curve’s half-power point, in Hertz. Half power is defined as peak power / root 2.
*/
@property (nonatomic) double halfPowerPoint;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this filter node
  \param input Input node to process

  \param halfPowerPoint The response curve’s half-power point, in Hertz. Half power is defined as peak power / root 2.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input halfPowerPoint:(double)halfPowerPoint OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Table-lookup tremolo with linear interpolation
  \param input Input node to process

  \param frequency Frequency (Hz)

  \param depth Depth

*/
SWIFT_CLASS("_TtC8AudioKit9AKTremolo")
@interface AKTremolo : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Frequency (Hz)
*/
@property (nonatomic) double frequency;
/**
  Depth
*/
@property (nonatomic) double depth;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  AudioKit version of Apple’s VariSpeed Audio Unit
  \param input Input node to process

  \param rate Rate (rate) ranges from 0.25 to 4.0 (Default: 1.0)

*/
SWIFT_CLASS("_TtC8AudioKit11AKVariSpeed")
@interface AKVariSpeed : AKNode
/**
  Rate (rate) ranges form 0.25 to 4.0 (Default: 1.0)
*/
@property (nonatomic) double rate;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize the varispeed node
  \param input Input node to process

  \param rate Rate (rate) ranges from 0.25 to 4.0 (Default: 1.0)

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input rate:(double)rate OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A delay line with cubic interpolation.
  \param input Input node to process

  \param time Delay time (in seconds) that can be changed during performance. This value must not exceed the maximum delay time.

  \param feedback Feedback amount. Should be a value between 0-1.

  \param maximumDelayTime The maximum delay time, in seconds.

*/
SWIFT_CLASS("_TtC8AudioKit15AKVariableDelay")
@interface AKVariableDelay : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Delay time (in seconds) that can be changed during performance. This value must not exceed the maximum delay time.
*/
@property (nonatomic) double time;
/**
  Feedback amount. Should be a value between 0-1.
*/
@property (nonatomic) double feedback;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this delay node
  \param input Input node to process

  \param time Delay time (in seconds) that can be changed during performance. This value must not exceed the maximum delay time.

  \param feedback Feedback amount. Should be a value between 0-1.

  \param maximumDelayTime The maximum delay time, in seconds.

*/
- (nonnull instancetype)init:(AKNode * _Nonnull)input time:(double)time feedback:(double)feedback maximumDelayTime:(double)maximumDelayTime OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  White noise generator
  \param amplitude Amplitude. (Value between 0-1).

*/
SWIFT_CLASS("_TtC8AudioKit12AKWhiteNoise")
@interface AKWhiteNoise : AKNode
/**
  Ramp Time represents the speed at which parameters are allowed to change
*/
@property (nonatomic) double rampTime;
/**
  Amplitude. (Value between 0-1).
*/
@property (nonatomic) double amplitude;
/**
  Tells whether the node is processing (ie. started, playing, or active)
*/
@property (nonatomic, readonly) BOOL isStarted;
/**
  Initialize this noise node
  \param amplitude Amplitude. (Value between 0-1).

*/
- (nonnull instancetype)initWithAmplitude:(double)amplitude OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start, play, or activate the node, all do the same thing
*/
- (void)start;
/**
  Function to stop or bypass the node, both are equivalent
*/
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class AVAudioEngine;

/**
  Top level AudioKit managing class
*/
SWIFT_CLASS("_TtC8AudioKit8AudioKit")
@interface AudioKit : NSObject
/**
  Format of AudioKit Nodes
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AVAudioFormat * _Nonnull format;)
+ (AVAudioFormat * _Nonnull)format;
+ (void)setFormat:(AVAudioFormat * _Nonnull)value;
/**
  Reference to the AV Audio Engine
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AVAudioEngine * _Nonnull engine;)
+ (AVAudioEngine * _Nonnull)engine;
/**
  An audio output operation that most applications will need to use last
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AKNode * _Nullable output;)
+ (AKNode * _Nullable)output;
+ (void)setOutput:(AKNode * _Nullable)newValue;
/**
  Enumerate the list of available input devices.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AKDevice *> * _Nullable availableInputs;)
+ (NSArray<AKDevice *> * _Nullable)availableInputs;
/**
  Enumerate the list of available output devices.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AKDevice *> * _Nullable availableOutputs;)
+ (NSArray<AKDevice *> * _Nullable)availableOutputs;
/**
  The name of the current preferred input device, if available.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AKDevice * _Nullable inputDevice;)
+ (AKDevice * _Nullable)inputDevice;
/**
  Change the preferred input device, giving it one of the names from the list of available inputs.
*/
+ (BOOL)setInputDevice:(AKDevice * _Nonnull)input error:(NSError * _Nullable * _Nullable)error;
/**
  Change the preferred output device, giving it one of the names from the list of available output.
*/
+ (BOOL)setOutputDevice:(AKDevice * _Nonnull)output error:(NSError * _Nullable * _Nullable)error;
/**
  Start up the audio engine
*/
+ (void)start;
/**
  Stop the audio engine
*/
+ (void)stop;
/**
  Testing AKNode
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AKTester * _Nullable tester;)
+ (AKTester * _Nullable)tester;
+ (void)setTester:(AKTester * _Nullable)value;
/**
  Test the output of a given node
  \param node AKNode to test

  \param duration Number of seconds to test (accurate to the sample)

*/
+ (void)testWithNode:(AKNode * _Nonnull)node duration:(double)duration;
/**
  Audition the test to hear what it sounds like
  \param node AKNode to test

  \param duration Number of seconds to test (accurate to the sample)

*/
+ (void)auditionTestWithNode:(AKNode * _Nonnull)node duration:(double)duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
