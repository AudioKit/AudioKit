// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AVFoundation
import CAudioKit

/// This is a stereo phaser, generated from Faust code taken from the Guitarix project.
public class Phaser: Node, AudioUnitContainer, Tappable, Toggleable {

    /// Unique four-letter identifier "phas"
    public static let ComponentDescription = AudioComponentDescription(effect: "phas")

    /// Internal type of audio unit for this node
    public typealias AudioUnitType = InternalAU

    /// Internal audio unit 
    public private(set) var internalAU: AudioUnitType?

    // MARK: - Parameters

    /// Specification details for notchMinimumFrequency
    public static let notchMinimumFrequencyDef = NodeParameterDef(
        identifier: "notchMinimumFrequency",
        name: "Notch Minimum Frequency",
        address: akGetParameterAddress("PhaserParameterNotchMinimumFrequency"),
        range: 20 ... 5_000,
        unit: .hertz,
        flags: .default)

    /// Notch Minimum Frequency
    @Parameter public var notchMinimumFrequency: AUValue

    /// Specification details for notchMaximumFrequency
    public static let notchMaximumFrequencyDef = NodeParameterDef(
        identifier: "notchMaximumFrequency",
        name: "Notch Maximum Frequency",
        address: akGetParameterAddress("PhaserParameterNotchMaximumFrequency"),
        range: 20 ... 10_000,
        unit: .hertz,
        flags: .default)

    /// Notch Maximum Frequency
    @Parameter public var notchMaximumFrequency: AUValue

    /// Specification details for notchWidth
    public static let notchWidthDef = NodeParameterDef(
        identifier: "notchWidth",
        name: "Between 10 and 5000",
        address: akGetParameterAddress("PhaserParameterNotchWidth"),
        range: 10 ... 5_000,
        unit: .hertz,
        flags: .default)

    /// Between 10 and 5000
    @Parameter public var notchWidth: AUValue

    /// Specification details for notchFrequency
    public static let notchFrequencyDef = NodeParameterDef(
        identifier: "notchFrequency",
        name: "Between 1.1 and 4",
        address: akGetParameterAddress("PhaserParameterNotchFrequency"),
        range: 1.1 ... 4.0,
        unit: .hertz,
        flags: .default)

    /// Between 1.1 and 4
    @Parameter public var notchFrequency: AUValue

    /// Specification details for vibratoMode
    public static let vibratoModeDef = NodeParameterDef(
        identifier: "vibratoMode",
        name: "Direct or Vibrato (default)",
        address: akGetParameterAddress("PhaserParameterVibratoMode"),
        range: 0 ... 1,
        unit: .generic,
        flags: .default)

    /// Direct or Vibrato (default)
    @Parameter public var vibratoMode: AUValue

    /// Specification details for depth
    public static let depthDef = NodeParameterDef(
        identifier: "depth",
        name: "Between 0 and 1",
        address: akGetParameterAddress("PhaserParameterDepth"),
        range: 0 ... 1,
        unit: .generic,
        flags: .default)

    /// Between 0 and 1
    @Parameter public var depth: AUValue

    /// Specification details for feedback
    public static let feedbackDef = NodeParameterDef(
        identifier: "feedback",
        name: "Between 0 and 1",
        address: akGetParameterAddress("PhaserParameterFeedback"),
        range: 0 ... 1,
        unit: .generic,
        flags: .default)

    /// Between 0 and 1
    @Parameter public var feedback: AUValue

    /// Specification details for inverted
    public static let invertedDef = NodeParameterDef(
        identifier: "inverted",
        name: "1 or 0",
        address: akGetParameterAddress("PhaserParameterInverted"),
        range: 0 ... 1,
        unit: .generic,
        flags: .default)

    /// 1 or 0
    @Parameter public var inverted: AUValue

    /// Specification details for lfoBPM
    public static let lfoBPMDef = NodeParameterDef(
        identifier: "lfoBPM",
        name: "Between 24 and 360",
        address: akGetParameterAddress("PhaserParameterLfoBPM"),
        range: 24 ... 360,
        unit: .generic,
        flags: .default)

    /// Between 24 and 360
    @Parameter public var lfoBPM: AUValue

    // MARK: - Audio Unit

    /// Internal Audio Unit for Phaser
    public class InternalAU: AudioUnitBase {
        /// Get an array of the parameter definitions
        /// - Returns: Array of parameter definitions
        public override func getParameterDefs() -> [NodeParameterDef] {
            [Phaser.notchMinimumFrequencyDef,
             Phaser.notchMaximumFrequencyDef,
             Phaser.notchWidthDef,
             Phaser.notchFrequencyDef,
             Phaser.vibratoModeDef,
             Phaser.depthDef,
             Phaser.feedbackDef,
             Phaser.invertedDef,
             Phaser.lfoBPMDef]
        }

        /// Create the DSP Refence for this node
        /// - Returns: DSP Reference
        public override func createDSP() -> DSPRef {
            akCreateDSP("PhaserDSP")
        }
    }

    // MARK: - Initialization

    /// Initialize this phaser node
    ///
    /// - Parameters:
    ///   - input: Input node to process
    ///   - notchMinimumFrequency: Notch Minimum Frequency
    ///   - notchMaximumFrequency: Notch Maximum Frequency
    ///   - notchWidth: Between 10 and 5000
    ///   - notchFrequency: Between 1.1 and 4
    ///   - vibratoMode: Direct or Vibrato (default)
    ///   - depth: Between 0 and 1
    ///   - feedback: Between 0 and 1
    ///   - inverted: 1 or 0
    ///   - lfoBPM: Between 24 and 360
    ///
    public init(
        _ input: Node,
        notchMinimumFrequency: AUValue = 100,
        notchMaximumFrequency: AUValue = 800,
        notchWidth: AUValue = 1_000,
        notchFrequency: AUValue = 1.5,
        vibratoMode: AUValue = 1,
        depth: AUValue = 1,
        feedback: AUValue = 0,
        inverted: AUValue = 0,
        lfoBPM: AUValue = 30
        ) {
        super.init(avAudioNode: AVAudioNode())

        instantiateAudioUnit { avAudioUnit in
            self.avAudioUnit = avAudioUnit
            self.avAudioNode = avAudioUnit

            guard let audioUnit = avAudioUnit.auAudioUnit as? AudioUnitType else {
                fatalError("Couldn't create audio unit")
            }
            self.internalAU = audioUnit

            self.notchMinimumFrequency = notchMinimumFrequency
            self.notchMaximumFrequency = notchMaximumFrequency
            self.notchWidth = notchWidth
            self.notchFrequency = notchFrequency
            self.vibratoMode = vibratoMode
            self.depth = depth
            self.feedback = feedback
            self.inverted = inverted
            self.lfoBPM = lfoBPM
        }
        connections.append(input)
    }
}
